
lab2a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001db0  0800a580  0800a580  0001a580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c330  0800c330  00020230  2**0
                  CONTENTS
  4 .ARM          00000008  0800c330  0800c330  0001c330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c338  0800c338  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c338  0800c338  0001c338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c33c  0800c33c  0001c33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800c340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000230  0800c570  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  0800c570  00020690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145ac  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c80  00000000  00000000  0003480c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001280  00000000  00000000  00037490  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001128  00000000  00000000  00038710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023f77  00000000  00000000  00039838  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f40e  00000000  00000000  0005d7af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dcad6  00000000  00000000  0006cbbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00149693  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a04  00000000  00000000  00149710  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000230 	.word	0x20000230
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a564 	.word	0x0800a564

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000234 	.word	0x20000234
 80001ec:	0800a564 	.word	0x0800a564

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000fac:	f000 fa5c 	bl	8001468 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000fb0:	20ca      	movs	r0, #202	; 0xca
 8000fb2:	f000 f95d 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000fb6:	20c3      	movs	r0, #195	; 0xc3
 8000fb8:	f000 f967 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000fbc:	2008      	movs	r0, #8
 8000fbe:	f000 f964 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000fc2:	2050      	movs	r0, #80	; 0x50
 8000fc4:	f000 f961 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000fc8:	20cf      	movs	r0, #207	; 0xcf
 8000fca:	f000 f951 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f95b 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000fd4:	20c1      	movs	r0, #193	; 0xc1
 8000fd6:	f000 f958 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000fda:	2030      	movs	r0, #48	; 0x30
 8000fdc:	f000 f955 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000fe0:	20ed      	movs	r0, #237	; 0xed
 8000fe2:	f000 f945 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000fe6:	2064      	movs	r0, #100	; 0x64
 8000fe8:	f000 f94f 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f94c 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000ff2:	2012      	movs	r0, #18
 8000ff4:	f000 f949 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000ff8:	2081      	movs	r0, #129	; 0x81
 8000ffa:	f000 f946 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000ffe:	20e8      	movs	r0, #232	; 0xe8
 8001000:	f000 f936 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001004:	2085      	movs	r0, #133	; 0x85
 8001006:	f000 f940 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800100a:	2000      	movs	r0, #0
 800100c:	f000 f93d 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001010:	2078      	movs	r0, #120	; 0x78
 8001012:	f000 f93a 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001016:	20cb      	movs	r0, #203	; 0xcb
 8001018:	f000 f92a 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800101c:	2039      	movs	r0, #57	; 0x39
 800101e:	f000 f934 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001022:	202c      	movs	r0, #44	; 0x2c
 8001024:	f000 f931 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001028:	2000      	movs	r0, #0
 800102a:	f000 f92e 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800102e:	2034      	movs	r0, #52	; 0x34
 8001030:	f000 f92b 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001034:	2002      	movs	r0, #2
 8001036:	f000 f928 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800103a:	20f7      	movs	r0, #247	; 0xf7
 800103c:	f000 f918 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001040:	2020      	movs	r0, #32
 8001042:	f000 f922 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001046:	20ea      	movs	r0, #234	; 0xea
 8001048:	f000 f912 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800104c:	2000      	movs	r0, #0
 800104e:	f000 f91c 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f919 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001058:	20b1      	movs	r0, #177	; 0xb1
 800105a:	f000 f909 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800105e:	2000      	movs	r0, #0
 8001060:	f000 f913 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001064:	201b      	movs	r0, #27
 8001066:	f000 f910 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800106a:	20b6      	movs	r0, #182	; 0xb6
 800106c:	f000 f900 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001070:	200a      	movs	r0, #10
 8001072:	f000 f90a 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001076:	20a2      	movs	r0, #162	; 0xa2
 8001078:	f000 f907 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800107c:	20c0      	movs	r0, #192	; 0xc0
 800107e:	f000 f8f7 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001082:	2010      	movs	r0, #16
 8001084:	f000 f901 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001088:	20c1      	movs	r0, #193	; 0xc1
 800108a:	f000 f8f1 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800108e:	2010      	movs	r0, #16
 8001090:	f000 f8fb 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001094:	20c5      	movs	r0, #197	; 0xc5
 8001096:	f000 f8eb 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800109a:	2045      	movs	r0, #69	; 0x45
 800109c:	f000 f8f5 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80010a0:	2015      	movs	r0, #21
 80010a2:	f000 f8f2 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80010a6:	20c7      	movs	r0, #199	; 0xc7
 80010a8:	f000 f8e2 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80010ac:	2090      	movs	r0, #144	; 0x90
 80010ae:	f000 f8ec 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80010b2:	2036      	movs	r0, #54	; 0x36
 80010b4:	f000 f8dc 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80010b8:	20c8      	movs	r0, #200	; 0xc8
 80010ba:	f000 f8e6 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80010be:	20f2      	movs	r0, #242	; 0xf2
 80010c0:	f000 f8d6 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 f8e0 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80010ca:	20b0      	movs	r0, #176	; 0xb0
 80010cc:	f000 f8d0 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80010d0:	20c2      	movs	r0, #194	; 0xc2
 80010d2:	f000 f8da 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80010d6:	20b6      	movs	r0, #182	; 0xb6
 80010d8:	f000 f8ca 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80010dc:	200a      	movs	r0, #10
 80010de:	f000 f8d4 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80010e2:	20a7      	movs	r0, #167	; 0xa7
 80010e4:	f000 f8d1 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80010e8:	2027      	movs	r0, #39	; 0x27
 80010ea:	f000 f8ce 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80010ee:	2004      	movs	r0, #4
 80010f0:	f000 f8cb 	bl	800128a <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80010f4:	202a      	movs	r0, #42	; 0x2a
 80010f6:	f000 f8bb 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f8c5 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001100:	2000      	movs	r0, #0
 8001102:	f000 f8c2 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001106:	2000      	movs	r0, #0
 8001108:	f000 f8bf 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800110c:	20ef      	movs	r0, #239	; 0xef
 800110e:	f000 f8bc 	bl	800128a <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001112:	202b      	movs	r0, #43	; 0x2b
 8001114:	f000 f8ac 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001118:	2000      	movs	r0, #0
 800111a:	f000 f8b6 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800111e:	2000      	movs	r0, #0
 8001120:	f000 f8b3 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001124:	2001      	movs	r0, #1
 8001126:	f000 f8b0 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800112a:	203f      	movs	r0, #63	; 0x3f
 800112c:	f000 f8ad 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001130:	20f6      	movs	r0, #246	; 0xf6
 8001132:	f000 f89d 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001136:	2001      	movs	r0, #1
 8001138:	f000 f8a7 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800113c:	2000      	movs	r0, #0
 800113e:	f000 f8a4 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001142:	2006      	movs	r0, #6
 8001144:	f000 f8a1 	bl	800128a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001148:	202c      	movs	r0, #44	; 0x2c
 800114a:	f000 f891 	bl	8001270 <ili9341_WriteReg>
  LCD_Delay(200);
 800114e:	20c8      	movs	r0, #200	; 0xc8
 8001150:	f000 fa78 	bl	8001644 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001154:	2026      	movs	r0, #38	; 0x26
 8001156:	f000 f88b 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800115a:	2001      	movs	r0, #1
 800115c:	f000 f895 	bl	800128a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001160:	20e0      	movs	r0, #224	; 0xe0
 8001162:	f000 f885 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001166:	200f      	movs	r0, #15
 8001168:	f000 f88f 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800116c:	2029      	movs	r0, #41	; 0x29
 800116e:	f000 f88c 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001172:	2024      	movs	r0, #36	; 0x24
 8001174:	f000 f889 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001178:	200c      	movs	r0, #12
 800117a:	f000 f886 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800117e:	200e      	movs	r0, #14
 8001180:	f000 f883 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001184:	2009      	movs	r0, #9
 8001186:	f000 f880 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800118a:	204e      	movs	r0, #78	; 0x4e
 800118c:	f000 f87d 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001190:	2078      	movs	r0, #120	; 0x78
 8001192:	f000 f87a 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001196:	203c      	movs	r0, #60	; 0x3c
 8001198:	f000 f877 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800119c:	2009      	movs	r0, #9
 800119e:	f000 f874 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80011a2:	2013      	movs	r0, #19
 80011a4:	f000 f871 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80011a8:	2005      	movs	r0, #5
 80011aa:	f000 f86e 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80011ae:	2017      	movs	r0, #23
 80011b0:	f000 f86b 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80011b4:	2011      	movs	r0, #17
 80011b6:	f000 f868 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f000 f865 	bl	800128a <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80011c0:	20e1      	movs	r0, #225	; 0xe1
 80011c2:	f000 f855 	bl	8001270 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f000 f85f 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80011cc:	2016      	movs	r0, #22
 80011ce:	f000 f85c 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80011d2:	201b      	movs	r0, #27
 80011d4:	f000 f859 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80011d8:	2004      	movs	r0, #4
 80011da:	f000 f856 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80011de:	2011      	movs	r0, #17
 80011e0:	f000 f853 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80011e4:	2007      	movs	r0, #7
 80011e6:	f000 f850 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80011ea:	2031      	movs	r0, #49	; 0x31
 80011ec:	f000 f84d 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80011f0:	2033      	movs	r0, #51	; 0x33
 80011f2:	f000 f84a 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80011f6:	2042      	movs	r0, #66	; 0x42
 80011f8:	f000 f847 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80011fc:	2005      	movs	r0, #5
 80011fe:	f000 f844 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001202:	200c      	movs	r0, #12
 8001204:	f000 f841 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001208:	200a      	movs	r0, #10
 800120a:	f000 f83e 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800120e:	2028      	movs	r0, #40	; 0x28
 8001210:	f000 f83b 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001214:	202f      	movs	r0, #47	; 0x2f
 8001216:	f000 f838 	bl	800128a <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800121a:	200f      	movs	r0, #15
 800121c:	f000 f835 	bl	800128a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001220:	2011      	movs	r0, #17
 8001222:	f000 f825 	bl	8001270 <ili9341_WriteReg>
  LCD_Delay(200);
 8001226:	20c8      	movs	r0, #200	; 0xc8
 8001228:	f000 fa0c 	bl	8001644 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800122c:	2029      	movs	r0, #41	; 0x29
 800122e:	f000 f81f 	bl	8001270 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001232:	202c      	movs	r0, #44	; 0x2c
 8001234:	f000 f81c 	bl	8001270 <ili9341_WriteReg>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001240:	f000 f912 	bl	8001468 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001244:	2103      	movs	r1, #3
 8001246:	20d3      	movs	r0, #211	; 0xd3
 8001248:	f000 f82c 	bl	80012a4 <ili9341_ReadData>
 800124c:	4603      	mov	r3, r0
 800124e:	b29b      	uxth	r3, r3
}
 8001250:	4618      	mov	r0, r3
 8001252:	bd80      	pop	{r7, pc}

08001254 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001258:	2029      	movs	r0, #41	; 0x29
 800125a:	f000 f809 	bl	8001270 <ili9341_WriteReg>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}

08001262 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001266:	2028      	movs	r0, #40	; 0x28
 8001268:	f000 f802 	bl	8001270 <ili9341_WriteReg>
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f98d 	bl	800159c <LCD_IO_WriteReg>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f95e 	bl	8001558 <LCD_IO_WriteData>
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	460a      	mov	r2, r1
 80012ae:	80fb      	strh	r3, [r7, #6]
 80012b0:	4613      	mov	r3, r2
 80012b2:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80012b4:	797a      	ldrb	r2, [r7, #5]
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f990 	bl	80015e0 <LCD_IO_ReadData>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80012ce:	23f0      	movs	r3, #240	; 0xf0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80012de:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80012f0:	4819      	ldr	r0, [pc, #100]	; (8001358 <SPIx_Init+0x6c>)
 80012f2:	f004 f88d 	bl	8005410 <HAL_SPI_GetState>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d12b      	bne.n	8001354 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <SPIx_Init+0x6c>)
 80012fe:	4a17      	ldr	r2, [pc, #92]	; (800135c <SPIx_Init+0x70>)
 8001300:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <SPIx_Init+0x6c>)
 8001304:	2218      	movs	r2, #24
 8001306:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <SPIx_Init+0x6c>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <SPIx_Init+0x6c>)
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <SPIx_Init+0x6c>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <SPIx_Init+0x6c>)
 800131c:	2200      	movs	r2, #0
 800131e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001320:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <SPIx_Init+0x6c>)
 8001322:	2207      	movs	r2, #7
 8001324:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <SPIx_Init+0x6c>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <SPIx_Init+0x6c>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <SPIx_Init+0x6c>)
 8001334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001338:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <SPIx_Init+0x6c>)
 800133c:	2200      	movs	r2, #0
 800133e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <SPIx_Init+0x6c>)
 8001342:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001346:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <SPIx_Init+0x6c>)
 800134a:	f000 f853 	bl	80013f4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800134e:	4802      	ldr	r0, [pc, #8]	; (8001358 <SPIx_Init+0x6c>)
 8001350:	f003 fbf3 	bl	8004b3a <HAL_SPI_Init>
  } 
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2000024c 	.word	0x2000024c
 800135c:	40015000 	.word	0x40015000

08001360 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	b29a      	uxth	r2, r3
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <SPIx_Read+0x38>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f107 0108 	add.w	r1, r7, #8
 800137a:	4808      	ldr	r0, [pc, #32]	; (800139c <SPIx_Read+0x3c>)
 800137c:	f003 fd9d 	bl	8004eba <HAL_SPI_Receive>
 8001380:	4603      	mov	r3, r0
 8001382:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800138a:	f000 f827 	bl	80013dc <SPIx_Error>
  }
  
  return readvalue;
 800138e:	68bb      	ldr	r3, [r7, #8]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000038 	.word	0x20000038
 800139c:	2000024c 	.word	0x2000024c

080013a0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <SPIx_Write+0x34>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	1db9      	adds	r1, r7, #6
 80013b4:	2201      	movs	r2, #1
 80013b6:	4808      	ldr	r0, [pc, #32]	; (80013d8 <SPIx_Write+0x38>)
 80013b8:	f003 fc4b 	bl	8004c52 <HAL_SPI_Transmit>
 80013bc:	4603      	mov	r3, r0
 80013be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80013c6:	f000 f809 	bl	80013dc <SPIx_Error>
  }
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000038 	.word	0x20000038
 80013d8:	2000024c 	.word	0x2000024c

080013dc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80013e0:	4803      	ldr	r0, [pc, #12]	; (80013f0 <SPIx_Error+0x14>)
 80013e2:	f003 fc0e 	bl	8004c02 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80013e6:	f7ff ff81 	bl	80012ec <SPIx_Init>
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000024c 	.word	0x2000024c

080013f4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <SPIx_MspInit+0x6c>)
 8001402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001404:	4a16      	ldr	r2, [pc, #88]	; (8001460 <SPIx_MspInit+0x6c>)
 8001406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800140a:	6453      	str	r3, [r2, #68]	; 0x44
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <SPIx_MspInit+0x6c>)
 800140e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	4b10      	ldr	r3, [pc, #64]	; (8001460 <SPIx_MspInit+0x6c>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <SPIx_MspInit+0x6c>)
 8001422:	f043 0320 	orr.w	r3, r3, #32
 8001426:	6313      	str	r3, [r2, #48]	; 0x30
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <SPIx_MspInit+0x6c>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	f003 0320 	and.w	r3, r3, #32
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001434:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800143e:	2302      	movs	r3, #2
 8001440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001442:	2301      	movs	r3, #1
 8001444:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001446:	2305      	movs	r3, #5
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <SPIx_MspInit+0x70>)
 8001452:	f001 fd89 	bl	8002f68 <HAL_GPIO_Init>
}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	; 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40021400 	.word	0x40021400

08001468 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800146e:	4b36      	ldr	r3, [pc, #216]	; (8001548 <LCD_IO_Init+0xe0>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d164      	bne.n	8001540 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <LCD_IO_Init+0xe0>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	4b32      	ldr	r3, [pc, #200]	; (800154c <LCD_IO_Init+0xe4>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001484:	4a31      	ldr	r2, [pc, #196]	; (800154c <LCD_IO_Init+0xe4>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6313      	str	r3, [r2, #48]	; 0x30
 800148c:	4b2f      	ldr	r3, [pc, #188]	; (800154c <LCD_IO_Init+0xe4>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	4619      	mov	r1, r3
 80014b0:	4827      	ldr	r0, [pc, #156]	; (8001550 <LCD_IO_Init+0xe8>)
 80014b2:	f001 fd59 	bl	8002f68 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <LCD_IO_Init+0xe4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a23      	ldr	r2, [pc, #140]	; (800154c <LCD_IO_Init+0xe4>)
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <LCD_IO_Init+0xe4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80014d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80014e0:	2302      	movs	r3, #2
 80014e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4619      	mov	r1, r3
 80014ea:	4819      	ldr	r0, [pc, #100]	; (8001550 <LCD_IO_Init+0xe8>)
 80014ec:	f001 fd3c 	bl	8002f68 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <LCD_IO_Init+0xe4>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <LCD_IO_Init+0xe4>)
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <LCD_IO_Init+0xe4>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800150c:	2304      	movs	r3, #4
 800150e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001518:	2302      	movs	r3, #2
 800151a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4619      	mov	r1, r3
 8001522:	480c      	ldr	r0, [pc, #48]	; (8001554 <LCD_IO_Init+0xec>)
 8001524:	f001 fd20 	bl	8002f68 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001528:	2200      	movs	r2, #0
 800152a:	2104      	movs	r1, #4
 800152c:	4809      	ldr	r0, [pc, #36]	; (8001554 <LCD_IO_Init+0xec>)
 800152e:	f001 ffe7 	bl	8003500 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001532:	2201      	movs	r2, #1
 8001534:	2104      	movs	r1, #4
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <LCD_IO_Init+0xec>)
 8001538:	f001 ffe2 	bl	8003500 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800153c:	f7ff fed6 	bl	80012ec <SPIx_Init>
  }
}
 8001540:	bf00      	nop
 8001542:	3720      	adds	r7, #32
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200002a4 	.word	0x200002a4
 800154c:	40023800 	.word	0x40023800
 8001550:	40020c00 	.word	0x40020c00
 8001554:	40020800 	.word	0x40020800

08001558 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001562:	2201      	movs	r2, #1
 8001564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001568:	480a      	ldr	r0, [pc, #40]	; (8001594 <LCD_IO_WriteData+0x3c>)
 800156a:	f001 ffc9 	bl	8003500 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800156e:	2200      	movs	r2, #0
 8001570:	2104      	movs	r1, #4
 8001572:	4809      	ldr	r0, [pc, #36]	; (8001598 <LCD_IO_WriteData+0x40>)
 8001574:	f001 ffc4 	bl	8003500 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001578:	88fb      	ldrh	r3, [r7, #6]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff10 	bl	80013a0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001580:	2201      	movs	r2, #1
 8001582:	2104      	movs	r1, #4
 8001584:	4804      	ldr	r0, [pc, #16]	; (8001598 <LCD_IO_WriteData+0x40>)
 8001586:	f001 ffbb 	bl	8003500 <HAL_GPIO_WritePin>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40020800 	.word	0x40020800

0800159c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ac:	480a      	ldr	r0, [pc, #40]	; (80015d8 <LCD_IO_WriteReg+0x3c>)
 80015ae:	f001 ffa7 	bl	8003500 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80015b2:	2200      	movs	r2, #0
 80015b4:	2104      	movs	r1, #4
 80015b6:	4809      	ldr	r0, [pc, #36]	; (80015dc <LCD_IO_WriteReg+0x40>)
 80015b8:	f001 ffa2 	bl	8003500 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff feed 	bl	80013a0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80015c6:	2201      	movs	r2, #1
 80015c8:	2104      	movs	r1, #4
 80015ca:	4804      	ldr	r0, [pc, #16]	; (80015dc <LCD_IO_WriteReg+0x40>)
 80015cc:	f001 ff98 	bl	8003500 <HAL_GPIO_WritePin>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40020c00 	.word	0x40020c00
 80015dc:	40020800 	.word	0x40020800

080015e0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	460a      	mov	r2, r1
 80015ea:	80fb      	strh	r3, [r7, #6]
 80015ec:	4613      	mov	r3, r2
 80015ee:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80015f4:	2200      	movs	r2, #0
 80015f6:	2104      	movs	r1, #4
 80015f8:	4810      	ldr	r0, [pc, #64]	; (800163c <LCD_IO_ReadData+0x5c>)
 80015fa:	f001 ff81 	bl	8003500 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001604:	480e      	ldr	r0, [pc, #56]	; (8001640 <LCD_IO_ReadData+0x60>)
 8001606:	f001 ff7b 	bl	8003500 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fec7 	bl	80013a0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001612:	797b      	ldrb	r3, [r7, #5]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fea3 	bl	8001360 <SPIx_Read>
 800161a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001622:	4807      	ldr	r0, [pc, #28]	; (8001640 <LCD_IO_ReadData+0x60>)
 8001624:	f001 ff6c 	bl	8003500 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001628:	2201      	movs	r2, #1
 800162a:	2104      	movs	r1, #4
 800162c:	4803      	ldr	r0, [pc, #12]	; (800163c <LCD_IO_ReadData+0x5c>)
 800162e:	f001 ff67 	bl	8003500 <HAL_GPIO_WritePin>
  
  return readvalue;
 8001632:	68fb      	ldr	r3, [r7, #12]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40020800 	.word	0x40020800
 8001640:	40020c00 	.word	0x40020c00

08001644 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 ff0f 	bl	8002470 <HAL_Delay>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <BSP_LCD_Init+0xbc>)
 8001662:	4a2e      	ldr	r2, [pc, #184]	; (800171c <BSP_LCD_Init+0xc0>)
 8001664:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001666:	4b2c      	ldr	r3, [pc, #176]	; (8001718 <BSP_LCD_Init+0xbc>)
 8001668:	2209      	movs	r2, #9
 800166a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800166c:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <BSP_LCD_Init+0xbc>)
 800166e:	2201      	movs	r2, #1
 8001670:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001672:	4b29      	ldr	r3, [pc, #164]	; (8001718 <BSP_LCD_Init+0xbc>)
 8001674:	221d      	movs	r2, #29
 8001676:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001678:	4b27      	ldr	r3, [pc, #156]	; (8001718 <BSP_LCD_Init+0xbc>)
 800167a:	2203      	movs	r2, #3
 800167c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <BSP_LCD_Init+0xbc>)
 8001680:	f240 120d 	movw	r2, #269	; 0x10d
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001686:	4b24      	ldr	r3, [pc, #144]	; (8001718 <BSP_LCD_Init+0xbc>)
 8001688:	f240 1243 	movw	r2, #323	; 0x143
 800168c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800168e:	4b22      	ldr	r3, [pc, #136]	; (8001718 <BSP_LCD_Init+0xbc>)
 8001690:	f240 1217 	movw	r2, #279	; 0x117
 8001694:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <BSP_LCD_Init+0xbc>)
 8001698:	f240 1247 	movw	r2, #327	; 0x147
 800169c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800169e:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <BSP_LCD_Init+0xbc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <BSP_LCD_Init+0xbc>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <BSP_LCD_Init+0xbc>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <BSP_LCD_Init+0xc4>)
 80016b8:	2208      	movs	r2, #8
 80016ba:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <BSP_LCD_Init+0xc4>)
 80016be:	22c0      	movs	r2, #192	; 0xc0
 80016c0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <BSP_LCD_Init+0xc4>)
 80016c4:	2204      	movs	r2, #4
 80016c6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <BSP_LCD_Init+0xc4>)
 80016ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80016d0:	4813      	ldr	r0, [pc, #76]	; (8001720 <BSP_LCD_Init+0xc4>)
 80016d2:	f003 f80f 	bl	80046f4 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <BSP_LCD_Init+0xbc>)
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <BSP_LCD_Init+0xbc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <BSP_LCD_Init+0xbc>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <BSP_LCD_Init+0xbc>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80016ee:	f000 fa95 	bl	8001c1c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80016f2:	4809      	ldr	r0, [pc, #36]	; (8001718 <BSP_LCD_Init+0xbc>)
 80016f4:	f002 f8c2 	bl	800387c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <BSP_LCD_Init+0xc8>)
 80016fa:	4a0b      	ldr	r2, [pc, #44]	; (8001728 <BSP_LCD_Init+0xcc>)
 80016fc:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <BSP_LCD_Init+0xc8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001706:	f000 fc77 	bl	8001ff8 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800170a:	4808      	ldr	r0, [pc, #32]	; (800172c <BSP_LCD_Init+0xd0>)
 800170c:	f000 f8be 	bl	800188c <BSP_LCD_SetFont>

  return LCD_OK;
 8001710:	2300      	movs	r3, #0
}  
 8001712:	4618      	mov	r0, r3
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000040c 	.word	0x2000040c
 800171c:	40016800 	.word	0x40016800
 8001720:	200002e8 	.word	0x200002e8
 8001724:	200004b4 	.word	0x200004b4
 8001728:	20000000 	.word	0x20000000
 800172c:	2000003c 	.word	0x2000003c

08001730 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <BSP_LCD_GetXSize+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	4798      	blx	r3
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200004b4 	.word	0x200004b4

08001748 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <BSP_LCD_GetYSize+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	4798      	blx	r3
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200004b4 	.word	0x200004b4

08001760 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001760:	b580      	push	{r7, lr}
 8001762:	b090      	sub	sp, #64	; 0x40
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001770:	f7ff ffde 	bl	8001730 <BSP_LCD_GetXSize>
 8001774:	4603      	mov	r3, r0
 8001776:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800177c:	f7ff ffe4 	bl	8001748 <BSP_LCD_GetYSize>
 8001780:	4603      	mov	r3, r0
 8001782:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800178c:	23ff      	movs	r3, #255	; 0xff
 800178e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80017a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80017ac:	2307      	movs	r3, #7
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80017b0:	f7ff ffbe 	bl	8001730 <BSP_LCD_GetXSize>
 80017b4:	4603      	mov	r3, r0
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80017b8:	f7ff ffc6 	bl	8001748 <BSP_LCD_GetYSize>
 80017bc:	4603      	mov	r3, r0
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80017c0:	88fa      	ldrh	r2, [r7, #6]
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	4619      	mov	r1, r3
 80017c8:	4814      	ldr	r0, [pc, #80]	; (800181c <BSP_LCD_LayerDefaultInit+0xbc>)
 80017ca:	f002 f927 	bl	8003a1c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80017ce:	88fa      	ldrh	r2, [r7, #6]
 80017d0:	4913      	ldr	r1, [pc, #76]	; (8001820 <BSP_LCD_LayerDefaultInit+0xc0>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	3304      	adds	r3, #4
 80017de:	f04f 32ff 	mov.w	r2, #4294967295
 80017e2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80017e4:	88fa      	ldrh	r2, [r7, #6]
 80017e6:	490e      	ldr	r1, [pc, #56]	; (8001820 <BSP_LCD_LayerDefaultInit+0xc0>)
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	3308      	adds	r3, #8
 80017f4:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <BSP_LCD_LayerDefaultInit+0xc4>)
 80017f6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80017f8:	88fa      	ldrh	r2, [r7, #6]
 80017fa:	4909      	ldr	r1, [pc, #36]	; (8001820 <BSP_LCD_LayerDefaultInit+0xc0>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800180a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <BSP_LCD_LayerDefaultInit+0xbc>)
 800180e:	f002 f943 	bl	8003a98 <HAL_LTDC_EnableDither>
}
 8001812:	bf00      	nop
 8001814:	3740      	adds	r7, #64	; 0x40
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000040c 	.word	0x2000040c
 8001820:	2000031c 	.word	0x2000031c
 8001824:	2000003c 	.word	0x2000003c

08001828 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <BSP_LCD_SetTextColor+0x28>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <BSP_LCD_SetTextColor+0x2c>)
 8001836:	4613      	mov	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4413      	add	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	20000318 	.word	0x20000318
 8001854:	2000031c 	.word	0x2000031c

08001858 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <BSP_LCD_SetBackColor+0x2c>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4908      	ldr	r1, [pc, #32]	; (8001888 <BSP_LCD_SetBackColor+0x30>)
 8001866:	4613      	mov	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	3304      	adds	r3, #4
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	601a      	str	r2, [r3, #0]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000318 	.word	0x20000318
 8001888:	2000031c 	.word	0x2000031c

0800188c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <BSP_LCD_SetFont+0x2c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4908      	ldr	r1, [pc, #32]	; (80018bc <BSP_LCD_SetFont+0x30>)
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	3308      	adds	r3, #8
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	601a      	str	r2, [r3, #0]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000318 	.word	0x20000318
 80018bc:	2000031c 	.word	0x2000031c

080018c0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <BSP_LCD_GetFont+0x24>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4907      	ldr	r1, [pc, #28]	; (80018e8 <BSP_LCD_GetFont+0x28>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	3308      	adds	r3, #8
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000318 	.word	0x20000318
 80018e8:	2000031c 	.word	0x2000031c

080018ec <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80018ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <BSP_LCD_Clear+0x48>)
 80018f6:	681c      	ldr	r4, [r3, #0]
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <BSP_LCD_Clear+0x48>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <BSP_LCD_Clear+0x4c>)
 80018fe:	2134      	movs	r1, #52	; 0x34
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	335c      	adds	r3, #92	; 0x5c
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461d      	mov	r5, r3
 800190c:	f7ff ff10 	bl	8001730 <BSP_LCD_GetXSize>
 8001910:	4606      	mov	r6, r0
 8001912:	f7ff ff19 	bl	8001748 <BSP_LCD_GetYSize>
 8001916:	4602      	mov	r2, r0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2300      	movs	r3, #0
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	4613      	mov	r3, r2
 8001922:	4632      	mov	r2, r6
 8001924:	4629      	mov	r1, r5
 8001926:	4620      	mov	r0, r4
 8001928:	f000 fb2e 	bl	8001f88 <FillBuffer>
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001934:	20000318 	.word	0x20000318
 8001938:	2000040c 	.word	0x2000040c

0800193c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	80fb      	strh	r3, [r7, #6]
 8001946:	460b      	mov	r3, r1
 8001948:	80bb      	strh	r3, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800194e:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <BSP_LCD_DisplayChar+0x80>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	491b      	ldr	r1, [pc, #108]	; (80019c0 <BSP_LCD_DisplayChar+0x84>)
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	3308      	adds	r3, #8
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6819      	ldr	r1, [r3, #0]
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800196a:	4b14      	ldr	r3, [pc, #80]	; (80019bc <BSP_LCD_DisplayChar+0x80>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4c14      	ldr	r4, [pc, #80]	; (80019c0 <BSP_LCD_DisplayChar+0x84>)
 8001970:	4613      	mov	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4413      	add	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4423      	add	r3, r4
 800197a:	3308      	adds	r3, #8
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001980:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001984:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <BSP_LCD_DisplayChar+0x80>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4c0d      	ldr	r4, [pc, #52]	; (80019c0 <BSP_LCD_DisplayChar+0x84>)
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4423      	add	r3, r4
 8001994:	3308      	adds	r3, #8
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	889b      	ldrh	r3, [r3, #4]
 800199a:	3307      	adds	r3, #7
 800199c:	2b00      	cmp	r3, #0
 800199e:	da00      	bge.n	80019a2 <BSP_LCD_DisplayChar+0x66>
 80019a0:	3307      	adds	r3, #7
 80019a2:	10db      	asrs	r3, r3, #3
 80019a4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80019a8:	18ca      	adds	r2, r1, r3
 80019aa:	88b9      	ldrh	r1, [r7, #4]
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 fa30 	bl	8001e14 <DrawChar>
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd90      	pop	{r4, r7, pc}
 80019bc:	20000318 	.word	0x20000318
 80019c0:	2000031c 	.word	0x2000031c

080019c4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80019c4:	b5b0      	push	{r4, r5, r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60ba      	str	r2, [r7, #8]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4603      	mov	r3, r0
 80019d0:	81fb      	strh	r3, [r7, #14]
 80019d2:	460b      	mov	r3, r1
 80019d4:	81bb      	strh	r3, [r7, #12]
 80019d6:	4613      	mov	r3, r2
 80019d8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80019da:	2301      	movs	r3, #1
 80019dc:	83fb      	strh	r3, [r7, #30]
 80019de:	2300      	movs	r3, #0
 80019e0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80019ee:	e002      	b.n	80019f6 <BSP_LCD_DisplayStringAt+0x32>
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	3301      	adds	r3, #1
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	617a      	str	r2, [r7, #20]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f6      	bne.n	80019f0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001a02:	f7ff fe95 	bl	8001730 <BSP_LCD_GetXSize>
 8001a06:	4b4a      	ldr	r3, [pc, #296]	; (8001b30 <BSP_LCD_DisplayStringAt+0x16c>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	494a      	ldr	r1, [pc, #296]	; (8001b34 <BSP_LCD_DisplayStringAt+0x170>)
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	3308      	adds	r3, #8
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	889b      	ldrh	r3, [r3, #4]
 8001a1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a20:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d01c      	beq.n	8001a62 <BSP_LCD_DisplayStringAt+0x9e>
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d017      	beq.n	8001a5c <BSP_LCD_DisplayStringAt+0x98>
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d12e      	bne.n	8001a8e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	1ad1      	subs	r1, r2, r3
 8001a36:	4b3e      	ldr	r3, [pc, #248]	; (8001b30 <BSP_LCD_DisplayStringAt+0x16c>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	483e      	ldr	r0, [pc, #248]	; (8001b34 <BSP_LCD_DisplayStringAt+0x170>)
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4403      	add	r3, r0
 8001a46:	3308      	adds	r3, #8
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	889b      	ldrh	r3, [r3, #4]
 8001a4c:	fb03 f301 	mul.w	r3, r3, r1
 8001a50:	085b      	lsrs	r3, r3, #1
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	89fb      	ldrh	r3, [r7, #14]
 8001a56:	4413      	add	r3, r2
 8001a58:	83fb      	strh	r3, [r7, #30]
      break;
 8001a5a:	e01b      	b.n	8001a94 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8001a5c:	89fb      	ldrh	r3, [r7, #14]
 8001a5e:	83fb      	strh	r3, [r7, #30]
      break;
 8001a60:	e018      	b.n	8001a94 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	b299      	uxth	r1, r3
 8001a6a:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <BSP_LCD_DisplayStringAt+0x16c>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4831      	ldr	r0, [pc, #196]	; (8001b34 <BSP_LCD_DisplayStringAt+0x170>)
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4403      	add	r3, r0
 8001a7a:	3308      	adds	r3, #8
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	889b      	ldrh	r3, [r3, #4]
 8001a80:	fb11 f303 	smulbb	r3, r1, r3
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	89fb      	ldrh	r3, [r7, #14]
 8001a88:	4413      	add	r3, r2
 8001a8a:	83fb      	strh	r3, [r7, #30]
      break;
 8001a8c:	e002      	b.n	8001a94 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8001a8e:	89fb      	ldrh	r3, [r7, #14]
 8001a90:	83fb      	strh	r3, [r7, #30]
      break;
 8001a92:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001a94:	e01a      	b.n	8001acc <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	781a      	ldrb	r2, [r3, #0]
 8001a9a:	89b9      	ldrh	r1, [r7, #12]
 8001a9c:	8bfb      	ldrh	r3, [r7, #30]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff4c 	bl	800193c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <BSP_LCD_DisplayStringAt+0x16c>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4922      	ldr	r1, [pc, #136]	; (8001b34 <BSP_LCD_DisplayStringAt+0x170>)
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3308      	adds	r3, #8
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	889a      	ldrh	r2, [r3, #4]
 8001aba:	8bfb      	ldrh	r3, [r7, #30]
 8001abc:	4413      	add	r3, r2
 8001abe:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60bb      	str	r3, [r7, #8]
    i++;
 8001ac6:	8bbb      	ldrh	r3, [r7, #28]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bf14      	ite	ne
 8001ad4:	2301      	movne	r3, #1
 8001ad6:	2300      	moveq	r3, #0
 8001ad8:	b2dc      	uxtb	r4, r3
 8001ada:	f7ff fe29 	bl	8001730 <BSP_LCD_GetXSize>
 8001ade:	4605      	mov	r5, r0
 8001ae0:	8bb9      	ldrh	r1, [r7, #28]
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <BSP_LCD_DisplayStringAt+0x16c>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4813      	ldr	r0, [pc, #76]	; (8001b34 <BSP_LCD_DisplayStringAt+0x170>)
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4403      	add	r3, r0
 8001af2:	3308      	adds	r3, #8
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	889b      	ldrh	r3, [r3, #4]
 8001af8:	fb03 f301 	mul.w	r3, r3, r1
 8001afc:	1aeb      	subs	r3, r5, r3
 8001afe:	b299      	uxth	r1, r3
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <BSP_LCD_DisplayStringAt+0x16c>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	480b      	ldr	r0, [pc, #44]	; (8001b34 <BSP_LCD_DisplayStringAt+0x170>)
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4403      	add	r3, r0
 8001b10:	3308      	adds	r3, #8
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	889b      	ldrh	r3, [r3, #4]
 8001b16:	4299      	cmp	r1, r3
 8001b18:	bf2c      	ite	cs
 8001b1a:	2301      	movcs	r3, #1
 8001b1c:	2300      	movcc	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	4023      	ands	r3, r4
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1b6      	bne.n	8001a96 <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 8001b28:	bf00      	nop
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b30:	20000318 	.word	0x20000318
 8001b34:	2000031c 	.word	0x2000031c

08001b38 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001b44:	f7ff febc 	bl	80018c0 <BSP_LCD_GetFont>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	88db      	ldrh	r3, [r3, #6]
 8001b4c:	88fa      	ldrh	r2, [r7, #6]
 8001b4e:	fb12 f303 	smulbb	r3, r2, r3
 8001b52:	b299      	uxth	r1, r3
 8001b54:	2303      	movs	r3, #3
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f7ff ff33 	bl	80019c4 <BSP_LCD_DisplayStringAt>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af02      	add	r7, sp, #8
 8001b70:	4604      	mov	r4, r0
 8001b72:	4608      	mov	r0, r1
 8001b74:	4611      	mov	r1, r2
 8001b76:	461a      	mov	r2, r3
 8001b78:	4623      	mov	r3, r4
 8001b7a:	80fb      	strh	r3, [r7, #6]
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	80bb      	strh	r3, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
 8001b84:	4613      	mov	r3, r2
 8001b86:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001b8c:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <BSP_LCD_FillRect+0xa8>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4920      	ldr	r1, [pc, #128]	; (8001c14 <BSP_LCD_FillRect+0xac>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fe42 	bl	8001828 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <BSP_LCD_FillRect+0xa8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a1b      	ldr	r2, [pc, #108]	; (8001c18 <BSP_LCD_FillRect+0xb0>)
 8001baa:	2134      	movs	r1, #52	; 0x34
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	335c      	adds	r3, #92	; 0x5c
 8001bb4:	681c      	ldr	r4, [r3, #0]
 8001bb6:	f7ff fdbb 	bl	8001730 <BSP_LCD_GetXSize>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	88bb      	ldrh	r3, [r7, #4]
 8001bbe:	fb03 f202 	mul.w	r2, r3, r2
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4423      	add	r3, r4
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <BSP_LCD_FillRect+0xa8>)
 8001bce:	681c      	ldr	r4, [r3, #0]
 8001bd0:	68fd      	ldr	r5, [r7, #12]
 8001bd2:	887e      	ldrh	r6, [r7, #2]
 8001bd4:	f8b7 8000 	ldrh.w	r8, [r7]
 8001bd8:	f7ff fdaa 	bl	8001730 <BSP_LCD_GetXSize>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	1ad1      	subs	r1, r2, r3
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <BSP_LCD_FillRect+0xa8>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	480b      	ldr	r0, [pc, #44]	; (8001c14 <BSP_LCD_FillRect+0xac>)
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4403      	add	r3, r0
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	9100      	str	r1, [sp, #0]
 8001bf8:	4643      	mov	r3, r8
 8001bfa:	4632      	mov	r2, r6
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f000 f9c2 	bl	8001f88 <FillBuffer>
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000318 	.word	0x20000318
 8001c14:	2000031c 	.word	0x2000031c
 8001c18:	2000040c 	.word	0x2000040c

08001c1c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08e      	sub	sp, #56	; 0x38
 8001c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
 8001c26:	4b61      	ldr	r3, [pc, #388]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	4a60      	ldr	r2, [pc, #384]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001c2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c30:	6453      	str	r3, [r2, #68]	; 0x44
 8001c32:	4b5e      	ldr	r3, [pc, #376]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c3a:	623b      	str	r3, [r7, #32]
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	4b5a      	ldr	r3, [pc, #360]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a59      	ldr	r2, [pc, #356]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001c48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b57      	ldr	r3, [pc, #348]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
 8001c5e:	4b53      	ldr	r3, [pc, #332]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a52      	ldr	r2, [pc, #328]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b50      	ldr	r3, [pc, #320]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	61bb      	str	r3, [r7, #24]
 8001c74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a4b      	ldr	r2, [pc, #300]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b49      	ldr	r3, [pc, #292]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	4b45      	ldr	r3, [pc, #276]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a44      	ldr	r2, [pc, #272]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b42      	ldr	r3, [pc, #264]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b3e      	ldr	r3, [pc, #248]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a3d      	ldr	r2, [pc, #244]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	4b37      	ldr	r3, [pc, #220]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a36      	ldr	r2, [pc, #216]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001cd4:	f043 0320 	orr.w	r3, r3, #32
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b34      	ldr	r3, [pc, #208]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	4b30      	ldr	r3, [pc, #192]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a2f      	ldr	r2, [pc, #188]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <BSP_LCD_MspInit+0x190>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001d02:	f641 0358 	movw	r3, #6232	; 0x1858
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001d10:	2302      	movs	r3, #2
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001d14:	230e      	movs	r3, #14
 8001d16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4824      	ldr	r0, [pc, #144]	; (8001db0 <BSP_LCD_MspInit+0x194>)
 8001d20:	f001 f922 	bl	8002f68 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001d24:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4820      	ldr	r0, [pc, #128]	; (8001db4 <BSP_LCD_MspInit+0x198>)
 8001d32:	f001 f919 	bl	8002f68 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001d36:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d40:	4619      	mov	r1, r3
 8001d42:	481d      	ldr	r0, [pc, #116]	; (8001db8 <BSP_LCD_MspInit+0x19c>)
 8001d44:	f001 f910 	bl	8002f68 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001d48:	2348      	movs	r3, #72	; 0x48
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	481a      	ldr	r0, [pc, #104]	; (8001dbc <BSP_LCD_MspInit+0x1a0>)
 8001d54:	f001 f908 	bl	8002f68 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d62:	4619      	mov	r1, r3
 8001d64:	4816      	ldr	r0, [pc, #88]	; (8001dc0 <BSP_LCD_MspInit+0x1a4>)
 8001d66:	f001 f8ff 	bl	8002f68 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001d6a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d74:	4619      	mov	r1, r3
 8001d76:	4813      	ldr	r0, [pc, #76]	; (8001dc4 <BSP_LCD_MspInit+0x1a8>)
 8001d78:	f001 f8f6 	bl	8002f68 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001d80:	2309      	movs	r3, #9
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480a      	ldr	r0, [pc, #40]	; (8001db4 <BSP_LCD_MspInit+0x198>)
 8001d8c:	f001 f8ec 	bl	8002f68 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001d90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <BSP_LCD_MspInit+0x1a8>)
 8001d9e:	f001 f8e3 	bl	8002f68 <HAL_GPIO_Init>
}
 8001da2:	bf00      	nop
 8001da4:	3738      	adds	r7, #56	; 0x38
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020000 	.word	0x40020000
 8001db4:	40020400 	.word	0x40020400
 8001db8:	40020800 	.word	0x40020800
 8001dbc:	40020c00 	.word	0x40020c00
 8001dc0:	40021400 	.word	0x40021400
 8001dc4:	40021800 	.word	0x40021800

08001dc8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001dc8:	b5b0      	push	{r4, r5, r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	603a      	str	r2, [r7, #0]
 8001dd2:	80fb      	strh	r3, [r7, #6]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <BSP_LCD_DrawPixel+0x44>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0c      	ldr	r2, [pc, #48]	; (8001e10 <BSP_LCD_DrawPixel+0x48>)
 8001dde:	2134      	movs	r1, #52	; 0x34
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	335c      	adds	r3, #92	; 0x5c
 8001de8:	681c      	ldr	r4, [r3, #0]
 8001dea:	88bd      	ldrh	r5, [r7, #4]
 8001dec:	f7ff fca0 	bl	8001730 <BSP_LCD_GetXSize>
 8001df0:	4603      	mov	r3, r0
 8001df2:	fb03 f205 	mul.w	r2, r3, r5
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4423      	add	r3, r4
 8001dfe:	461a      	mov	r2, r3
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0c:	20000318 	.word	0x20000318
 8001e10:	2000040c 	.word	0x2000040c

08001e14 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	603a      	str	r2, [r7, #0]
 8001e1e:	80fb      	strh	r3, [r7, #6]
 8001e20:	460b      	mov	r3, r1
 8001e22:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8001e30:	4b53      	ldr	r3, [pc, #332]	; (8001f80 <DrawChar+0x16c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4953      	ldr	r1, [pc, #332]	; (8001f84 <DrawChar+0x170>)
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	3308      	adds	r3, #8
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	88db      	ldrh	r3, [r3, #6]
 8001e46:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001e48:	4b4d      	ldr	r3, [pc, #308]	; (8001f80 <DrawChar+0x16c>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	494d      	ldr	r1, [pc, #308]	; (8001f84 <DrawChar+0x170>)
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	3308      	adds	r3, #8
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	889b      	ldrh	r3, [r3, #4]
 8001e5e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8001e60:	8a3b      	ldrh	r3, [r7, #16]
 8001e62:	3307      	adds	r3, #7
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	da00      	bge.n	8001e6a <DrawChar+0x56>
 8001e68:	3307      	adds	r3, #7
 8001e6a:	10db      	asrs	r3, r3, #3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	8a3b      	ldrh	r3, [r7, #16]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	e076      	b.n	8001f6e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001e80:	8a3b      	ldrh	r3, [r7, #16]
 8001e82:	3307      	adds	r3, #7
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	da00      	bge.n	8001e8a <DrawChar+0x76>
 8001e88:	3307      	adds	r3, #7
 8001e8a:	10db      	asrs	r3, r3, #3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fb03 f302 	mul.w	r3, r3, r2
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001e9a:	8a3b      	ldrh	r3, [r7, #16]
 8001e9c:	3307      	adds	r3, #7
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	da00      	bge.n	8001ea4 <DrawChar+0x90>
 8001ea2:	3307      	adds	r3, #7
 8001ea4:	10db      	asrs	r3, r3, #3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d002      	beq.n	8001eb0 <DrawChar+0x9c>
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d004      	beq.n	8001eb8 <DrawChar+0xa4>
 8001eae:	e00c      	b.n	8001eca <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	617b      	str	r3, [r7, #20]
      break;
 8001eb6:	e016      	b.n	8001ee6 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	3201      	adds	r2, #1
 8001ec2:	7812      	ldrb	r2, [r2, #0]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]
      break;
 8001ec8:	e00d      	b.n	8001ee6 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	041a      	lsls	r2, r3, #16
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	3202      	adds	r2, #2
 8001ede:	7812      	ldrb	r2, [r2, #0]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]
      break;
 8001ee4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	e036      	b.n	8001f5a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001eec:	8a3a      	ldrh	r2, [r7, #16]
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	1ad2      	subs	r2, r2, r3
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	2201      	movs	r2, #1
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d012      	beq.n	8001f2e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	4413      	add	r3, r2
 8001f10:	b298      	uxth	r0, r3
 8001f12:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <DrawChar+0x16c>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	491b      	ldr	r1, [pc, #108]	; (8001f84 <DrawChar+0x170>)
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	88bb      	ldrh	r3, [r7, #4]
 8001f26:	4619      	mov	r1, r3
 8001f28:	f7ff ff4e 	bl	8001dc8 <BSP_LCD_DrawPixel>
 8001f2c:	e012      	b.n	8001f54 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	4413      	add	r3, r2
 8001f36:	b298      	uxth	r0, r3
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <DrawChar+0x16c>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4911      	ldr	r1, [pc, #68]	; (8001f84 <DrawChar+0x170>)
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	3304      	adds	r3, #4
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	88bb      	ldrh	r3, [r7, #4]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f7ff ff3a 	bl	8001dc8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	3301      	adds	r3, #1
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	8a3b      	ldrh	r3, [r7, #16]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d3c4      	bcc.n	8001eec <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8001f62:	88bb      	ldrh	r3, [r7, #4]
 8001f64:	3301      	adds	r3, #1
 8001f66:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	8a7b      	ldrh	r3, [r7, #18]
 8001f70:	69fa      	ldr	r2, [r7, #28]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d384      	bcc.n	8001e80 <DrawChar+0x6c>
  }
}
 8001f76:	bf00      	nop
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000318 	.word	0x20000318
 8001f84:	2000031c 	.word	0x2000031c

08001f88 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8001f96:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <FillBuffer+0x68>)
 8001f98:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f9c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <FillBuffer+0x68>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8001fa4:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <FillBuffer+0x68>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <FillBuffer+0x68>)
 8001fac:	4a11      	ldr	r2, [pc, #68]	; (8001ff4 <FillBuffer+0x6c>)
 8001fae:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001fb0:	480f      	ldr	r0, [pc, #60]	; (8001ff0 <FillBuffer+0x68>)
 8001fb2:	f000 fd4d 	bl	8002a50 <HAL_DMA2D_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d115      	bne.n	8001fe8 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8001fbc:	68f9      	ldr	r1, [r7, #12]
 8001fbe:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <FillBuffer+0x68>)
 8001fc0:	f000 fea4 	bl	8002d0c <HAL_DMA2D_ConfigLayer>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10e      	bne.n	8001fe8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69f9      	ldr	r1, [r7, #28]
 8001fd4:	4806      	ldr	r0, [pc, #24]	; (8001ff0 <FillBuffer+0x68>)
 8001fd6:	f000 fd84 	bl	8002ae2 <HAL_DMA2D_Start>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d103      	bne.n	8001fe8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001fe0:	210a      	movs	r1, #10
 8001fe2:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <FillBuffer+0x68>)
 8001fe4:	f000 fda8 	bl	8002b38 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	200002a8 	.word	0x200002a8
 8001ff4:	4002b000 	.word	0x4002b000

08001ff8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001ffc:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <BSP_SDRAM_Init+0xac>)
 8001ffe:	4a2a      	ldr	r2, [pc, #168]	; (80020a8 <BSP_SDRAM_Init+0xb0>)
 8002000:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002002:	4b2a      	ldr	r3, [pc, #168]	; (80020ac <BSP_SDRAM_Init+0xb4>)
 8002004:	2202      	movs	r2, #2
 8002006:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002008:	4b28      	ldr	r3, [pc, #160]	; (80020ac <BSP_SDRAM_Init+0xb4>)
 800200a:	2207      	movs	r2, #7
 800200c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800200e:	4b27      	ldr	r3, [pc, #156]	; (80020ac <BSP_SDRAM_Init+0xb4>)
 8002010:	2204      	movs	r2, #4
 8002012:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <BSP_SDRAM_Init+0xb4>)
 8002016:	2207      	movs	r2, #7
 8002018:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <BSP_SDRAM_Init+0xb4>)
 800201c:	2202      	movs	r2, #2
 800201e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002020:	4b22      	ldr	r3, [pc, #136]	; (80020ac <BSP_SDRAM_Init+0xb4>)
 8002022:	2202      	movs	r2, #2
 8002024:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002026:	4b21      	ldr	r3, [pc, #132]	; (80020ac <BSP_SDRAM_Init+0xb4>)
 8002028:	2202      	movs	r2, #2
 800202a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <BSP_SDRAM_Init+0xac>)
 800202e:	2201      	movs	r2, #1
 8002030:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <BSP_SDRAM_Init+0xac>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <BSP_SDRAM_Init+0xac>)
 800203a:	2204      	movs	r2, #4
 800203c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <BSP_SDRAM_Init+0xac>)
 8002040:	2210      	movs	r2, #16
 8002042:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <BSP_SDRAM_Init+0xac>)
 8002046:	2240      	movs	r2, #64	; 0x40
 8002048:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <BSP_SDRAM_Init+0xac>)
 800204c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002050:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <BSP_SDRAM_Init+0xac>)
 8002054:	2200      	movs	r2, #0
 8002056:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <BSP_SDRAM_Init+0xac>)
 800205a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800205e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002060:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <BSP_SDRAM_Init+0xac>)
 8002062:	2200      	movs	r2, #0
 8002064:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002066:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <BSP_SDRAM_Init+0xac>)
 8002068:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800206c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800206e:	2100      	movs	r1, #0
 8002070:	480c      	ldr	r0, [pc, #48]	; (80020a4 <BSP_SDRAM_Init+0xac>)
 8002072:	f000 f87f 	bl	8002174 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002076:	490d      	ldr	r1, [pc, #52]	; (80020ac <BSP_SDRAM_Init+0xb4>)
 8002078:	480a      	ldr	r0, [pc, #40]	; (80020a4 <BSP_SDRAM_Init+0xac>)
 800207a:	f002 fcdf 	bl	8004a3c <HAL_SDRAM_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <BSP_SDRAM_Init+0xb8>)
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	e002      	b.n	8002092 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <BSP_SDRAM_Init+0xb8>)
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002092:	f240 506a 	movw	r0, #1386	; 0x56a
 8002096:	f000 f80d 	bl	80020b4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800209a:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <BSP_SDRAM_Init+0xb8>)
 800209c:	781b      	ldrb	r3, [r3, #0]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000334 	.word	0x20000334
 80020a8:	a0000140 	.word	0xa0000140
 80020ac:	20000368 	.word	0x20000368
 80020b0:	20000044 	.word	0x20000044

080020b4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80020c0:	4b2a      	ldr	r3, [pc, #168]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80020c6:	4b29      	ldr	r3, [pc, #164]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020c8:	2208      	movs	r2, #8
 80020ca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80020cc:	4b27      	ldr	r3, [pc, #156]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80020d2:	4b26      	ldr	r3, [pc, #152]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80020d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020dc:	4923      	ldr	r1, [pc, #140]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020de:	4824      	ldr	r0, [pc, #144]	; (8002170 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80020e0:	f002 fce0 	bl	8004aa4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80020e4:	2001      	movs	r0, #1
 80020e6:	f000 f9c3 	bl	8002470 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80020ea:	4b20      	ldr	r3, [pc, #128]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020ec:	2202      	movs	r2, #2
 80020ee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80020f0:	4b1e      	ldr	r3, [pc, #120]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020f2:	2208      	movs	r2, #8
 80020f4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80020f6:	4b1d      	ldr	r3, [pc, #116]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002106:	4919      	ldr	r1, [pc, #100]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002108:	4819      	ldr	r0, [pc, #100]	; (8002170 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800210a:	f002 fccb 	bl	8004aa4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800210e:	4b17      	ldr	r3, [pc, #92]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002110:	2203      	movs	r2, #3
 8002112:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002116:	2208      	movs	r2, #8
 8002118:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800211a:	4b14      	ldr	r3, [pc, #80]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800211c:	2204      	movs	r2, #4
 800211e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800212a:	4910      	ldr	r1, [pc, #64]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800212c:	4810      	ldr	r0, [pc, #64]	; (8002170 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800212e:	f002 fcb9 	bl	8004aa4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002132:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002136:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800213a:	2204      	movs	r2, #4
 800213c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002140:	2208      	movs	r2, #8
 8002142:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002146:	2201      	movs	r2, #1
 8002148:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4a07      	ldr	r2, [pc, #28]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800214e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002154:	4905      	ldr	r1, [pc, #20]	; (800216c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002156:	4806      	ldr	r0, [pc, #24]	; (8002170 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002158:	f002 fca4 	bl	8004aa4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4804      	ldr	r0, [pc, #16]	; (8002170 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002160:	f002 fccb 	bl	8004afa <HAL_SDRAM_ProgramRefreshRate>
}
 8002164:	bf00      	nop
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000384 	.word	0x20000384
 8002170:	20000334 	.word	0x20000334

08002174 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b090      	sub	sp, #64	; 0x40
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80ec 	beq.w	800235e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	62bb      	str	r3, [r7, #40]	; 0x28
 800218a:	4b77      	ldr	r3, [pc, #476]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 800218c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218e:	4a76      	ldr	r2, [pc, #472]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6393      	str	r3, [r2, #56]	; 0x38
 8002196:	4b74      	ldr	r3, [pc, #464]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 8002198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
 80021a0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
 80021a6:	4b70      	ldr	r3, [pc, #448]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a6f      	ldr	r2, [pc, #444]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 80021ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b6d      	ldr	r3, [pc, #436]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
 80021c2:	4b69      	ldr	r3, [pc, #420]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a68      	ldr	r2, [pc, #416]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b66      	ldr	r3, [pc, #408]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	623b      	str	r3, [r7, #32]
 80021d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	4b62      	ldr	r3, [pc, #392]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a61      	ldr	r2, [pc, #388]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 80021e4:	f043 0304 	orr.w	r3, r3, #4
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b5f      	ldr	r3, [pc, #380]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	61fb      	str	r3, [r7, #28]
 80021f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	4b5b      	ldr	r3, [pc, #364]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a5a      	ldr	r2, [pc, #360]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 8002200:	f043 0308 	orr.w	r3, r3, #8
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b58      	ldr	r3, [pc, #352]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	4b54      	ldr	r3, [pc, #336]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a53      	ldr	r2, [pc, #332]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 800221c:	f043 0310 	orr.w	r3, r3, #16
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b51      	ldr	r3, [pc, #324]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	4b4d      	ldr	r3, [pc, #308]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a4c      	ldr	r2, [pc, #304]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 8002238:	f043 0320 	orr.w	r3, r3, #32
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b4a      	ldr	r3, [pc, #296]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b46      	ldr	r3, [pc, #280]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a45      	ldr	r2, [pc, #276]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 8002254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b43      	ldr	r3, [pc, #268]	; (8002368 <BSP_SDRAM_MspInit+0x1f4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800226a:	2302      	movs	r3, #2
 800226c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002272:	230c      	movs	r3, #12
 8002274:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002276:	2360      	movs	r3, #96	; 0x60
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800227a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800227e:	4619      	mov	r1, r3
 8002280:	483a      	ldr	r0, [pc, #232]	; (800236c <BSP_SDRAM_MspInit+0x1f8>)
 8002282:	f000 fe71 	bl	8002f68 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002286:	2301      	movs	r3, #1
 8002288:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800228a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800228e:	4619      	mov	r1, r3
 8002290:	4837      	ldr	r0, [pc, #220]	; (8002370 <BSP_SDRAM_MspInit+0x1fc>)
 8002292:	f000 fe69 	bl	8002f68 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002296:	f24c 7303 	movw	r3, #50947	; 0xc703
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800229c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022a0:	4619      	mov	r1, r3
 80022a2:	4834      	ldr	r0, [pc, #208]	; (8002374 <BSP_SDRAM_MspInit+0x200>)
 80022a4:	f000 fe60 	bl	8002f68 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80022a8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80022ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022b2:	4619      	mov	r1, r3
 80022b4:	4830      	ldr	r0, [pc, #192]	; (8002378 <BSP_SDRAM_MspInit+0x204>)
 80022b6:	f000 fe57 	bl	8002f68 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80022ba:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80022c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022c4:	4619      	mov	r1, r3
 80022c6:	482d      	ldr	r0, [pc, #180]	; (800237c <BSP_SDRAM_MspInit+0x208>)
 80022c8:	f000 fe4e 	bl	8002f68 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80022cc:	f248 1333 	movw	r3, #33075	; 0x8133
 80022d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80022d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022d6:	4619      	mov	r1, r3
 80022d8:	4829      	ldr	r0, [pc, #164]	; (8002380 <BSP_SDRAM_MspInit+0x20c>)
 80022da:	f000 fe45 	bl	8002f68 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80022de:	4b29      	ldr	r3, [pc, #164]	; (8002384 <BSP_SDRAM_MspInit+0x210>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80022e4:	4b27      	ldr	r3, [pc, #156]	; (8002384 <BSP_SDRAM_MspInit+0x210>)
 80022e6:	2280      	movs	r2, #128	; 0x80
 80022e8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <BSP_SDRAM_MspInit+0x210>)
 80022ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022f0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80022f2:	4b24      	ldr	r3, [pc, #144]	; (8002384 <BSP_SDRAM_MspInit+0x210>)
 80022f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022f8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <BSP_SDRAM_MspInit+0x210>)
 80022fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002300:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002302:	4b20      	ldr	r3, [pc, #128]	; (8002384 <BSP_SDRAM_MspInit+0x210>)
 8002304:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002308:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <BSP_SDRAM_MspInit+0x210>)
 800230c:	2200      	movs	r2, #0
 800230e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002310:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <BSP_SDRAM_MspInit+0x210>)
 8002312:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002316:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002318:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <BSP_SDRAM_MspInit+0x210>)
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800231e:	4b19      	ldr	r3, [pc, #100]	; (8002384 <BSP_SDRAM_MspInit+0x210>)
 8002320:	2203      	movs	r2, #3
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002324:	4b17      	ldr	r3, [pc, #92]	; (8002384 <BSP_SDRAM_MspInit+0x210>)
 8002326:	2200      	movs	r2, #0
 8002328:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800232a:	4b16      	ldr	r3, [pc, #88]	; (8002384 <BSP_SDRAM_MspInit+0x210>)
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002330:	4b14      	ldr	r3, [pc, #80]	; (8002384 <BSP_SDRAM_MspInit+0x210>)
 8002332:	4a15      	ldr	r2, [pc, #84]	; (8002388 <BSP_SDRAM_MspInit+0x214>)
 8002334:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a12      	ldr	r2, [pc, #72]	; (8002384 <BSP_SDRAM_MspInit+0x210>)
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
 800233c:	4a11      	ldr	r2, [pc, #68]	; (8002384 <BSP_SDRAM_MspInit+0x210>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002342:	4810      	ldr	r0, [pc, #64]	; (8002384 <BSP_SDRAM_MspInit+0x210>)
 8002344:	f000 fa76 	bl	8002834 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002348:	480e      	ldr	r0, [pc, #56]	; (8002384 <BSP_SDRAM_MspInit+0x210>)
 800234a:	f000 f9c5 	bl	80026d8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	210f      	movs	r1, #15
 8002352:	2038      	movs	r0, #56	; 0x38
 8002354:	f000 f989 	bl	800266a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002358:	2038      	movs	r0, #56	; 0x38
 800235a:	f000 f9a2 	bl	80026a2 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800235e:	bf00      	nop
 8002360:	3740      	adds	r7, #64	; 0x40
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	40020400 	.word	0x40020400
 8002370:	40020800 	.word	0x40020800
 8002374:	40020c00 	.word	0x40020c00
 8002378:	40021000 	.word	0x40021000
 800237c:	40021400 	.word	0x40021400
 8002380:	40021800 	.word	0x40021800
 8002384:	20000394 	.word	0x20000394
 8002388:	40026410 	.word	0x40026410

0800238c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002390:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <HAL_Init+0x40>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0d      	ldr	r2, [pc, #52]	; (80023cc <HAL_Init+0x40>)
 8002396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800239a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_Init+0x40>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <HAL_Init+0x40>)
 80023a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_Init+0x40>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a07      	ldr	r2, [pc, #28]	; (80023cc <HAL_Init+0x40>)
 80023ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b4:	2003      	movs	r0, #3
 80023b6:	f000 f94d 	bl	8002654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ba:	2000      	movs	r0, #0
 80023bc:	f000 f808 	bl	80023d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c0:	f003 ffea 	bl	8006398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023c00 	.word	0x40023c00

080023d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_InitTick+0x54>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <HAL_InitTick+0x58>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	4619      	mov	r1, r3
 80023e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f965 	bl	80026be <HAL_SYSTICK_Config>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00e      	b.n	800241c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b0f      	cmp	r3, #15
 8002402:	d80a      	bhi.n	800241a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002404:	2200      	movs	r2, #0
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f000 f92d 	bl	800266a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002410:	4a06      	ldr	r2, [pc, #24]	; (800242c <HAL_InitTick+0x5c>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	e000      	b.n	800241c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	2000005c 	.word	0x2000005c
 8002428:	2000004c 	.word	0x2000004c
 800242c:	20000048 	.word	0x20000048

08002430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_IncTick+0x20>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_IncTick+0x24>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4413      	add	r3, r2
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <HAL_IncTick+0x24>)
 8002442:	6013      	str	r3, [r2, #0]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	2000004c 	.word	0x2000004c
 8002454:	200004b8 	.word	0x200004b8

08002458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return uwTick;
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_GetTick+0x14>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	200004b8 	.word	0x200004b8

08002470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff ffee 	bl	8002458 <HAL_GetTick>
 800247c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002488:	d005      	beq.n	8002496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_Delay+0x40>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4413      	add	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002496:	bf00      	nop
 8002498:	f7ff ffde 	bl	8002458 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d8f7      	bhi.n	8002498 <HAL_Delay+0x28>
  {
  }
}
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	2000004c 	.word	0x2000004c

080024b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d0:	4013      	ands	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024e6:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <__NVIC_SetPriorityGrouping+0x44>)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	60d3      	str	r3, [r2, #12]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002500:	4b04      	ldr	r3, [pc, #16]	; (8002514 <__NVIC_GetPriorityGrouping+0x18>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	f003 0307 	and.w	r3, r3, #7
}
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	2b00      	cmp	r3, #0
 8002528:	db0b      	blt.n	8002542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	f003 021f 	and.w	r2, r3, #31
 8002530:	4907      	ldr	r1, [pc, #28]	; (8002550 <__NVIC_EnableIRQ+0x38>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	2001      	movs	r0, #1
 800253a:	fa00 f202 	lsl.w	r2, r0, r2
 800253e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000e100 	.word	0xe000e100

08002554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	6039      	str	r1, [r7, #0]
 800255e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002564:	2b00      	cmp	r3, #0
 8002566:	db0a      	blt.n	800257e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	490c      	ldr	r1, [pc, #48]	; (80025a0 <__NVIC_SetPriority+0x4c>)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	0112      	lsls	r2, r2, #4
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	440b      	add	r3, r1
 8002578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800257c:	e00a      	b.n	8002594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4908      	ldr	r1, [pc, #32]	; (80025a4 <__NVIC_SetPriority+0x50>)
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	3b04      	subs	r3, #4
 800258c:	0112      	lsls	r2, r2, #4
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	440b      	add	r3, r1
 8002592:	761a      	strb	r2, [r3, #24]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000e100 	.word	0xe000e100
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b089      	sub	sp, #36	; 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f1c3 0307 	rsb	r3, r3, #7
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	bf28      	it	cs
 80025c6:	2304      	movcs	r3, #4
 80025c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3304      	adds	r3, #4
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d902      	bls.n	80025d8 <NVIC_EncodePriority+0x30>
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3b03      	subs	r3, #3
 80025d6:	e000      	b.n	80025da <NVIC_EncodePriority+0x32>
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	f04f 32ff 	mov.w	r2, #4294967295
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43da      	mvns	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	401a      	ands	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f0:	f04f 31ff 	mov.w	r1, #4294967295
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	43d9      	mvns	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	4313      	orrs	r3, r2
         );
}
 8002602:	4618      	mov	r0, r3
 8002604:	3724      	adds	r7, #36	; 0x24
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3b01      	subs	r3, #1
 800261c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002620:	d301      	bcc.n	8002626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002622:	2301      	movs	r3, #1
 8002624:	e00f      	b.n	8002646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002626:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <SysTick_Config+0x40>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3b01      	subs	r3, #1
 800262c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800262e:	210f      	movs	r1, #15
 8002630:	f04f 30ff 	mov.w	r0, #4294967295
 8002634:	f7ff ff8e 	bl	8002554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <SysTick_Config+0x40>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800263e:	4b04      	ldr	r3, [pc, #16]	; (8002650 <SysTick_Config+0x40>)
 8002640:	2207      	movs	r2, #7
 8002642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	e000e010 	.word	0xe000e010

08002654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff ff29 	bl	80024b4 <__NVIC_SetPriorityGrouping>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800266a:	b580      	push	{r7, lr}
 800266c:	b086      	sub	sp, #24
 800266e:	af00      	add	r7, sp, #0
 8002670:	4603      	mov	r3, r0
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800267c:	f7ff ff3e 	bl	80024fc <__NVIC_GetPriorityGrouping>
 8002680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	6978      	ldr	r0, [r7, #20]
 8002688:	f7ff ff8e 	bl	80025a8 <NVIC_EncodePriority>
 800268c:	4602      	mov	r2, r0
 800268e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff5d 	bl	8002554 <__NVIC_SetPriority>
}
 800269a:	bf00      	nop
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	4603      	mov	r3, r0
 80026aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff31 	bl	8002518 <__NVIC_EnableIRQ>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ffa2 	bl	8002610 <SysTick_Config>
 80026cc:	4603      	mov	r3, r0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff feb8 	bl	8002458 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e099      	b.n	8002828 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002714:	e00f      	b.n	8002736 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002716:	f7ff fe9f 	bl	8002458 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b05      	cmp	r3, #5
 8002722:	d908      	bls.n	8002736 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2220      	movs	r2, #32
 8002728:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2203      	movs	r2, #3
 800272e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e078      	b.n	8002828 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e8      	bne.n	8002716 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4b38      	ldr	r3, [pc, #224]	; (8002830 <HAL_DMA_Init+0x158>)
 8002750:	4013      	ands	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002762:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	2b04      	cmp	r3, #4
 800278e:	d107      	bne.n	80027a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	4313      	orrs	r3, r2
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f023 0307 	bic.w	r3, r3, #7
 80027b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d117      	bne.n	80027fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00e      	beq.n	80027fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f8bd 	bl	800295c <DMA_CheckFifoParam>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2240      	movs	r2, #64	; 0x40
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027f6:	2301      	movs	r3, #1
 80027f8:	e016      	b.n	8002828 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f874 	bl	80028f0 <DMA_CalcBaseAndBitshift>
 8002808:	4603      	mov	r3, r0
 800280a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002810:	223f      	movs	r2, #63	; 0x3f
 8002812:	409a      	lsls	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	f010803f 	.word	0xf010803f

08002834 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e050      	b.n	80028e8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d101      	bne.n	8002856 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002852:	2302      	movs	r3, #2
 8002854:	e048      	b.n	80028e8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0201 	bic.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2200      	movs	r2, #0
 8002874:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2200      	movs	r2, #0
 8002884:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2221      	movs	r2, #33	; 0x21
 8002894:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f82a 	bl	80028f0 <DMA_CalcBaseAndBitshift>
 800289c:	4603      	mov	r3, r0
 800289e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c8:	223f      	movs	r2, #63	; 0x3f
 80028ca:	409a      	lsls	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	3b10      	subs	r3, #16
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <DMA_CalcBaseAndBitshift+0x64>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800290a:	4a13      	ldr	r2, [pc, #76]	; (8002958 <DMA_CalcBaseAndBitshift+0x68>)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4413      	add	r3, r2
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2b03      	cmp	r3, #3
 800291c:	d909      	bls.n	8002932 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002926:	f023 0303 	bic.w	r3, r3, #3
 800292a:	1d1a      	adds	r2, r3, #4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	659a      	str	r2, [r3, #88]	; 0x58
 8002930:	e007      	b.n	8002942 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800293a:	f023 0303 	bic.w	r3, r3, #3
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	aaaaaaab 	.word	0xaaaaaaab
 8002958:	0800c05c 	.word	0x0800c05c

0800295c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d11f      	bne.n	80029b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d855      	bhi.n	8002a28 <DMA_CheckFifoParam+0xcc>
 800297c:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <DMA_CheckFifoParam+0x28>)
 800297e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002982:	bf00      	nop
 8002984:	08002995 	.word	0x08002995
 8002988:	080029a7 	.word	0x080029a7
 800298c:	08002995 	.word	0x08002995
 8002990:	08002a29 	.word	0x08002a29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d045      	beq.n	8002a2c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a4:	e042      	b.n	8002a2c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029ae:	d13f      	bne.n	8002a30 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b4:	e03c      	b.n	8002a30 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029be:	d121      	bne.n	8002a04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d836      	bhi.n	8002a34 <DMA_CheckFifoParam+0xd8>
 80029c6:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <DMA_CheckFifoParam+0x70>)
 80029c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029cc:	080029dd 	.word	0x080029dd
 80029d0:	080029e3 	.word	0x080029e3
 80029d4:	080029dd 	.word	0x080029dd
 80029d8:	080029f5 	.word	0x080029f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
      break;
 80029e0:	e02f      	b.n	8002a42 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d024      	beq.n	8002a38 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f2:	e021      	b.n	8002a38 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029fc:	d11e      	bne.n	8002a3c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a02:	e01b      	b.n	8002a3c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d902      	bls.n	8002a10 <DMA_CheckFifoParam+0xb4>
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d003      	beq.n	8002a16 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a0e:	e018      	b.n	8002a42 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      break;
 8002a14:	e015      	b.n	8002a42 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00e      	beq.n	8002a40 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
      break;
 8002a26:	e00b      	b.n	8002a40 <DMA_CheckFifoParam+0xe4>
      break;
 8002a28:	bf00      	nop
 8002a2a:	e00a      	b.n	8002a42 <DMA_CheckFifoParam+0xe6>
      break;
 8002a2c:	bf00      	nop
 8002a2e:	e008      	b.n	8002a42 <DMA_CheckFifoParam+0xe6>
      break;
 8002a30:	bf00      	nop
 8002a32:	e006      	b.n	8002a42 <DMA_CheckFifoParam+0xe6>
      break;
 8002a34:	bf00      	nop
 8002a36:	e004      	b.n	8002a42 <DMA_CheckFifoParam+0xe6>
      break;
 8002a38:	bf00      	nop
 8002a3a:	e002      	b.n	8002a42 <DMA_CheckFifoParam+0xe6>
      break;   
 8002a3c:	bf00      	nop
 8002a3e:	e000      	b.n	8002a42 <DMA_CheckFifoParam+0xe6>
      break;
 8002a40:	bf00      	nop
    }
  } 
  
  return status; 
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e03b      	b.n	8002ada <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d106      	bne.n	8002a7c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f003 fcb6 	bl	80063e8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa0:	f023 0107 	bic.w	r1, r3, #7
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002aba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68d1      	ldr	r1, [r2, #12]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af02      	add	r7, sp, #8
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_DMA2D_Start+0x1c>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e018      	b.n	8002b30 <HAL_DMA2D_Start+0x4e>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f989 	bl	8002e30 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0201 	orr.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d056      	beq.n	8002c02 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002b54:	f7ff fc80 	bl	8002458 <HAL_GetTick>
 8002b58:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002b5a:	e04b      	b.n	8002bf4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d023      	beq.n	8002bb6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f003 0320 	and.w	r3, r3, #32
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	f043 0202 	orr.w	r2, r3, #2
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b92:	f043 0201 	orr.w	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2221      	movs	r2, #33	; 0x21
 8002ba0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e0a5      	b.n	8002d02 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d01a      	beq.n	8002bf4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002bbe:	f7ff fc4b 	bl	8002458 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <HAL_DMA2D_PollForTransfer+0x9c>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10f      	bne.n	8002bf4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd8:	f043 0220 	orr.w	r2, r3, #32
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2203      	movs	r2, #3
 8002be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e086      	b.n	8002d02 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0ac      	beq.n	8002b5c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d061      	beq.n	8002ce8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c24:	f7ff fc18 	bl	8002458 <HAL_GetTick>
 8002c28:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002c2a:	e056      	b.n	8002cda <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d02e      	beq.n	8002c9c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4c:	f043 0204 	orr.w	r2, r3, #4
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	f043 0202 	orr.w	r2, r3, #2
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2229      	movs	r2, #41	; 0x29
 8002c86:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e032      	b.n	8002d02 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca2:	d01a      	beq.n	8002cda <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002ca4:	f7ff fbd8 	bl	8002458 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d302      	bcc.n	8002cba <HAL_DMA2D_PollForTransfer+0x182>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10f      	bne.n	8002cda <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	f043 0220 	orr.w	r2, r3, #32
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2203      	movs	r2, #3
 8002cca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e013      	b.n	8002d02 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0a1      	beq.n	8002c2c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2212      	movs	r2, #18
 8002cee:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_DMA2D_ConfigLayer+0x20>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e079      	b.n	8002e20 <HAL_DMA2D_ConfigLayer+0x114>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	3318      	adds	r3, #24
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	041b      	lsls	r3, r3, #16
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002d56:	4b35      	ldr	r3, [pc, #212]	; (8002e2c <HAL_DMA2D_ConfigLayer+0x120>)
 8002d58:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b0a      	cmp	r3, #10
 8002d60:	d003      	beq.n	8002d6a <HAL_DMA2D_ConfigLayer+0x5e>
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b09      	cmp	r3, #9
 8002d68:	d107      	bne.n	8002d7a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e005      	b.n	8002d86 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	061b      	lsls	r3, r3, #24
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d120      	bne.n	8002dce <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	ea02 0103 	and.w	r1, r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b0a      	cmp	r3, #10
 8002db4:	d003      	beq.n	8002dbe <HAL_DMA2D_ConfigLayer+0xb2>
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b09      	cmp	r3, #9
 8002dbc:	d127      	bne.n	8002e0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28
 8002dcc:	e01f      	b.n	8002e0e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69da      	ldr	r2, [r3, #28]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	ea02 0103 	and.w	r1, r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b0a      	cmp	r3, #10
 8002df6:	d003      	beq.n	8002e00 <HAL_DMA2D_ConfigLayer+0xf4>
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b09      	cmp	r3, #9
 8002dfe:	d106      	bne.n	8002e0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002e0c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	ff03000f 	.word	0xff03000f

08002e30 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b08b      	sub	sp, #44	; 0x2c
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e44:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	041a      	lsls	r2, r3, #16
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e68:	d174      	bne.n	8002f54 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002e70:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e78:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002e80:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d108      	bne.n	8002ea2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	431a      	orrs	r2, r3
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea0:	e053      	b.n	8002f4a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d106      	bne.n	8002eb8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb6:	e048      	b.n	8002f4a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d111      	bne.n	8002ee4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	0cdb      	lsrs	r3, r3, #19
 8002ec4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	0a9b      	lsrs	r3, r3, #10
 8002eca:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	08db      	lsrs	r3, r3, #3
 8002ed0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	02db      	lsls	r3, r3, #11
 8002eda:	4313      	orrs	r3, r2
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee2:	e032      	b.n	8002f4a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d117      	bne.n	8002f1c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	0fdb      	lsrs	r3, r3, #31
 8002ef0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	0cdb      	lsrs	r3, r3, #19
 8002ef6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	0adb      	lsrs	r3, r3, #11
 8002efc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	08db      	lsrs	r3, r3, #3
 8002f02:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	029b      	lsls	r3, r3, #10
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	03db      	lsls	r3, r3, #15
 8002f12:	4313      	orrs	r3, r2
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1a:	e016      	b.n	8002f4a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	0f1b      	lsrs	r3, r3, #28
 8002f20:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	0d1b      	lsrs	r3, r3, #20
 8002f26:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	0b1b      	lsrs	r3, r3, #12
 8002f2c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	011a      	lsls	r2, r3, #4
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	031b      	lsls	r3, r3, #12
 8002f42:	4313      	orrs	r3, r2
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f50:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002f52:	e003      	b.n	8002f5c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	60da      	str	r2, [r3, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	372c      	adds	r7, #44	; 0x2c
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	; 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	e177      	b.n	8003274 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f84:	2201      	movs	r2, #1
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	f040 8166 	bne.w	800326e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d003      	beq.n	8002fb2 <HAL_GPIO_Init+0x4a>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b12      	cmp	r3, #18
 8002fb0:	d123      	bne.n	8002ffa <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	08da      	lsrs	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3208      	adds	r2, #8
 8002fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	220f      	movs	r2, #15
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	08da      	lsrs	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3208      	adds	r2, #8
 8002ff4:	69b9      	ldr	r1, [r7, #24]
 8002ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	2203      	movs	r2, #3
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 0203 	and.w	r2, r3, #3
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d00b      	beq.n	800304e <HAL_GPIO_Init+0xe6>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d007      	beq.n	800304e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003042:	2b11      	cmp	r3, #17
 8003044:	d003      	beq.n	800304e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b12      	cmp	r3, #18
 800304c:	d130      	bne.n	80030b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	2203      	movs	r2, #3
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003084:	2201      	movs	r2, #1
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 0201 	and.w	r2, r3, #1
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	2203      	movs	r2, #3
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80c0 	beq.w	800326e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	4b65      	ldr	r3, [pc, #404]	; (8003288 <HAL_GPIO_Init+0x320>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	4a64      	ldr	r2, [pc, #400]	; (8003288 <HAL_GPIO_Init+0x320>)
 80030f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030fc:	6453      	str	r3, [r2, #68]	; 0x44
 80030fe:	4b62      	ldr	r3, [pc, #392]	; (8003288 <HAL_GPIO_Init+0x320>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800310a:	4a60      	ldr	r2, [pc, #384]	; (800328c <HAL_GPIO_Init+0x324>)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	089b      	lsrs	r3, r3, #2
 8003110:	3302      	adds	r3, #2
 8003112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	220f      	movs	r2, #15
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a57      	ldr	r2, [pc, #348]	; (8003290 <HAL_GPIO_Init+0x328>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d037      	beq.n	80031a6 <HAL_GPIO_Init+0x23e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a56      	ldr	r2, [pc, #344]	; (8003294 <HAL_GPIO_Init+0x32c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d031      	beq.n	80031a2 <HAL_GPIO_Init+0x23a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a55      	ldr	r2, [pc, #340]	; (8003298 <HAL_GPIO_Init+0x330>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d02b      	beq.n	800319e <HAL_GPIO_Init+0x236>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a54      	ldr	r2, [pc, #336]	; (800329c <HAL_GPIO_Init+0x334>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d025      	beq.n	800319a <HAL_GPIO_Init+0x232>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a53      	ldr	r2, [pc, #332]	; (80032a0 <HAL_GPIO_Init+0x338>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01f      	beq.n	8003196 <HAL_GPIO_Init+0x22e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a52      	ldr	r2, [pc, #328]	; (80032a4 <HAL_GPIO_Init+0x33c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d019      	beq.n	8003192 <HAL_GPIO_Init+0x22a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a51      	ldr	r2, [pc, #324]	; (80032a8 <HAL_GPIO_Init+0x340>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <HAL_GPIO_Init+0x226>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a50      	ldr	r2, [pc, #320]	; (80032ac <HAL_GPIO_Init+0x344>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00d      	beq.n	800318a <HAL_GPIO_Init+0x222>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a4f      	ldr	r2, [pc, #316]	; (80032b0 <HAL_GPIO_Init+0x348>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d007      	beq.n	8003186 <HAL_GPIO_Init+0x21e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a4e      	ldr	r2, [pc, #312]	; (80032b4 <HAL_GPIO_Init+0x34c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d101      	bne.n	8003182 <HAL_GPIO_Init+0x21a>
 800317e:	2309      	movs	r3, #9
 8003180:	e012      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 8003182:	230a      	movs	r3, #10
 8003184:	e010      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 8003186:	2308      	movs	r3, #8
 8003188:	e00e      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 800318a:	2307      	movs	r3, #7
 800318c:	e00c      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 800318e:	2306      	movs	r3, #6
 8003190:	e00a      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 8003192:	2305      	movs	r3, #5
 8003194:	e008      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 8003196:	2304      	movs	r3, #4
 8003198:	e006      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 800319a:	2303      	movs	r3, #3
 800319c:	e004      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 800319e:	2302      	movs	r3, #2
 80031a0:	e002      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 80031a6:	2300      	movs	r3, #0
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	f002 0203 	and.w	r2, r2, #3
 80031ae:	0092      	lsls	r2, r2, #2
 80031b0:	4093      	lsls	r3, r2
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031b8:	4934      	ldr	r1, [pc, #208]	; (800328c <HAL_GPIO_Init+0x324>)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	089b      	lsrs	r3, r3, #2
 80031be:	3302      	adds	r3, #2
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031c6:	4b3c      	ldr	r3, [pc, #240]	; (80032b8 <HAL_GPIO_Init+0x350>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031ea:	4a33      	ldr	r2, [pc, #204]	; (80032b8 <HAL_GPIO_Init+0x350>)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031f0:	4b31      	ldr	r3, [pc, #196]	; (80032b8 <HAL_GPIO_Init+0x350>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003214:	4a28      	ldr	r2, [pc, #160]	; (80032b8 <HAL_GPIO_Init+0x350>)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800321a:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <HAL_GPIO_Init+0x350>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800323e:	4a1e      	ldr	r2, [pc, #120]	; (80032b8 <HAL_GPIO_Init+0x350>)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003244:	4b1c      	ldr	r3, [pc, #112]	; (80032b8 <HAL_GPIO_Init+0x350>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003268:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <HAL_GPIO_Init+0x350>)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3301      	adds	r3, #1
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b0f      	cmp	r3, #15
 8003278:	f67f ae84 	bls.w	8002f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800327c:	bf00      	nop
 800327e:	3724      	adds	r7, #36	; 0x24
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	40023800 	.word	0x40023800
 800328c:	40013800 	.word	0x40013800
 8003290:	40020000 	.word	0x40020000
 8003294:	40020400 	.word	0x40020400
 8003298:	40020800 	.word	0x40020800
 800329c:	40020c00 	.word	0x40020c00
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40021400 	.word	0x40021400
 80032a8:	40021800 	.word	0x40021800
 80032ac:	40021c00 	.word	0x40021c00
 80032b0:	40022000 	.word	0x40022000
 80032b4:	40022400 	.word	0x40022400
 80032b8:	40013c00 	.word	0x40013c00

080032bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	e0d9      	b.n	800348c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032d8:	2201      	movs	r2, #1
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4013      	ands	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	f040 80c9 	bne.w	8003486 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80032f4:	4a6a      	ldr	r2, [pc, #424]	; (80034a0 <HAL_GPIO_DeInit+0x1e4>)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	089b      	lsrs	r3, r3, #2
 80032fa:	3302      	adds	r3, #2
 80032fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003300:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	220f      	movs	r2, #15
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	4013      	ands	r3, r2
 8003314:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a62      	ldr	r2, [pc, #392]	; (80034a4 <HAL_GPIO_DeInit+0x1e8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d037      	beq.n	800338e <HAL_GPIO_DeInit+0xd2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a61      	ldr	r2, [pc, #388]	; (80034a8 <HAL_GPIO_DeInit+0x1ec>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d031      	beq.n	800338a <HAL_GPIO_DeInit+0xce>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a60      	ldr	r2, [pc, #384]	; (80034ac <HAL_GPIO_DeInit+0x1f0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d02b      	beq.n	8003386 <HAL_GPIO_DeInit+0xca>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a5f      	ldr	r2, [pc, #380]	; (80034b0 <HAL_GPIO_DeInit+0x1f4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d025      	beq.n	8003382 <HAL_GPIO_DeInit+0xc6>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a5e      	ldr	r2, [pc, #376]	; (80034b4 <HAL_GPIO_DeInit+0x1f8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01f      	beq.n	800337e <HAL_GPIO_DeInit+0xc2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a5d      	ldr	r2, [pc, #372]	; (80034b8 <HAL_GPIO_DeInit+0x1fc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d019      	beq.n	800337a <HAL_GPIO_DeInit+0xbe>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a5c      	ldr	r2, [pc, #368]	; (80034bc <HAL_GPIO_DeInit+0x200>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d013      	beq.n	8003376 <HAL_GPIO_DeInit+0xba>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a5b      	ldr	r2, [pc, #364]	; (80034c0 <HAL_GPIO_DeInit+0x204>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00d      	beq.n	8003372 <HAL_GPIO_DeInit+0xb6>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a5a      	ldr	r2, [pc, #360]	; (80034c4 <HAL_GPIO_DeInit+0x208>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d007      	beq.n	800336e <HAL_GPIO_DeInit+0xb2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a59      	ldr	r2, [pc, #356]	; (80034c8 <HAL_GPIO_DeInit+0x20c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_GPIO_DeInit+0xae>
 8003366:	2309      	movs	r3, #9
 8003368:	e012      	b.n	8003390 <HAL_GPIO_DeInit+0xd4>
 800336a:	230a      	movs	r3, #10
 800336c:	e010      	b.n	8003390 <HAL_GPIO_DeInit+0xd4>
 800336e:	2308      	movs	r3, #8
 8003370:	e00e      	b.n	8003390 <HAL_GPIO_DeInit+0xd4>
 8003372:	2307      	movs	r3, #7
 8003374:	e00c      	b.n	8003390 <HAL_GPIO_DeInit+0xd4>
 8003376:	2306      	movs	r3, #6
 8003378:	e00a      	b.n	8003390 <HAL_GPIO_DeInit+0xd4>
 800337a:	2305      	movs	r3, #5
 800337c:	e008      	b.n	8003390 <HAL_GPIO_DeInit+0xd4>
 800337e:	2304      	movs	r3, #4
 8003380:	e006      	b.n	8003390 <HAL_GPIO_DeInit+0xd4>
 8003382:	2303      	movs	r3, #3
 8003384:	e004      	b.n	8003390 <HAL_GPIO_DeInit+0xd4>
 8003386:	2302      	movs	r3, #2
 8003388:	e002      	b.n	8003390 <HAL_GPIO_DeInit+0xd4>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <HAL_GPIO_DeInit+0xd4>
 800338e:	2300      	movs	r3, #0
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	f002 0203 	and.w	r2, r2, #3
 8003396:	0092      	lsls	r2, r2, #2
 8003398:	4093      	lsls	r3, r2
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	429a      	cmp	r2, r3
 800339e:	d132      	bne.n	8003406 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	220f      	movs	r2, #15
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80033b0:	4a3b      	ldr	r2, [pc, #236]	; (80034a0 <HAL_GPIO_DeInit+0x1e4>)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	089b      	lsrs	r3, r3, #2
 80033b6:	3302      	adds	r3, #2
 80033b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	43da      	mvns	r2, r3
 80033c0:	4837      	ldr	r0, [pc, #220]	; (80034a0 <HAL_GPIO_DeInit+0x1e4>)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	089b      	lsrs	r3, r3, #2
 80033c6:	400a      	ands	r2, r1
 80033c8:	3302      	adds	r3, #2
 80033ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80033ce:	4b3f      	ldr	r3, [pc, #252]	; (80034cc <HAL_GPIO_DeInit+0x210>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	493d      	ldr	r1, [pc, #244]	; (80034cc <HAL_GPIO_DeInit+0x210>)
 80033d8:	4013      	ands	r3, r2
 80033da:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80033dc:	4b3b      	ldr	r3, [pc, #236]	; (80034cc <HAL_GPIO_DeInit+0x210>)
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	43db      	mvns	r3, r3
 80033e4:	4939      	ldr	r1, [pc, #228]	; (80034cc <HAL_GPIO_DeInit+0x210>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80033ea:	4b38      	ldr	r3, [pc, #224]	; (80034cc <HAL_GPIO_DeInit+0x210>)
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	4936      	ldr	r1, [pc, #216]	; (80034cc <HAL_GPIO_DeInit+0x210>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80033f8:	4b34      	ldr	r3, [pc, #208]	; (80034cc <HAL_GPIO_DeInit+0x210>)
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	43db      	mvns	r3, r3
 8003400:	4932      	ldr	r1, [pc, #200]	; (80034cc <HAL_GPIO_DeInit+0x210>)
 8003402:	4013      	ands	r3, r2
 8003404:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	2103      	movs	r1, #3
 8003410:	fa01 f303 	lsl.w	r3, r1, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	401a      	ands	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	08da      	lsrs	r2, r3, #3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3208      	adds	r2, #8
 8003424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	220f      	movs	r2, #15
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	08d2      	lsrs	r2, r2, #3
 800343c:	4019      	ands	r1, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3208      	adds	r2, #8
 8003442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	2103      	movs	r1, #3
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	401a      	ands	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	2101      	movs	r1, #1
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	401a      	ands	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	2103      	movs	r1, #3
 800347a:	fa01 f303 	lsl.w	r3, r1, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	401a      	ands	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3301      	adds	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b0f      	cmp	r3, #15
 8003490:	f67f af22 	bls.w	80032d8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003494:	bf00      	nop
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	40013800 	.word	0x40013800
 80034a4:	40020000 	.word	0x40020000
 80034a8:	40020400 	.word	0x40020400
 80034ac:	40020800 	.word	0x40020800
 80034b0:	40020c00 	.word	0x40020c00
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40021400 	.word	0x40021400
 80034bc:	40021800 	.word	0x40021800
 80034c0:	40021c00 	.word	0x40021c00
 80034c4:	40022000 	.word	0x40022000
 80034c8:	40022400 	.word	0x40022400
 80034cc:	40013c00 	.word	0x40013c00

080034d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	887b      	ldrh	r3, [r7, #2]
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
 80034ec:	e001      	b.n	80034f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034ee:	2300      	movs	r3, #0
 80034f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	807b      	strh	r3, [r7, #2]
 800350c:	4613      	mov	r3, r2
 800350e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003510:	787b      	ldrb	r3, [r7, #1]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003516:	887a      	ldrh	r2, [r7, #2]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800351c:	e003      	b.n	8003526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800351e:	887b      	ldrh	r3, [r7, #2]
 8003520:	041a      	lsls	r2, r3, #16
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	619a      	str	r2, [r3, #24]
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e10f      	b.n	8003766 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f002 ff66 	bl	800642c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2224      	movs	r2, #36	; 0x24
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003578:	f001 f8a8 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 800357c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	4a7b      	ldr	r2, [pc, #492]	; (8003770 <HAL_I2C_Init+0x23c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d807      	bhi.n	8003598 <HAL_I2C_Init+0x64>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4a7a      	ldr	r2, [pc, #488]	; (8003774 <HAL_I2C_Init+0x240>)
 800358c:	4293      	cmp	r3, r2
 800358e:	bf94      	ite	ls
 8003590:	2301      	movls	r3, #1
 8003592:	2300      	movhi	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	e006      	b.n	80035a6 <HAL_I2C_Init+0x72>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4a77      	ldr	r2, [pc, #476]	; (8003778 <HAL_I2C_Init+0x244>)
 800359c:	4293      	cmp	r3, r2
 800359e:	bf94      	ite	ls
 80035a0:	2301      	movls	r3, #1
 80035a2:	2300      	movhi	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0db      	b.n	8003766 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4a72      	ldr	r2, [pc, #456]	; (800377c <HAL_I2C_Init+0x248>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0c9b      	lsrs	r3, r3, #18
 80035b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	4a64      	ldr	r2, [pc, #400]	; (8003770 <HAL_I2C_Init+0x23c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d802      	bhi.n	80035e8 <HAL_I2C_Init+0xb4>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	3301      	adds	r3, #1
 80035e6:	e009      	b.n	80035fc <HAL_I2C_Init+0xc8>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035ee:	fb02 f303 	mul.w	r3, r2, r3
 80035f2:	4a63      	ldr	r2, [pc, #396]	; (8003780 <HAL_I2C_Init+0x24c>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	099b      	lsrs	r3, r3, #6
 80035fa:	3301      	adds	r3, #1
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	430b      	orrs	r3, r1
 8003602:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800360e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4956      	ldr	r1, [pc, #344]	; (8003770 <HAL_I2C_Init+0x23c>)
 8003618:	428b      	cmp	r3, r1
 800361a:	d80d      	bhi.n	8003638 <HAL_I2C_Init+0x104>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1e59      	subs	r1, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	fbb1 f3f3 	udiv	r3, r1, r3
 800362a:	3301      	adds	r3, #1
 800362c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003630:	2b04      	cmp	r3, #4
 8003632:	bf38      	it	cc
 8003634:	2304      	movcc	r3, #4
 8003636:	e04f      	b.n	80036d8 <HAL_I2C_Init+0x1a4>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d111      	bne.n	8003664 <HAL_I2C_Init+0x130>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1e58      	subs	r0, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	440b      	add	r3, r1
 800364e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003652:	3301      	adds	r3, #1
 8003654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e012      	b.n	800368a <HAL_I2C_Init+0x156>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1e58      	subs	r0, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	0099      	lsls	r1, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	fbb0 f3f3 	udiv	r3, r0, r3
 800367a:	3301      	adds	r3, #1
 800367c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_I2C_Init+0x15e>
 800368e:	2301      	movs	r3, #1
 8003690:	e022      	b.n	80036d8 <HAL_I2C_Init+0x1a4>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10e      	bne.n	80036b8 <HAL_I2C_Init+0x184>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1e58      	subs	r0, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6859      	ldr	r1, [r3, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	440b      	add	r3, r1
 80036a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ac:	3301      	adds	r3, #1
 80036ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b6:	e00f      	b.n	80036d8 <HAL_I2C_Init+0x1a4>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1e58      	subs	r0, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6859      	ldr	r1, [r3, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	0099      	lsls	r1, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ce:	3301      	adds	r3, #1
 80036d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	6809      	ldr	r1, [r1, #0]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69da      	ldr	r2, [r3, #28]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003706:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6911      	ldr	r1, [r2, #16]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	68d2      	ldr	r2, [r2, #12]
 8003712:	4311      	orrs	r1, r2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	430b      	orrs	r3, r1
 800371a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	000186a0 	.word	0x000186a0
 8003774:	001e847f 	.word	0x001e847f
 8003778:	003d08ff 	.word	0x003d08ff
 800377c:	431bde83 	.word	0x431bde83
 8003780:	10624dd3 	.word	0x10624dd3

08003784 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b20      	cmp	r3, #32
 8003798:	d129      	bne.n	80037ee <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2224      	movs	r2, #36	; 0x24
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0210 	bic.w	r2, r2, #16
 80037c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0201 	orr.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	e000      	b.n	80037f0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
  }
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b20      	cmp	r3, #32
 8003814:	d12a      	bne.n	800386c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2224      	movs	r2, #36	; 0x24
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003836:	89fb      	ldrh	r3, [r7, #14]
 8003838:	f023 030f 	bic.w	r3, r3, #15
 800383c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	b29a      	uxth	r2, r3
 8003842:	89fb      	ldrh	r3, [r7, #14]
 8003844:	4313      	orrs	r3, r2
 8003846:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	89fa      	ldrh	r2, [r7, #14]
 800384e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	e000      	b.n	800386e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800386c:	2302      	movs	r3, #2
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e0bf      	b.n	8003a0e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f002 fe2c 	bl	8006500 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80038be:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6999      	ldr	r1, [r3, #24]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80038d4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6899      	ldr	r1, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4b4a      	ldr	r3, [pc, #296]	; (8003a18 <HAL_LTDC_Init+0x19c>)
 80038f0:	400b      	ands	r3, r1
 80038f2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	041b      	lsls	r3, r3, #16
 80038fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6899      	ldr	r1, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68d9      	ldr	r1, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4b3e      	ldr	r3, [pc, #248]	; (8003a18 <HAL_LTDC_Init+0x19c>)
 800391e:	400b      	ands	r3, r1
 8003920:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	041b      	lsls	r3, r3, #16
 8003928:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68d9      	ldr	r1, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1a      	ldr	r2, [r3, #32]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6919      	ldr	r1, [r3, #16]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4b33      	ldr	r3, [pc, #204]	; (8003a18 <HAL_LTDC_Init+0x19c>)
 800394c:	400b      	ands	r3, r1
 800394e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	041b      	lsls	r3, r3, #16
 8003956:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6919      	ldr	r1, [r3, #16]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6959      	ldr	r1, [r3, #20]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <HAL_LTDC_Init+0x19c>)
 800397a:	400b      	ands	r3, r1
 800397c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	041b      	lsls	r3, r3, #16
 8003984:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6959      	ldr	r1, [r3, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80039ac:	041b      	lsls	r3, r3, #16
 80039ae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80039be:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0206 	orr.w	r2, r2, #6
 80039ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	f000f800 	.word	0xf000f800

08003a1c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a1c:	b5b0      	push	{r4, r5, r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_LTDC_ConfigLayer+0x1a>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e02c      	b.n	8003a90 <HAL_LTDC_ConfigLayer+0x74>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2202      	movs	r2, #2
 8003a42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2134      	movs	r1, #52	; 0x34
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	4614      	mov	r4, r2
 8003a5a:	461d      	mov	r5, r3
 8003a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a68:	682b      	ldr	r3, [r5, #0]
 8003a6a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	68b9      	ldr	r1, [r7, #8]
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f83b 	bl	8003aec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bdb0      	pop	{r4, r5, r7, pc}

08003a98 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_LTDC_EnableDither+0x16>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e016      	b.n	8003adc <HAL_LTDC_EnableDither+0x44>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003abe:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <HAL_LTDC_EnableDither+0x50>)
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	4a09      	ldr	r2, [pc, #36]	; (8003ae8 <HAL_LTDC_EnableDither+0x50>)
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac8:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	40016800 	.word	0x40016800

08003aec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b089      	sub	sp, #36	; 0x24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	0c1b      	lsrs	r3, r3, #16
 8003b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b08:	4413      	add	r3, r2
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	01db      	lsls	r3, r3, #7
 8003b18:	4413      	add	r3, r2
 8003b1a:	3384      	adds	r3, #132	; 0x84
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	6812      	ldr	r2, [r2, #0]
 8003b22:	4611      	mov	r1, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	01d2      	lsls	r2, r2, #7
 8003b28:	440a      	add	r2, r1
 8003b2a:	3284      	adds	r2, #132	; 0x84
 8003b2c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003b30:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b42:	4413      	add	r3, r2
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	01db      	lsls	r3, r3, #7
 8003b50:	440b      	add	r3, r1
 8003b52:	3384      	adds	r3, #132	; 0x84
 8003b54:	4619      	mov	r1, r3
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b6a:	4413      	add	r3, r2
 8003b6c:	041b      	lsls	r3, r3, #16
 8003b6e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	01db      	lsls	r3, r3, #7
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3384      	adds	r3, #132	; 0x84
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	4611      	mov	r1, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	01d2      	lsls	r2, r2, #7
 8003b8a:	440a      	add	r2, r1
 8003b8c:	3284      	adds	r2, #132	; 0x84
 8003b8e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003b92:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ba2:	4413      	add	r3, r2
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4619      	mov	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	01db      	lsls	r3, r3, #7
 8003bb0:	440b      	add	r3, r1
 8003bb2:	3384      	adds	r3, #132	; 0x84
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	01db      	lsls	r3, r3, #7
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3384      	adds	r3, #132	; 0x84
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	01d2      	lsls	r2, r2, #7
 8003bd6:	440a      	add	r2, r1
 8003bd8:	3284      	adds	r2, #132	; 0x84
 8003bda:	f023 0307 	bic.w	r3, r3, #7
 8003bde:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	01db      	lsls	r3, r3, #7
 8003bea:	4413      	add	r3, r2
 8003bec:	3384      	adds	r3, #132	; 0x84
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003bfc:	021b      	lsls	r3, r3, #8
 8003bfe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c06:	041b      	lsls	r3, r3, #16
 8003c08:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	061b      	lsls	r3, r3, #24
 8003c10:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	01db      	lsls	r3, r3, #7
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3384      	adds	r3, #132	; 0x84
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	01db      	lsls	r3, r3, #7
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3384      	adds	r3, #132	; 0x84
 8003c30:	461a      	mov	r2, r3
 8003c32:	2300      	movs	r3, #0
 8003c34:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	431a      	orrs	r2, r3
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	01db      	lsls	r3, r3, #7
 8003c50:	440b      	add	r3, r1
 8003c52:	3384      	adds	r3, #132	; 0x84
 8003c54:	4619      	mov	r1, r3
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	01db      	lsls	r3, r3, #7
 8003c66:	4413      	add	r3, r2
 8003c68:	3384      	adds	r3, #132	; 0x84
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	4611      	mov	r1, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	01d2      	lsls	r2, r2, #7
 8003c76:	440a      	add	r2, r1
 8003c78:	3284      	adds	r2, #132	; 0x84
 8003c7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c7e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	01db      	lsls	r3, r3, #7
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3384      	adds	r3, #132	; 0x84
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	01db      	lsls	r3, r3, #7
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3384      	adds	r3, #132	; 0x84
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	4611      	mov	r1, r2
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	01d2      	lsls	r2, r2, #7
 8003cb0:	440a      	add	r2, r1
 8003cb2:	3284      	adds	r2, #132	; 0x84
 8003cb4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003cb8:	f023 0307 	bic.w	r3, r3, #7
 8003cbc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	69da      	ldr	r2, [r3, #28]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	68f9      	ldr	r1, [r7, #12]
 8003cc8:	6809      	ldr	r1, [r1, #0]
 8003cca:	4608      	mov	r0, r1
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	01c9      	lsls	r1, r1, #7
 8003cd0:	4401      	add	r1, r0
 8003cd2:	3184      	adds	r1, #132	; 0x84
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	01db      	lsls	r3, r3, #7
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3384      	adds	r3, #132	; 0x84
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	01db      	lsls	r3, r3, #7
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3384      	adds	r3, #132	; 0x84
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	01db      	lsls	r3, r3, #7
 8003d06:	4413      	add	r3, r2
 8003d08:	3384      	adds	r3, #132	; 0x84
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d102      	bne.n	8003d20 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003d1a:	2304      	movs	r3, #4
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	e01b      	b.n	8003d58 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d102      	bne.n	8003d2e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	61fb      	str	r3, [r7, #28]
 8003d2c:	e014      	b.n	8003d58 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d00b      	beq.n	8003d4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d007      	beq.n	8003d4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d003      	beq.n	8003d4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d4a:	2b07      	cmp	r3, #7
 8003d4c:	d102      	bne.n	8003d54 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	e001      	b.n	8003d58 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003d54:	2301      	movs	r3, #1
 8003d56:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	01db      	lsls	r3, r3, #7
 8003d62:	4413      	add	r3, r2
 8003d64:	3384      	adds	r3, #132	; 0x84
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	01d2      	lsls	r2, r2, #7
 8003d72:	440a      	add	r2, r1
 8003d74:	3284      	adds	r2, #132	; 0x84
 8003d76:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003d7a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	69fa      	ldr	r2, [r7, #28]
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	041a      	lsls	r2, r3, #16
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	1acb      	subs	r3, r1, r3
 8003d92:	69f9      	ldr	r1, [r7, #28]
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	3303      	adds	r3, #3
 8003d9a:	68f9      	ldr	r1, [r7, #12]
 8003d9c:	6809      	ldr	r1, [r1, #0]
 8003d9e:	4608      	mov	r0, r1
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	01c9      	lsls	r1, r1, #7
 8003da4:	4401      	add	r1, r0
 8003da6:	3184      	adds	r1, #132	; 0x84
 8003da8:	4313      	orrs	r3, r2
 8003daa:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	01db      	lsls	r3, r3, #7
 8003db6:	4413      	add	r3, r2
 8003db8:	3384      	adds	r3, #132	; 0x84
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	01d2      	lsls	r2, r2, #7
 8003dc6:	440a      	add	r2, r1
 8003dc8:	3284      	adds	r2, #132	; 0x84
 8003dca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003dce:	f023 0307 	bic.w	r3, r3, #7
 8003dd2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	01db      	lsls	r3, r3, #7
 8003dde:	4413      	add	r3, r2
 8003de0:	3384      	adds	r3, #132	; 0x84
 8003de2:	461a      	mov	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	01db      	lsls	r3, r3, #7
 8003df4:	4413      	add	r3, r2
 8003df6:	3384      	adds	r3, #132	; 0x84
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	4611      	mov	r1, r2
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	01d2      	lsls	r2, r2, #7
 8003e04:	440a      	add	r2, r1
 8003e06:	3284      	adds	r2, #132	; 0x84
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	6013      	str	r3, [r2, #0]
}
 8003e0e:	bf00      	nop
 8003e10:	3724      	adds	r7, #36	; 0x24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	4b20      	ldr	r3, [pc, #128]	; (8003eac <HAL_PWREx_EnableOverDrive+0x90>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	4a1f      	ldr	r2, [pc, #124]	; (8003eac <HAL_PWREx_EnableOverDrive+0x90>)
 8003e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e34:	6413      	str	r3, [r2, #64]	; 0x40
 8003e36:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <HAL_PWREx_EnableOverDrive+0x90>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e42:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e48:	f7fe fb06 	bl	8002458 <HAL_GetTick>
 8003e4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e4e:	e009      	b.n	8003e64 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e50:	f7fe fb02 	bl	8002458 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e5e:	d901      	bls.n	8003e64 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e01f      	b.n	8003ea4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e64:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e70:	d1ee      	bne.n	8003e50 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e72:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e78:	f7fe faee 	bl	8002458 <HAL_GetTick>
 8003e7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e7e:	e009      	b.n	8003e94 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e80:	f7fe faea 	bl	8002458 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e8e:	d901      	bls.n	8003e94 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e007      	b.n	8003ea4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e94:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ea0:	d1ee      	bne.n	8003e80 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	420e0040 	.word	0x420e0040
 8003eb4:	40007000 	.word	0x40007000
 8003eb8:	420e0044 	.word	0x420e0044

08003ebc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e22d      	b.n	800432a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d075      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eda:	4ba3      	ldr	r3, [pc, #652]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d00c      	beq.n	8003f00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ee6:	4ba0      	ldr	r3, [pc, #640]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d112      	bne.n	8003f18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ef2:	4b9d      	ldr	r3, [pc, #628]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003efe:	d10b      	bne.n	8003f18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f00:	4b99      	ldr	r3, [pc, #612]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d05b      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x108>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d157      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e208      	b.n	800432a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f20:	d106      	bne.n	8003f30 <HAL_RCC_OscConfig+0x74>
 8003f22:	4b91      	ldr	r3, [pc, #580]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a90      	ldr	r2, [pc, #576]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	e01d      	b.n	8003f6c <HAL_RCC_OscConfig+0xb0>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f38:	d10c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x98>
 8003f3a:	4b8b      	ldr	r3, [pc, #556]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a8a      	ldr	r2, [pc, #552]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	4b88      	ldr	r3, [pc, #544]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a87      	ldr	r2, [pc, #540]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	e00b      	b.n	8003f6c <HAL_RCC_OscConfig+0xb0>
 8003f54:	4b84      	ldr	r3, [pc, #528]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a83      	ldr	r2, [pc, #524]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	4b81      	ldr	r3, [pc, #516]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a80      	ldr	r2, [pc, #512]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d013      	beq.n	8003f9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f74:	f7fe fa70 	bl	8002458 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f7c:	f7fe fa6c 	bl	8002458 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b64      	cmp	r3, #100	; 0x64
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e1cd      	b.n	800432a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8e:	4b76      	ldr	r3, [pc, #472]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0xc0>
 8003f9a:	e014      	b.n	8003fc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7fe fa5c 	bl	8002458 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa4:	f7fe fa58 	bl	8002458 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b64      	cmp	r3, #100	; 0x64
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e1b9      	b.n	800432a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb6:	4b6c      	ldr	r3, [pc, #432]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0xe8>
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d063      	beq.n	800409a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fd2:	4b65      	ldr	r3, [pc, #404]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 030c 	and.w	r3, r3, #12
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fde:	4b62      	ldr	r3, [pc, #392]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d11c      	bne.n	8004024 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fea:	4b5f      	ldr	r3, [pc, #380]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d116      	bne.n	8004024 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ff6:	4b5c      	ldr	r3, [pc, #368]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <HAL_RCC_OscConfig+0x152>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d001      	beq.n	800400e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e18d      	b.n	800432a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400e:	4b56      	ldr	r3, [pc, #344]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4952      	ldr	r1, [pc, #328]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 800401e:	4313      	orrs	r3, r2
 8004020:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004022:	e03a      	b.n	800409a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d020      	beq.n	800406e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800402c:	4b4f      	ldr	r3, [pc, #316]	; (800416c <HAL_RCC_OscConfig+0x2b0>)
 800402e:	2201      	movs	r2, #1
 8004030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004032:	f7fe fa11 	bl	8002458 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800403a:	f7fe fa0d 	bl	8002458 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e16e      	b.n	800432a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404c:	4b46      	ldr	r3, [pc, #280]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004058:	4b43      	ldr	r3, [pc, #268]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4940      	ldr	r1, [pc, #256]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8004068:	4313      	orrs	r3, r2
 800406a:	600b      	str	r3, [r1, #0]
 800406c:	e015      	b.n	800409a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800406e:	4b3f      	ldr	r3, [pc, #252]	; (800416c <HAL_RCC_OscConfig+0x2b0>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fe f9f0 	bl	8002458 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800407c:	f7fe f9ec 	bl	8002458 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e14d      	b.n	800432a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408e:	4b36      	ldr	r3, [pc, #216]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d030      	beq.n	8004108 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d016      	beq.n	80040dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ae:	4b30      	ldr	r3, [pc, #192]	; (8004170 <HAL_RCC_OscConfig+0x2b4>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b4:	f7fe f9d0 	bl	8002458 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040bc:	f7fe f9cc 	bl	8002458 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e12d      	b.n	800432a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ce:	4b26      	ldr	r3, [pc, #152]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0x200>
 80040da:	e015      	b.n	8004108 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040dc:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_RCC_OscConfig+0x2b4>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e2:	f7fe f9b9 	bl	8002458 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ea:	f7fe f9b5 	bl	8002458 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e116      	b.n	800432a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040fc:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 80040fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f0      	bne.n	80040ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80a0 	beq.w	8004256 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004116:	2300      	movs	r3, #0
 8004118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800411a:	4b13      	ldr	r3, [pc, #76]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10f      	bne.n	8004146 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	4a0e      	ldr	r2, [pc, #56]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004134:	6413      	str	r3, [r2, #64]	; 0x40
 8004136:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <HAL_RCC_OscConfig+0x2ac>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004146:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCC_OscConfig+0x2b8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d121      	bne.n	8004196 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004152:	4b08      	ldr	r3, [pc, #32]	; (8004174 <HAL_RCC_OscConfig+0x2b8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a07      	ldr	r2, [pc, #28]	; (8004174 <HAL_RCC_OscConfig+0x2b8>)
 8004158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800415e:	f7fe f97b 	bl	8002458 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004164:	e011      	b.n	800418a <HAL_RCC_OscConfig+0x2ce>
 8004166:	bf00      	nop
 8004168:	40023800 	.word	0x40023800
 800416c:	42470000 	.word	0x42470000
 8004170:	42470e80 	.word	0x42470e80
 8004174:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004178:	f7fe f96e 	bl	8002458 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e0cf      	b.n	800432a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418a:	4b6a      	ldr	r3, [pc, #424]	; (8004334 <HAL_RCC_OscConfig+0x478>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d106      	bne.n	80041ac <HAL_RCC_OscConfig+0x2f0>
 800419e:	4b66      	ldr	r3, [pc, #408]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	4a65      	ldr	r2, [pc, #404]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	6713      	str	r3, [r2, #112]	; 0x70
 80041aa:	e01c      	b.n	80041e6 <HAL_RCC_OscConfig+0x32a>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b05      	cmp	r3, #5
 80041b2:	d10c      	bne.n	80041ce <HAL_RCC_OscConfig+0x312>
 80041b4:	4b60      	ldr	r3, [pc, #384]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 80041b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b8:	4a5f      	ldr	r2, [pc, #380]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 80041ba:	f043 0304 	orr.w	r3, r3, #4
 80041be:	6713      	str	r3, [r2, #112]	; 0x70
 80041c0:	4b5d      	ldr	r3, [pc, #372]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 80041c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c4:	4a5c      	ldr	r2, [pc, #368]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	6713      	str	r3, [r2, #112]	; 0x70
 80041cc:	e00b      	b.n	80041e6 <HAL_RCC_OscConfig+0x32a>
 80041ce:	4b5a      	ldr	r3, [pc, #360]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	4a59      	ldr	r2, [pc, #356]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 80041d4:	f023 0301 	bic.w	r3, r3, #1
 80041d8:	6713      	str	r3, [r2, #112]	; 0x70
 80041da:	4b57      	ldr	r3, [pc, #348]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041de:	4a56      	ldr	r2, [pc, #344]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 80041e0:	f023 0304 	bic.w	r3, r3, #4
 80041e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d015      	beq.n	800421a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ee:	f7fe f933 	bl	8002458 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f4:	e00a      	b.n	800420c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f6:	f7fe f92f 	bl	8002458 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f241 3288 	movw	r2, #5000	; 0x1388
 8004204:	4293      	cmp	r3, r2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e08e      	b.n	800432a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420c:	4b4a      	ldr	r3, [pc, #296]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 800420e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0ee      	beq.n	80041f6 <HAL_RCC_OscConfig+0x33a>
 8004218:	e014      	b.n	8004244 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421a:	f7fe f91d 	bl	8002458 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004220:	e00a      	b.n	8004238 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004222:	f7fe f919 	bl	8002458 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004230:	4293      	cmp	r3, r2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e078      	b.n	800432a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004238:	4b3f      	ldr	r3, [pc, #252]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1ee      	bne.n	8004222 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004244:	7dfb      	ldrb	r3, [r7, #23]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d105      	bne.n	8004256 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424a:	4b3b      	ldr	r3, [pc, #236]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	4a3a      	ldr	r2, [pc, #232]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 8004250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004254:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d064      	beq.n	8004328 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800425e:	4b36      	ldr	r3, [pc, #216]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	2b08      	cmp	r3, #8
 8004268:	d05c      	beq.n	8004324 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d141      	bne.n	80042f6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004272:	4b32      	ldr	r3, [pc, #200]	; (800433c <HAL_RCC_OscConfig+0x480>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fe f8ee 	bl	8002458 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004280:	f7fe f8ea 	bl	8002458 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e04b      	b.n	800432a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004292:	4b29      	ldr	r3, [pc, #164]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	019b      	lsls	r3, r3, #6
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	3b01      	subs	r3, #1
 80042b8:	041b      	lsls	r3, r3, #16
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	061b      	lsls	r3, r3, #24
 80042c2:	491d      	ldr	r1, [pc, #116]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c8:	4b1c      	ldr	r3, [pc, #112]	; (800433c <HAL_RCC_OscConfig+0x480>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ce:	f7fe f8c3 	bl	8002458 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d6:	f7fe f8bf 	bl	8002458 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e020      	b.n	800432a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e8:	4b13      	ldr	r3, [pc, #76]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x41a>
 80042f4:	e018      	b.n	8004328 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f6:	4b11      	ldr	r3, [pc, #68]	; (800433c <HAL_RCC_OscConfig+0x480>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fe f8ac 	bl	8002458 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004304:	f7fe f8a8 	bl	8002458 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e009      	b.n	800432a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004316:	4b08      	ldr	r3, [pc, #32]	; (8004338 <HAL_RCC_OscConfig+0x47c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x448>
 8004322:	e001      	b.n	8004328 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40007000 	.word	0x40007000
 8004338:	40023800 	.word	0x40023800
 800433c:	42470060 	.word	0x42470060

08004340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0ca      	b.n	80044ea <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004354:	4b67      	ldr	r3, [pc, #412]	; (80044f4 <HAL_RCC_ClockConfig+0x1b4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 030f 	and.w	r3, r3, #15
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d90c      	bls.n	800437c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b64      	ldr	r3, [pc, #400]	; (80044f4 <HAL_RCC_ClockConfig+0x1b4>)
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b62      	ldr	r3, [pc, #392]	; (80044f4 <HAL_RCC_ClockConfig+0x1b4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0b6      	b.n	80044ea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004394:	4b58      	ldr	r3, [pc, #352]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4a57      	ldr	r2, [pc, #348]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 800439a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800439e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043ac:	4b52      	ldr	r3, [pc, #328]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4a51      	ldr	r2, [pc, #324]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 80043b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b8:	4b4f      	ldr	r3, [pc, #316]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	494c      	ldr	r1, [pc, #304]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d044      	beq.n	8004460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	4b46      	ldr	r3, [pc, #280]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d119      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e07d      	b.n	80044ea <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d107      	bne.n	800440e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fe:	4b3e      	ldr	r3, [pc, #248]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e06d      	b.n	80044ea <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440e:	4b3a      	ldr	r3, [pc, #232]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e065      	b.n	80044ea <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441e:	4b36      	ldr	r3, [pc, #216]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f023 0203 	bic.w	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4933      	ldr	r1, [pc, #204]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 800442c:	4313      	orrs	r3, r2
 800442e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004430:	f7fe f812 	bl	8002458 <HAL_GetTick>
 8004434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004436:	e00a      	b.n	800444e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004438:	f7fe f80e 	bl	8002458 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f241 3288 	movw	r2, #5000	; 0x1388
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e04d      	b.n	80044ea <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	4b2a      	ldr	r3, [pc, #168]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 020c 	and.w	r2, r3, #12
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	429a      	cmp	r2, r3
 800445e:	d1eb      	bne.n	8004438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004460:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <HAL_RCC_ClockConfig+0x1b4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d20c      	bcs.n	8004488 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <HAL_RCC_ClockConfig+0x1b4>)
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b1f      	ldr	r3, [pc, #124]	; (80044f4 <HAL_RCC_ClockConfig+0x1b4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e030      	b.n	80044ea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004494:	4b18      	ldr	r3, [pc, #96]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4915      	ldr	r1, [pc, #84]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b2:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	490d      	ldr	r1, [pc, #52]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044c6:	f000 f81d 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 80044ca:	4601      	mov	r1, r0
 80044cc:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	4a09      	ldr	r2, [pc, #36]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	5cd3      	ldrb	r3, [r2, r3]
 80044da:	fa21 f303 	lsr.w	r3, r1, r3
 80044de:	4a08      	ldr	r2, [pc, #32]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 80044e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80044e2:	2000      	movs	r0, #0
 80044e4:	f7fd ff74 	bl	80023d0 <HAL_InitTick>

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40023c00 	.word	0x40023c00
 80044f8:	40023800 	.word	0x40023800
 80044fc:	0800c064 	.word	0x0800c064
 8004500:	2000005c 	.word	0x2000005c

08004504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	607b      	str	r3, [r7, #4]
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	2300      	movs	r3, #0
 8004514:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800451a:	4b63      	ldr	r3, [pc, #396]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 030c 	and.w	r3, r3, #12
 8004522:	2b04      	cmp	r3, #4
 8004524:	d007      	beq.n	8004536 <HAL_RCC_GetSysClockFreq+0x32>
 8004526:	2b08      	cmp	r3, #8
 8004528:	d008      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0x38>
 800452a:	2b00      	cmp	r3, #0
 800452c:	f040 80b4 	bne.w	8004698 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004530:	4b5e      	ldr	r3, [pc, #376]	; (80046ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004532:	60bb      	str	r3, [r7, #8]
       break;
 8004534:	e0b3      	b.n	800469e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004536:	4b5e      	ldr	r3, [pc, #376]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004538:	60bb      	str	r3, [r7, #8]
      break;
 800453a:	e0b0      	b.n	800469e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800453c:	4b5a      	ldr	r3, [pc, #360]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004544:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004546:	4b58      	ldr	r3, [pc, #352]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d04a      	beq.n	80045e8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004552:	4b55      	ldr	r3, [pc, #340]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	099b      	lsrs	r3, r3, #6
 8004558:	f04f 0400 	mov.w	r4, #0
 800455c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	ea03 0501 	and.w	r5, r3, r1
 8004568:	ea04 0602 	and.w	r6, r4, r2
 800456c:	4629      	mov	r1, r5
 800456e:	4632      	mov	r2, r6
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	f04f 0400 	mov.w	r4, #0
 8004578:	0154      	lsls	r4, r2, #5
 800457a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800457e:	014b      	lsls	r3, r1, #5
 8004580:	4619      	mov	r1, r3
 8004582:	4622      	mov	r2, r4
 8004584:	1b49      	subs	r1, r1, r5
 8004586:	eb62 0206 	sbc.w	r2, r2, r6
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	f04f 0400 	mov.w	r4, #0
 8004592:	0194      	lsls	r4, r2, #6
 8004594:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004598:	018b      	lsls	r3, r1, #6
 800459a:	1a5b      	subs	r3, r3, r1
 800459c:	eb64 0402 	sbc.w	r4, r4, r2
 80045a0:	f04f 0100 	mov.w	r1, #0
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	00e2      	lsls	r2, r4, #3
 80045aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045ae:	00d9      	lsls	r1, r3, #3
 80045b0:	460b      	mov	r3, r1
 80045b2:	4614      	mov	r4, r2
 80045b4:	195b      	adds	r3, r3, r5
 80045b6:	eb44 0406 	adc.w	r4, r4, r6
 80045ba:	f04f 0100 	mov.w	r1, #0
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	0262      	lsls	r2, r4, #9
 80045c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80045c8:	0259      	lsls	r1, r3, #9
 80045ca:	460b      	mov	r3, r1
 80045cc:	4614      	mov	r4, r2
 80045ce:	4618      	mov	r0, r3
 80045d0:	4621      	mov	r1, r4
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f04f 0400 	mov.w	r4, #0
 80045d8:	461a      	mov	r2, r3
 80045da:	4623      	mov	r3, r4
 80045dc:	f7fc fb64 	bl	8000ca8 <__aeabi_uldivmod>
 80045e0:	4603      	mov	r3, r0
 80045e2:	460c      	mov	r4, r1
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	e049      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e8:	4b2f      	ldr	r3, [pc, #188]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	099b      	lsrs	r3, r3, #6
 80045ee:	f04f 0400 	mov.w	r4, #0
 80045f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	ea03 0501 	and.w	r5, r3, r1
 80045fe:	ea04 0602 	and.w	r6, r4, r2
 8004602:	4629      	mov	r1, r5
 8004604:	4632      	mov	r2, r6
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	f04f 0400 	mov.w	r4, #0
 800460e:	0154      	lsls	r4, r2, #5
 8004610:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004614:	014b      	lsls	r3, r1, #5
 8004616:	4619      	mov	r1, r3
 8004618:	4622      	mov	r2, r4
 800461a:	1b49      	subs	r1, r1, r5
 800461c:	eb62 0206 	sbc.w	r2, r2, r6
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	f04f 0400 	mov.w	r4, #0
 8004628:	0194      	lsls	r4, r2, #6
 800462a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800462e:	018b      	lsls	r3, r1, #6
 8004630:	1a5b      	subs	r3, r3, r1
 8004632:	eb64 0402 	sbc.w	r4, r4, r2
 8004636:	f04f 0100 	mov.w	r1, #0
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	00e2      	lsls	r2, r4, #3
 8004640:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004644:	00d9      	lsls	r1, r3, #3
 8004646:	460b      	mov	r3, r1
 8004648:	4614      	mov	r4, r2
 800464a:	195b      	adds	r3, r3, r5
 800464c:	eb44 0406 	adc.w	r4, r4, r6
 8004650:	f04f 0100 	mov.w	r1, #0
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	02a2      	lsls	r2, r4, #10
 800465a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800465e:	0299      	lsls	r1, r3, #10
 8004660:	460b      	mov	r3, r1
 8004662:	4614      	mov	r4, r2
 8004664:	4618      	mov	r0, r3
 8004666:	4621      	mov	r1, r4
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f04f 0400 	mov.w	r4, #0
 800466e:	461a      	mov	r2, r3
 8004670:	4623      	mov	r3, r4
 8004672:	f7fc fb19 	bl	8000ca8 <__aeabi_uldivmod>
 8004676:	4603      	mov	r3, r0
 8004678:	460c      	mov	r4, r1
 800467a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800467c:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	0c1b      	lsrs	r3, r3, #16
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	3301      	adds	r3, #1
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	60bb      	str	r3, [r7, #8]
      break;
 8004696:	e002      	b.n	800469e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004698:	4b04      	ldr	r3, [pc, #16]	; (80046ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 800469a:	60bb      	str	r3, [r7, #8]
      break;
 800469c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800469e:	68bb      	ldr	r3, [r7, #8]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046a8:	40023800 	.word	0x40023800
 80046ac:	00f42400 	.word	0x00f42400
 80046b0:	007a1200 	.word	0x007a1200

080046b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b8:	4b03      	ldr	r3, [pc, #12]	; (80046c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046ba:	681b      	ldr	r3, [r3, #0]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	2000005c 	.word	0x2000005c

080046cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046d0:	f7ff fff0 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 80046d4:	4601      	mov	r1, r0
 80046d6:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	0a9b      	lsrs	r3, r3, #10
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	4a03      	ldr	r2, [pc, #12]	; (80046f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046e2:	5cd3      	ldrb	r3, [r2, r3]
 80046e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40023800 	.word	0x40023800
 80046f0:	0800c074 	.word	0x0800c074

080046f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d105      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004718:	2b00      	cmp	r3, #0
 800471a:	d061      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800471c:	4ba3      	ldr	r3, [pc, #652]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004722:	f7fd fe99 	bl	8002458 <HAL_GetTick>
 8004726:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004728:	e008      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800472a:	f7fd fe95 	bl	8002458 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e177      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800473c:	4b9c      	ldr	r3, [pc, #624]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1f0      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d009      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	019a      	lsls	r2, r3, #6
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	071b      	lsls	r3, r3, #28
 8004760:	4993      	ldr	r1, [pc, #588]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01f      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004774:	4b8e      	ldr	r3, [pc, #568]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800477a:	0f1b      	lsrs	r3, r3, #28
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	019a      	lsls	r2, r3, #6
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	061b      	lsls	r3, r3, #24
 800478e:	431a      	orrs	r2, r3
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	071b      	lsls	r3, r3, #28
 8004794:	4986      	ldr	r1, [pc, #536]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800479c:	4b84      	ldr	r3, [pc, #528]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800479e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a2:	f023 021f 	bic.w	r2, r3, #31
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	4980      	ldr	r1, [pc, #512]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047b4:	4b7d      	ldr	r3, [pc, #500]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047ba:	f7fd fe4d 	bl	8002458 <HAL_GetTick>
 80047be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047c0:	e008      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047c2:	f7fd fe49 	bl	8002458 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e12b      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047d4:	4b76      	ldr	r3, [pc, #472]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0f0      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d105      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d079      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047f8:	4b6e      	ldr	r3, [pc, #440]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047fe:	f7fd fe2b 	bl	8002458 <HAL_GetTick>
 8004802:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004804:	e008      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004806:	f7fd fe27 	bl	8002458 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e109      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004818:	4b65      	ldr	r3, [pc, #404]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004824:	d0ef      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b00      	cmp	r3, #0
 8004830:	d020      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004832:	4b5f      	ldr	r3, [pc, #380]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	0f1b      	lsrs	r3, r3, #28
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	019a      	lsls	r2, r3, #6
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	061b      	lsls	r3, r3, #24
 800484c:	431a      	orrs	r2, r3
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	071b      	lsls	r3, r3, #28
 8004852:	4957      	ldr	r1, [pc, #348]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800485a:	4b55      	ldr	r3, [pc, #340]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800485c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004860:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	3b01      	subs	r3, #1
 800486a:	021b      	lsls	r3, r3, #8
 800486c:	4950      	ldr	r1, [pc, #320]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01e      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004880:	4b4b      	ldr	r3, [pc, #300]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004886:	0e1b      	lsrs	r3, r3, #24
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	019a      	lsls	r2, r3, #6
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	061b      	lsls	r3, r3, #24
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	071b      	lsls	r3, r3, #28
 80048a0:	4943      	ldr	r1, [pc, #268]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80048a8:	4b41      	ldr	r3, [pc, #260]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	493e      	ldr	r1, [pc, #248]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048be:	4b3d      	ldr	r3, [pc, #244]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048c4:	f7fd fdc8 	bl	8002458 <HAL_GetTick>
 80048c8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80048cc:	f7fd fdc4 	bl	8002458 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e0a6      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048de:	4b34      	ldr	r3, [pc, #208]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048ea:	d1ef      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 808d 	beq.w	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	4b2c      	ldr	r3, [pc, #176]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	4a2b      	ldr	r2, [pc, #172]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004908:	6413      	str	r3, [r2, #64]	; 0x40
 800490a:	4b29      	ldr	r3, [pc, #164]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004916:	4b28      	ldr	r3, [pc, #160]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a27      	ldr	r2, [pc, #156]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800491c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004920:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004922:	f7fd fd99 	bl	8002458 <HAL_GetTick>
 8004926:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004928:	e008      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800492a:	f7fd fd95 	bl	8002458 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e077      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800493c:	4b1e      	ldr	r3, [pc, #120]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f0      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004948:	4b19      	ldr	r3, [pc, #100]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004950:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d039      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	429a      	cmp	r2, r3
 8004964:	d032      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004966:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800496e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004970:	4b12      	ldr	r3, [pc, #72]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004972:	2201      	movs	r2, #1
 8004974:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004976:	4b11      	ldr	r3, [pc, #68]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800497c:	4a0c      	ldr	r2, [pc, #48]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004982:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b01      	cmp	r3, #1
 800498c:	d11e      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800498e:	f7fd fd63 	bl	8002458 <HAL_GetTick>
 8004992:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004994:	e014      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004996:	f7fd fd5f 	bl	8002458 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d90b      	bls.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e03f      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x338>
 80049ac:	42470068 	.word	0x42470068
 80049b0:	40023800 	.word	0x40023800
 80049b4:	42470070 	.word	0x42470070
 80049b8:	40007000 	.word	0x40007000
 80049bc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c0:	4b1c      	ldr	r3, [pc, #112]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80049c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0e4      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049d8:	d10d      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x302>
 80049da:	4b16      	ldr	r3, [pc, #88]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ee:	4911      	ldr	r1, [pc, #68]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	608b      	str	r3, [r1, #8]
 80049f4:	e005      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80049f6:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	4a0e      	ldr	r2, [pc, #56]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80049fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a00:	6093      	str	r3, [r2, #8]
 8004a02:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a0e:	4909      	ldr	r1, [pc, #36]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d004      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004a26:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004a28:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40023800 	.word	0x40023800
 8004a38:	424711e0 	.word	0x424711e0

08004a3c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e025      	b.n	8004a9c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d106      	bne.n	8004a6a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f001 ff51 	bl	800690c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	f000 fde7 	bl	8005650 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6839      	ldr	r1, [r7, #0]
 8004a8e:	f000 fe52 	bl	8005736 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d101      	bne.n	8004ac0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004abc:	2302      	movs	r3, #2
 8004abe:	e018      	b.n	8004af2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 feaf 	bl	8005834 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d104      	bne.n	8004ae8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2205      	movs	r2, #5
 8004ae2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004ae6:	e003      	b.n	8004af0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d101      	bne.n	8004b14 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004b10:	2302      	movs	r3, #2
 8004b12:	e00e      	b.n	8004b32 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6839      	ldr	r1, [r7, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fec2 	bl	80058ac <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e056      	b.n	8004bfa <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f001 fdd8 	bl	800671c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	ea42 0103 	orr.w	r1, r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	0c1b      	lsrs	r3, r3, #16
 8004bca:	f003 0104 	and.w	r1, r3, #4
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004be8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e01a      	b.n	8004c4a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c2a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f001 fdbd 	bl	80067ac <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b088      	sub	sp, #32
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	603b      	str	r3, [r7, #0]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_SPI_Transmit+0x22>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e11e      	b.n	8004eb2 <HAL_SPI_Transmit+0x260>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c7c:	f7fd fbec 	bl	8002458 <HAL_GetTick>
 8004c80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d002      	beq.n	8004c98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c92:	2302      	movs	r3, #2
 8004c94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c96:	e103      	b.n	8004ea0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_SPI_Transmit+0x52>
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ca8:	e0fa      	b.n	8004ea0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2203      	movs	r2, #3
 8004cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	88fa      	ldrh	r2, [r7, #6]
 8004cc2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	88fa      	ldrh	r2, [r7, #6]
 8004cc8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf0:	d107      	bne.n	8004d02 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0c:	2b40      	cmp	r3, #64	; 0x40
 8004d0e:	d007      	beq.n	8004d20 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d28:	d14b      	bne.n	8004dc2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_SPI_Transmit+0xe6>
 8004d32:	8afb      	ldrh	r3, [r7, #22]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d13e      	bne.n	8004db6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	881a      	ldrh	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	1c9a      	adds	r2, r3, #2
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d5c:	e02b      	b.n	8004db6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d112      	bne.n	8004d92 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d70:	881a      	ldrh	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7c:	1c9a      	adds	r2, r3, #2
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d90:	e011      	b.n	8004db6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d92:	f7fd fb61 	bl	8002458 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d803      	bhi.n	8004daa <HAL_SPI_Transmit+0x158>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da8:	d102      	bne.n	8004db0 <HAL_SPI_Transmit+0x15e>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004db4:	e074      	b.n	8004ea0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1ce      	bne.n	8004d5e <HAL_SPI_Transmit+0x10c>
 8004dc0:	e04c      	b.n	8004e5c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_SPI_Transmit+0x17e>
 8004dca:	8afb      	ldrh	r3, [r7, #22]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d140      	bne.n	8004e52 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	330c      	adds	r3, #12
 8004dda:	7812      	ldrb	r2, [r2, #0]
 8004ddc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004df6:	e02c      	b.n	8004e52 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d113      	bne.n	8004e2e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	330c      	adds	r3, #12
 8004e10:	7812      	ldrb	r2, [r2, #0]
 8004e12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e2c:	e011      	b.n	8004e52 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e2e:	f7fd fb13 	bl	8002458 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d803      	bhi.n	8004e46 <HAL_SPI_Transmit+0x1f4>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e44:	d102      	bne.n	8004e4c <HAL_SPI_Transmit+0x1fa>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e50:	e026      	b.n	8004ea0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1cd      	bne.n	8004df8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	6839      	ldr	r1, [r7, #0]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 fbb3 	bl	80055cc <SPI_EndRxTxTransaction>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	77fb      	strb	r3, [r7, #31]
 8004e9c:	e000      	b.n	8004ea0 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004e9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004eb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3720      	adds	r7, #32
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b088      	sub	sp, #32
 8004ebe:	af02      	add	r7, sp, #8
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	603b      	str	r3, [r7, #0]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ed6:	d112      	bne.n	8004efe <HAL_SPI_Receive+0x44>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10e      	bne.n	8004efe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f8e9 	bl	80050cc <HAL_SPI_TransmitReceive>
 8004efa:	4603      	mov	r3, r0
 8004efc:	e0e2      	b.n	80050c4 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <HAL_SPI_Receive+0x52>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e0db      	b.n	80050c4 <HAL_SPI_Receive+0x20a>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f14:	f7fd faa0 	bl	8002458 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d002      	beq.n	8004f2c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004f26:	2302      	movs	r3, #2
 8004f28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f2a:	e0c2      	b.n	80050b2 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <HAL_SPI_Receive+0x7e>
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d102      	bne.n	8004f3e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f3c:	e0b9      	b.n	80050b2 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2204      	movs	r2, #4
 8004f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	88fa      	ldrh	r2, [r7, #6]
 8004f56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	88fa      	ldrh	r2, [r7, #6]
 8004f5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f84:	d107      	bne.n	8004f96 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b40      	cmp	r3, #64	; 0x40
 8004fa2:	d007      	beq.n	8004fb4 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fb2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d162      	bne.n	8005082 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004fbc:	e02e      	b.n	800501c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d115      	bne.n	8004ff8 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f103 020c 	add.w	r2, r3, #12
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	7812      	ldrb	r2, [r2, #0]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ff6:	e011      	b.n	800501c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ff8:	f7fd fa2e 	bl	8002458 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d803      	bhi.n	8005010 <HAL_SPI_Receive+0x156>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500e:	d102      	bne.n	8005016 <HAL_SPI_Receive+0x15c>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d102      	bne.n	800501c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	75fb      	strb	r3, [r7, #23]
          goto error;
 800501a:	e04a      	b.n	80050b2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1cb      	bne.n	8004fbe <HAL_SPI_Receive+0x104>
 8005026:	e031      	b.n	800508c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b01      	cmp	r3, #1
 8005034:	d113      	bne.n	800505e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	b292      	uxth	r2, r2
 8005042:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	1c9a      	adds	r2, r3, #2
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800505c:	e011      	b.n	8005082 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800505e:	f7fd f9fb 	bl	8002458 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d803      	bhi.n	8005076 <HAL_SPI_Receive+0x1bc>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005074:	d102      	bne.n	800507c <HAL_SPI_Receive+0x1c2>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d102      	bne.n	8005082 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005080:	e017      	b.n	80050b2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005086:	b29b      	uxth	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1cd      	bne.n	8005028 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	6839      	ldr	r1, [r7, #0]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 fa35 	bl	8005500 <SPI_EndRxTransaction>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2220      	movs	r2, #32
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	75fb      	strb	r3, [r7, #23]
 80050ae:	e000      	b.n	80050b2 <HAL_SPI_Receive+0x1f8>
  }

error :
 80050b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08c      	sub	sp, #48	; 0x30
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050da:	2301      	movs	r3, #1
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_SPI_TransmitReceive+0x26>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e18a      	b.n	8005408 <HAL_SPI_TransmitReceive+0x33c>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050fa:	f7fd f9ad 	bl	8002458 <HAL_GetTick>
 80050fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005110:	887b      	ldrh	r3, [r7, #2]
 8005112:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005114:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005118:	2b01      	cmp	r3, #1
 800511a:	d00f      	beq.n	800513c <HAL_SPI_TransmitReceive+0x70>
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005122:	d107      	bne.n	8005134 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d103      	bne.n	8005134 <HAL_SPI_TransmitReceive+0x68>
 800512c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005130:	2b04      	cmp	r3, #4
 8005132:	d003      	beq.n	800513c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005134:	2302      	movs	r3, #2
 8005136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800513a:	e15b      	b.n	80053f4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d005      	beq.n	800514e <HAL_SPI_TransmitReceive+0x82>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_SPI_TransmitReceive+0x82>
 8005148:	887b      	ldrh	r3, [r7, #2]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d103      	bne.n	8005156 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005154:	e14e      	b.n	80053f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b04      	cmp	r3, #4
 8005160:	d003      	beq.n	800516a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2205      	movs	r2, #5
 8005166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	887a      	ldrh	r2, [r7, #2]
 800517a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	887a      	ldrh	r2, [r7, #2]
 8005180:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	887a      	ldrh	r2, [r7, #2]
 800518c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	887a      	ldrh	r2, [r7, #2]
 8005192:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051aa:	2b40      	cmp	r3, #64	; 0x40
 80051ac:	d007      	beq.n	80051be <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c6:	d178      	bne.n	80052ba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <HAL_SPI_TransmitReceive+0x10a>
 80051d0:	8b7b      	ldrh	r3, [r7, #26]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d166      	bne.n	80052a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	881a      	ldrh	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	1c9a      	adds	r2, r3, #2
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051fa:	e053      	b.n	80052a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b02      	cmp	r3, #2
 8005208:	d11b      	bne.n	8005242 <HAL_SPI_TransmitReceive+0x176>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d016      	beq.n	8005242 <HAL_SPI_TransmitReceive+0x176>
 8005214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005216:	2b01      	cmp	r3, #1
 8005218:	d113      	bne.n	8005242 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	881a      	ldrh	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	1c9a      	adds	r2, r3, #2
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b01      	cmp	r3, #1
 800524e:	d119      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x1b8>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d014      	beq.n	8005284 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	b292      	uxth	r2, r2
 8005266:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	1c9a      	adds	r2, r3, #2
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005280:	2301      	movs	r3, #1
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005284:	f7fd f8e8 	bl	8002458 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005290:	429a      	cmp	r2, r3
 8005292:	d807      	bhi.n	80052a4 <HAL_SPI_TransmitReceive+0x1d8>
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529a:	d003      	beq.n	80052a4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052a2:	e0a7      	b.n	80053f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1a6      	bne.n	80051fc <HAL_SPI_TransmitReceive+0x130>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1a1      	bne.n	80051fc <HAL_SPI_TransmitReceive+0x130>
 80052b8:	e07c      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <HAL_SPI_TransmitReceive+0x1fc>
 80052c2:	8b7b      	ldrh	r3, [r7, #26]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d16b      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330c      	adds	r3, #12
 80052d2:	7812      	ldrb	r2, [r2, #0]
 80052d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052ee:	e057      	b.n	80053a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d11c      	bne.n	8005338 <HAL_SPI_TransmitReceive+0x26c>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d017      	beq.n	8005338 <HAL_SPI_TransmitReceive+0x26c>
 8005308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530a:	2b01      	cmp	r3, #1
 800530c:	d114      	bne.n	8005338 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	330c      	adds	r3, #12
 8005318:	7812      	ldrb	r2, [r2, #0]
 800531a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b01      	cmp	r3, #1
 8005344:	d119      	bne.n	800537a <HAL_SPI_TransmitReceive+0x2ae>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d014      	beq.n	800537a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005376:	2301      	movs	r3, #1
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800537a:	f7fd f86d 	bl	8002458 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005386:	429a      	cmp	r2, r3
 8005388:	d803      	bhi.n	8005392 <HAL_SPI_TransmitReceive+0x2c6>
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005390:	d102      	bne.n	8005398 <HAL_SPI_TransmitReceive+0x2cc>
 8005392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005394:	2b00      	cmp	r3, #0
 8005396:	d103      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800539e:	e029      	b.n	80053f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1a2      	bne.n	80052f0 <HAL_SPI_TransmitReceive+0x224>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d19d      	bne.n	80052f0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f907 	bl	80055cc <SPI_EndRxTxTransaction>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d006      	beq.n	80053d2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80053d0:	e010      	b.n	80053f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10b      	bne.n	80053f2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	e000      	b.n	80053f4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80053f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005404:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005408:	4618      	mov	r0, r3
 800540a:	3730      	adds	r7, #48	; 0x30
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800541e:	b2db      	uxtb	r3, r3
}
 8005420:	4618      	mov	r0, r3
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800543c:	e04c      	b.n	80054d8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005444:	d048      	beq.n	80054d8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005446:	f7fd f807 	bl	8002458 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d902      	bls.n	800545c <SPI_WaitFlagStateUntilTimeout+0x30>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d13d      	bne.n	80054d8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800546a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005474:	d111      	bne.n	800549a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800547e:	d004      	beq.n	800548a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005488:	d107      	bne.n	800549a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005498:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054a2:	d10f      	bne.n	80054c4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e00f      	b.n	80054f8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4013      	ands	r3, r2
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	bf0c      	ite	eq
 80054e8:	2301      	moveq	r3, #1
 80054ea:	2300      	movne	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d1a3      	bne.n	800543e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af02      	add	r7, sp, #8
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005514:	d111      	bne.n	800553a <SPI_EndRxTransaction+0x3a>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800551e:	d004      	beq.n	800552a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005528:	d107      	bne.n	800553a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005538:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005542:	d12a      	bne.n	800559a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554c:	d012      	beq.n	8005574 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2200      	movs	r2, #0
 8005556:	2180      	movs	r1, #128	; 0x80
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f7ff ff67 	bl	800542c <SPI_WaitFlagStateUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d02d      	beq.n	80055c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005568:	f043 0220 	orr.w	r2, r3, #32
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e026      	b.n	80055c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2200      	movs	r2, #0
 800557c:	2101      	movs	r1, #1
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f7ff ff54 	bl	800542c <SPI_WaitFlagStateUntilTimeout>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01a      	beq.n	80055c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558e:	f043 0220 	orr.w	r2, r3, #32
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e013      	b.n	80055c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2200      	movs	r2, #0
 80055a2:	2101      	movs	r1, #1
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7ff ff41 	bl	800542c <SPI_WaitFlagStateUntilTimeout>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d007      	beq.n	80055c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b4:	f043 0220 	orr.w	r2, r3, #32
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e000      	b.n	80055c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af02      	add	r7, sp, #8
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80055d8:	4b1b      	ldr	r3, [pc, #108]	; (8005648 <SPI_EndRxTxTransaction+0x7c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a1b      	ldr	r2, [pc, #108]	; (800564c <SPI_EndRxTxTransaction+0x80>)
 80055de:	fba2 2303 	umull	r2, r3, r2, r3
 80055e2:	0d5b      	lsrs	r3, r3, #21
 80055e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055e8:	fb02 f303 	mul.w	r3, r2, r3
 80055ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f6:	d112      	bne.n	800561e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2200      	movs	r2, #0
 8005600:	2180      	movs	r1, #128	; 0x80
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f7ff ff12 	bl	800542c <SPI_WaitFlagStateUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d016      	beq.n	800563c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005612:	f043 0220 	orr.w	r2, r3, #32
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e00f      	b.n	800563e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00a      	beq.n	800563a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	3b01      	subs	r3, #1
 8005628:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005634:	2b80      	cmp	r3, #128	; 0x80
 8005636:	d0f2      	beq.n	800561e <SPI_EndRxTxTransaction+0x52>
 8005638:	e000      	b.n	800563c <SPI_EndRxTxTransaction+0x70>
        break;
 800563a:	bf00      	nop
  }

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	2000005c 	.word	0x2000005c
 800564c:	165e9f81 	.word	0x165e9f81

08005650 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d029      	beq.n	80056be <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005676:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800567a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005684:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800568a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8005690:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8005696:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800569c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80056a2:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80056a8:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80056ae:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	e034      	b.n	8005728 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056ca:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80056d4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80056da:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80056ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80056f2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80056fc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8005702:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8005708:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800570e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8005714:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	4313      	orrs	r3, r2
 800571a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005736:	b480      	push	{r7}
 8005738:	b087      	sub	sp, #28
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d02e      	beq.n	80057ae <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800575c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	3b01      	subs	r3, #1
 800576a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800576c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	3b01      	subs	r3, #1
 8005774:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005776:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	3b01      	subs	r3, #1
 800577e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005780:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	3b01      	subs	r3, #1
 8005788:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800578a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	3b01      	subs	r3, #1
 8005792:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005794:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	3b01      	subs	r3, #1
 800579c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800579e:	4313      	orrs	r3, r2
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	609a      	str	r2, [r3, #8]
 80057ac:	e03b      	b.n	8005826 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057be:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	3b01      	subs	r3, #1
 80057ce:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80057d0:	4313      	orrs	r3, r2
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80057e4:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80057f4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80057fe:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	3b01      	subs	r3, #1
 8005806:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005808:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	3b01      	subs	r3, #1
 8005810:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005812:	4313      	orrs	r3, r2
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	371c      	adds	r7, #28
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005850:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	3b01      	subs	r3, #1
 8005858:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800585a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800586c:	f7fc fdf4 	bl	8002458 <HAL_GetTick>
 8005870:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005872:	e010      	b.n	8005896 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587a:	d00c      	beq.n	8005896 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <FMC_SDRAM_SendCommand+0x5e>
 8005882:	f7fc fde9 	bl	8002458 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	429a      	cmp	r2, r3
 8005890:	d201      	bcs.n	8005896 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e006      	b.n	80058a4 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b20      	cmp	r3, #32
 80058a0:	d0e8      	beq.n	8005874 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	695a      	ldr	r2, [r3, #20]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <nr_pieter>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//nr pieter
void nr_pieter()
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80058d8:	480c      	ldr	r0, [pc, #48]	; (800590c <nr_pieter+0x38>)
 80058da:	f7fb ffa5 	bl	8001828 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(1, (uint8_t*)" 5 ");
 80058de:	490c      	ldr	r1, [pc, #48]	; (8005910 <nr_pieter+0x3c>)
 80058e0:	2001      	movs	r0, #1
 80058e2:	f7fc f929 	bl	8001b38 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(3, (uint8_t*)" 4 ");
 80058e6:	490b      	ldr	r1, [pc, #44]	; (8005914 <nr_pieter+0x40>)
 80058e8:	2003      	movs	r0, #3
 80058ea:	f7fc f925 	bl	8001b38 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(5, (uint8_t*)" 3 ");
 80058ee:	490a      	ldr	r1, [pc, #40]	; (8005918 <nr_pieter+0x44>)
 80058f0:	2005      	movs	r0, #5
 80058f2:	f7fc f921 	bl	8001b38 <BSP_LCD_DisplayStringAtLine>
    BSP_LCD_DisplayStringAtLine(7, (uint8_t*)" 2 ");
 80058f6:	4909      	ldr	r1, [pc, #36]	; (800591c <nr_pieter+0x48>)
 80058f8:	2007      	movs	r0, #7
 80058fa:	f7fc f91d 	bl	8001b38 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(9, (uint8_t*)" 1 ");
 80058fe:	4908      	ldr	r1, [pc, #32]	; (8005920 <nr_pieter+0x4c>)
 8005900:	2009      	movs	r0, #9
 8005902:	f7fc f919 	bl	8001b38 <BSP_LCD_DisplayStringAtLine>
}
 8005906:	bf00      	nop
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	ffff0000 	.word	0xffff0000
 8005910:	0800a580 	.word	0x0800a580
 8005914:	0800a584 	.word	0x0800a584
 8005918:	0800a588 	.word	0x0800a588
 800591c:	0800a58c 	.word	0x0800a58c
 8005920:	0800a590 	.word	0x0800a590

08005924 <komunikat>:

void komunikat()
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8005928:	4804      	ldr	r0, [pc, #16]	; (800593c <komunikat+0x18>)
 800592a:	f7fb ff7d 	bl	8001828 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(11, (uint8_t*)" Zamknij drzwi ");
 800592e:	4904      	ldr	r1, [pc, #16]	; (8005940 <komunikat+0x1c>)
 8005930:	200b      	movs	r0, #11
 8005932:	f7fc f901 	bl	8001b38 <BSP_LCD_DisplayStringAtLine>
}
 8005936:	bf00      	nop
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	ffff0000 	.word	0xffff0000
 8005940:	0800a594 	.word	0x0800a594

08005944 <przyciski>:

void przyciski()
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
	if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == GPIO_PIN_SET )
 8005948:	2104      	movs	r1, #4
 800594a:	481a      	ldr	r0, [pc, #104]	; (80059b4 <przyciski+0x70>)
 800594c:	f7fd fdc0 	bl	80034d0 <HAL_GPIO_ReadPin>
 8005950:	4603      	mov	r3, r0
 8005952:	2b01      	cmp	r3, #1
 8005954:	d102      	bne.n	800595c <przyciski+0x18>
		przycisk[0] = 1;
 8005956:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <przyciski+0x74>)
 8005958:	2201      	movs	r2, #1
 800595a:	701a      	strb	r2, [r3, #0]

	if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == GPIO_PIN_SET )
 800595c:	2110      	movs	r1, #16
 800595e:	4815      	ldr	r0, [pc, #84]	; (80059b4 <przyciski+0x70>)
 8005960:	f7fd fdb6 	bl	80034d0 <HAL_GPIO_ReadPin>
 8005964:	4603      	mov	r3, r0
 8005966:	2b01      	cmp	r3, #1
 8005968:	d102      	bne.n	8005970 <przyciski+0x2c>
		przycisk[1] = 1;
 800596a:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <przyciski+0x74>)
 800596c:	2201      	movs	r2, #1
 800596e:	705a      	strb	r2, [r3, #1]

	if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == GPIO_PIN_SET )
 8005970:	2140      	movs	r1, #64	; 0x40
 8005972:	4810      	ldr	r0, [pc, #64]	; (80059b4 <przyciski+0x70>)
 8005974:	f7fd fdac 	bl	80034d0 <HAL_GPIO_ReadPin>
 8005978:	4603      	mov	r3, r0
 800597a:	2b01      	cmp	r3, #1
 800597c:	d102      	bne.n	8005984 <przyciski+0x40>
		przycisk[2] = 1;
 800597e:	4b0e      	ldr	r3, [pc, #56]	; (80059b8 <przyciski+0x74>)
 8005980:	2201      	movs	r2, #1
 8005982:	709a      	strb	r2, [r3, #2]

	if( HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_2) == GPIO_PIN_SET )
 8005984:	2104      	movs	r1, #4
 8005986:	480d      	ldr	r0, [pc, #52]	; (80059bc <przyciski+0x78>)
 8005988:	f7fd fda2 	bl	80034d0 <HAL_GPIO_ReadPin>
 800598c:	4603      	mov	r3, r0
 800598e:	2b01      	cmp	r3, #1
 8005990:	d102      	bne.n	8005998 <przyciski+0x54>
		przycisk[3] = 1;
 8005992:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <przyciski+0x74>)
 8005994:	2201      	movs	r2, #1
 8005996:	70da      	strb	r2, [r3, #3]

	if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_SET )
 8005998:	f44f 7180 	mov.w	r1, #256	; 0x100
 800599c:	4808      	ldr	r0, [pc, #32]	; (80059c0 <przyciski+0x7c>)
 800599e:	f7fd fd97 	bl	80034d0 <HAL_GPIO_ReadPin>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d102      	bne.n	80059ae <przyciski+0x6a>
		przycisk[4] = 1;
 80059a8:	4b03      	ldr	r3, [pc, #12]	; (80059b8 <przyciski+0x74>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	711a      	strb	r2, [r3, #4]
}
 80059ae:	bf00      	nop
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	40021000 	.word	0x40021000
 80059b8:	200003f4 	.word	0x200003f4
 80059bc:	40021800 	.word	0x40021800
 80059c0:	40020800 	.word	0x40020800

080059c4 <drzwi>:

void drzwi()
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
	while( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) != GPIO_PIN_SET )
 80059c8:	e001      	b.n	80059ce <drzwi+0xa>
	{
		przyciski();
 80059ca:	f7ff ffbb 	bl	8005944 <przyciski>
	while( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) != GPIO_PIN_SET )
 80059ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80059d2:	4813      	ldr	r0, [pc, #76]	; (8005a20 <drzwi+0x5c>)
 80059d4:	f7fd fd7c 	bl	80034d0 <HAL_GPIO_ReadPin>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d1f5      	bne.n	80059ca <drzwi+0x6>
	}

	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80059de:	f04f 30ff 	mov.w	r0, #4294967295
 80059e2:	f7fb ff83 	bl	80018ec <BSP_LCD_Clear>
	nr_pieter();
 80059e6:	f7ff ff75 	bl	80058d4 <nr_pieter>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80059ea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80059ee:	f7fb ff1b 	bl	8001828 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(60, 24*(11-pietro*2)-rozdz, 60, 24);
 80059f2:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <drzwi+0x60>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	f1c3 030b 	rsb	r3, r3, #11
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	0052      	lsls	r2, r2, #1
 8005a02:	4413      	add	r3, r2
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	4b07      	ldr	r3, [pc, #28]	; (8005a28 <drzwi+0x64>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	b299      	uxth	r1, r3
 8005a12:	2318      	movs	r3, #24
 8005a14:	223c      	movs	r2, #60	; 0x3c
 8005a16:	203c      	movs	r0, #60	; 0x3c
 8005a18:	f7fc f8a6 	bl	8001b68 <BSP_LCD_FillRect>
}
 8005a1c:	bf00      	nop
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	40020000 	.word	0x40020000
 8005a24:	20000050 	.word	0x20000050
 8005a28:	20000054 	.word	0x20000054

08005a2c <pietro_wyzej>:

void pietro_wyzej()
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
	if(pietro < liczba_pieter)
 8005a30:	4b34      	ldr	r3, [pc, #208]	; (8005b04 <pietro_wyzej+0xd8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2205      	movs	r2, #5
 8005a36:	4293      	cmp	r3, r2
 8005a38:	da62      	bge.n	8005b00 <pietro_wyzej+0xd4>
	{
		  while(rozdz <= 48)
 8005a3a:	e03d      	b.n	8005ab8 <pietro_wyzej+0x8c>
		  {
			  przyciski();
 8005a3c:	f7ff ff82 	bl	8005944 <przyciski>

			  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005a40:	f04f 30ff 	mov.w	r0, #4294967295
 8005a44:	f7fb fef0 	bl	8001828 <BSP_LCD_SetTextColor>
			  BSP_LCD_FillRect(60, 24*(11-pietro*2)-rozdz+1, 60, 24);
 8005a48:	4b2e      	ldr	r3, [pc, #184]	; (8005b04 <pietro_wyzej+0xd8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	f1c3 030b 	rsb	r3, r3, #11
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	0052      	lsls	r2, r2, #1
 8005a58:	4413      	add	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	4b2a      	ldr	r3, [pc, #168]	; (8005b08 <pietro_wyzej+0xdc>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3301      	adds	r3, #1
 8005a6a:	b299      	uxth	r1, r3
 8005a6c:	2318      	movs	r3, #24
 8005a6e:	223c      	movs	r2, #60	; 0x3c
 8005a70:	203c      	movs	r0, #60	; 0x3c
 8005a72:	f7fc f879 	bl	8001b68 <BSP_LCD_FillRect>
			  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005a76:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005a7a:	f7fb fed5 	bl	8001828 <BSP_LCD_SetTextColor>
			  BSP_LCD_FillRect(60, 24*(11-pietro*2)-rozdz, 60, 24);
 8005a7e:	4b21      	ldr	r3, [pc, #132]	; (8005b04 <pietro_wyzej+0xd8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	f1c3 030b 	rsb	r3, r3, #11
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	0052      	lsls	r2, r2, #1
 8005a8e:	4413      	add	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	4b1c      	ldr	r3, [pc, #112]	; (8005b08 <pietro_wyzej+0xdc>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	b299      	uxth	r1, r3
 8005a9e:	2318      	movs	r3, #24
 8005aa0:	223c      	movs	r2, #60	; 0x3c
 8005aa2:	203c      	movs	r0, #60	; 0x3c
 8005aa4:	f7fc f860 	bl	8001b68 <BSP_LCD_FillRect>
			  ++rozdz;
 8005aa8:	4b17      	ldr	r3, [pc, #92]	; (8005b08 <pietro_wyzej+0xdc>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3301      	adds	r3, #1
 8005aae:	4a16      	ldr	r2, [pc, #88]	; (8005b08 <pietro_wyzej+0xdc>)
 8005ab0:	6013      	str	r3, [r2, #0]
			  HAL_Delay(50);
 8005ab2:	2032      	movs	r0, #50	; 0x32
 8005ab4:	f7fc fcdc 	bl	8002470 <HAL_Delay>
		  while(rozdz <= 48)
 8005ab8:	4b13      	ldr	r3, [pc, #76]	; (8005b08 <pietro_wyzej+0xdc>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b30      	cmp	r3, #48	; 0x30
 8005abe:	ddbd      	ble.n	8005a3c <pietro_wyzej+0x10>
		  }

		  ++pietro;
 8005ac0:	4b10      	ldr	r3, [pc, #64]	; (8005b04 <pietro_wyzej+0xd8>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	4a0f      	ldr	r2, [pc, #60]	; (8005b04 <pietro_wyzej+0xd8>)
 8005ac8:	6013      	str	r3, [r2, #0]
		  rozdz = 1;
 8005aca:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <pietro_wyzej+0xdc>)
 8005acc:	2201      	movs	r2, #1
 8005ace:	601a      	str	r2, [r3, #0]

		  if(przycisk[pietro-1] == 1)
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <pietro_wyzej+0xd8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	4a0d      	ldr	r2, [pc, #52]	; (8005b0c <pietro_wyzej+0xe0>)
 8005ad8:	5cd3      	ldrb	r3, [r2, r3]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d009      	beq.n	8005af2 <pietro_wyzej+0xc6>
          {
              komunikat();
 8005ade:	f7ff ff21 	bl	8005924 <komunikat>
              drzwi();
 8005ae2:	f7ff ff6f 	bl	80059c4 <drzwi>
              przycisk[ pietro-1 ] = 0;
 8005ae6:	4b07      	ldr	r3, [pc, #28]	; (8005b04 <pietro_wyzej+0xd8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	4a07      	ldr	r2, [pc, #28]	; (8005b0c <pietro_wyzej+0xe0>)
 8005aee:	2100      	movs	r1, #0
 8005af0:	54d1      	strb	r1, [r2, r3]
          }

		  if(pietro == 5)
 8005af2:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <pietro_wyzej+0xd8>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b05      	cmp	r3, #5
 8005af8:	d102      	bne.n	8005b00 <pietro_wyzej+0xd4>
			  kierunek = 0;
 8005afa:	4b05      	ldr	r3, [pc, #20]	; (8005b10 <pietro_wyzej+0xe4>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
	}
}
 8005b00:	bf00      	nop
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000050 	.word	0x20000050
 8005b08:	20000054 	.word	0x20000054
 8005b0c:	200003f4 	.word	0x200003f4
 8005b10:	20000058 	.word	0x20000058

08005b14 <pietro_nizej>:

void pietro_nizej()
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
	if(pietro > 1)
 8005b18:	4b35      	ldr	r3, [pc, #212]	; (8005bf0 <pietro_nizej+0xdc>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	dd65      	ble.n	8005bec <pietro_nizej+0xd8>
	{
		  rozdz = 48;
 8005b20:	4b34      	ldr	r3, [pc, #208]	; (8005bf4 <pietro_nizej+0xe0>)
 8005b22:	2230      	movs	r2, #48	; 0x30
 8005b24:	601a      	str	r2, [r3, #0]
		  --pietro;
 8005b26:	4b32      	ldr	r3, [pc, #200]	; (8005bf0 <pietro_nizej+0xdc>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	4a30      	ldr	r2, [pc, #192]	; (8005bf0 <pietro_nizej+0xdc>)
 8005b2e:	6013      	str	r3, [r2, #0]

		  while(rozdz > 0)
 8005b30:	e03d      	b.n	8005bae <pietro_nizej+0x9a>
		  {
			  przyciski();
 8005b32:	f7ff ff07 	bl	8005944 <przyciski>

			  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005b36:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3a:	f7fb fe75 	bl	8001828 <BSP_LCD_SetTextColor>
			  BSP_LCD_FillRect(60, 24*(11-pietro*2)-rozdz-1, 60, 24);
 8005b3e:	4b2c      	ldr	r3, [pc, #176]	; (8005bf0 <pietro_nizej+0xdc>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	f1c3 030b 	rsb	r3, r3, #11
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	0052      	lsls	r2, r2, #1
 8005b4e:	4413      	add	r3, r2
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	4b27      	ldr	r3, [pc, #156]	; (8005bf4 <pietro_nizej+0xe0>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b299      	uxth	r1, r3
 8005b62:	2318      	movs	r3, #24
 8005b64:	223c      	movs	r2, #60	; 0x3c
 8005b66:	203c      	movs	r0, #60	; 0x3c
 8005b68:	f7fb fffe 	bl	8001b68 <BSP_LCD_FillRect>
			  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005b6c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005b70:	f7fb fe5a 	bl	8001828 <BSP_LCD_SetTextColor>
			  BSP_LCD_FillRect(60, 24*(11-pietro*2)-rozdz, 60, 24);
 8005b74:	4b1e      	ldr	r3, [pc, #120]	; (8005bf0 <pietro_nizej+0xdc>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	f1c3 030b 	rsb	r3, r3, #11
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	0052      	lsls	r2, r2, #1
 8005b84:	4413      	add	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	4b1a      	ldr	r3, [pc, #104]	; (8005bf4 <pietro_nizej+0xe0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	b299      	uxth	r1, r3
 8005b94:	2318      	movs	r3, #24
 8005b96:	223c      	movs	r2, #60	; 0x3c
 8005b98:	203c      	movs	r0, #60	; 0x3c
 8005b9a:	f7fb ffe5 	bl	8001b68 <BSP_LCD_FillRect>
			  --rozdz;
 8005b9e:	4b15      	ldr	r3, [pc, #84]	; (8005bf4 <pietro_nizej+0xe0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	4a13      	ldr	r2, [pc, #76]	; (8005bf4 <pietro_nizej+0xe0>)
 8005ba6:	6013      	str	r3, [r2, #0]
			  HAL_Delay(50);
 8005ba8:	2032      	movs	r0, #50	; 0x32
 8005baa:	f7fc fc61 	bl	8002470 <HAL_Delay>
		  while(rozdz > 0)
 8005bae:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <pietro_nizej+0xe0>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	dcbd      	bgt.n	8005b32 <pietro_nizej+0x1e>
		  }

		  rozdz = 1;
 8005bb6:	4b0f      	ldr	r3, [pc, #60]	; (8005bf4 <pietro_nizej+0xe0>)
 8005bb8:	2201      	movs	r2, #1
 8005bba:	601a      	str	r2, [r3, #0]

		  if(przycisk[pietro-1] == 1)
 8005bbc:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <pietro_nizej+0xdc>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	4a0d      	ldr	r2, [pc, #52]	; (8005bf8 <pietro_nizej+0xe4>)
 8005bc4:	5cd3      	ldrb	r3, [r2, r3]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d009      	beq.n	8005bde <pietro_nizej+0xca>
          {
              komunikat();
 8005bca:	f7ff feab 	bl	8005924 <komunikat>
              drzwi();
 8005bce:	f7ff fef9 	bl	80059c4 <drzwi>
              przycisk[ pietro-1 ] = 0;
 8005bd2:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <pietro_nizej+0xdc>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	4a07      	ldr	r2, [pc, #28]	; (8005bf8 <pietro_nizej+0xe4>)
 8005bda:	2100      	movs	r1, #0
 8005bdc:	54d1      	strb	r1, [r2, r3]
          }

		  if(pietro == 1)
 8005bde:	4b04      	ldr	r3, [pc, #16]	; (8005bf0 <pietro_nizej+0xdc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d102      	bne.n	8005bec <pietro_nizej+0xd8>
			  kierunek = 1;
 8005be6:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <pietro_nizej+0xe8>)
 8005be8:	2201      	movs	r2, #1
 8005bea:	701a      	strb	r2, [r3, #0]
	}
}
 8005bec:	bf00      	nop
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	20000050 	.word	0x20000050
 8005bf4:	20000054 	.word	0x20000054
 8005bf8:	200003f4 	.word	0x200003f4
 8005bfc:	20000058 	.word	0x20000058

08005c00 <pietro_min>:

int pietro_min()
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
	for(int i=0; i<liczba_pieter; i++)
 8005c06:	2300      	movs	r3, #0
 8005c08:	607b      	str	r3, [r7, #4]
 8005c0a:	e00b      	b.n	8005c24 <pietro_min+0x24>
	{
		if( przycisk[i] == 1 )
 8005c0c:	4a0b      	ldr	r2, [pc, #44]	; (8005c3c <pietro_min+0x3c>)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4413      	add	r3, r2
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <pietro_min+0x1e>
		{
			return i+1;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	e007      	b.n	8005c2e <pietro_min+0x2e>
	for(int i=0; i<liczba_pieter; i++)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3301      	adds	r3, #1
 8005c22:	607b      	str	r3, [r7, #4]
 8005c24:	2205      	movs	r2, #5
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	dbef      	blt.n	8005c0c <pietro_min+0xc>
		}
	}

	return 0;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	200003f4 	.word	0x200003f4

08005c40 <pietro_max>:

int pietro_max()
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
	for(int i=liczba_pieter-1; i>=0; i--)
 8005c46:	2305      	movs	r3, #5
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	607b      	str	r3, [r7, #4]
 8005c4c:	e00b      	b.n	8005c66 <pietro_max+0x26>
	{
		if( przycisk[i] == 1 )
 8005c4e:	4a0b      	ldr	r2, [pc, #44]	; (8005c7c <pietro_max+0x3c>)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4413      	add	r3, r2
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <pietro_max+0x20>
		{
			return i+1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	e006      	b.n	8005c6e <pietro_max+0x2e>
	for(int i=liczba_pieter-1; i>=0; i--)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	607b      	str	r3, [r7, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	daf0      	bge.n	8005c4e <pietro_max+0xe>
		}
	}

	return 0;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	200003f4 	.word	0x200003f4

08005c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c84:	f7fc fb82 	bl	800238c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c88:	f000 f890 	bl	8005dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c8c:	f000 fac0 	bl	8006210 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8005c90:	f000 f916 	bl	8005ec0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8005c94:	f000 fa6e 	bl	8006174 <MX_FMC_Init>
  MX_I2C3_Init();
 8005c98:	f000 f944 	bl	8005f24 <MX_I2C3_Init>
  MX_LTDC_Init();
 8005c9c:	f000 f982 	bl	8005fa4 <MX_LTDC_Init>
  MX_SPI5_Init();
 8005ca0:	f000 fa32 	bl	8006108 <MX_SPI5_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BSP_LCD_Init();
 8005ca4:	f7fb fcda 	bl	800165c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 8005ca8:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8005cac:	2000      	movs	r0, #0
 8005cae:	f7fb fd57 	bl	8001760 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8005cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb6:	f7fb fe19 	bl	80018ec <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8005cba:	4835      	ldr	r0, [pc, #212]	; (8005d90 <main+0x110>)
 8005cbc:	f7fb fdcc 	bl	8001858 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8005cc0:	4834      	ldr	r0, [pc, #208]	; (8005d94 <main+0x114>)
 8005cc2:	f7fb fdb1 	bl	8001828 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font24);
 8005cc6:	4834      	ldr	r0, [pc, #208]	; (8005d98 <main+0x118>)
 8005cc8:	f7fb fde0 	bl	800188c <BSP_LCD_SetFont>

  //nr pieter
  nr_pieter();
 8005ccc:	f7ff fe02 	bl	80058d4 <nr_pieter>
  komunikat();
 8005cd0:	f7ff fe28 	bl	8005924 <komunikat>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005cd4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005cd8:	f7fb fda6 	bl	8001828 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(60, 24*(11-pietro*2), 60, 24);
 8005cdc:	4b2f      	ldr	r3, [pc, #188]	; (8005d9c <main+0x11c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	f1c3 030b 	rsb	r3, r3, #11
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	461a      	mov	r2, r3
 8005cea:	0052      	lsls	r2, r2, #1
 8005cec:	4413      	add	r3, r2
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	b299      	uxth	r1, r3
 8005cf2:	2318      	movs	r3, #24
 8005cf4:	223c      	movs	r2, #60	; 0x3c
 8005cf6:	203c      	movs	r0, #60	; 0x3c
 8005cf8:	f7fb ff36 	bl	8001b68 <BSP_LCD_FillRect>

  drzwi();
 8005cfc:	f7ff fe62 	bl	80059c4 <drzwi>

  while (1)
  {

	    przyciski();
 8005d00:	f7ff fe20 	bl	8005944 <przyciski>

	  	min = pietro_min();
 8005d04:	f7ff ff7c 	bl	8005c00 <pietro_min>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	4b25      	ldr	r3, [pc, #148]	; (8005da0 <main+0x120>)
 8005d0c:	601a      	str	r2, [r3, #0]
	  	max = pietro_max();
 8005d0e:	f7ff ff97 	bl	8005c40 <pietro_max>
 8005d12:	4602      	mov	r2, r0
 8005d14:	4b23      	ldr	r3, [pc, #140]	; (8005da4 <main+0x124>)
 8005d16:	601a      	str	r2, [r3, #0]

	  	if(kierunek == 0 && min > pietro)
 8005d18:	4b23      	ldr	r3, [pc, #140]	; (8005da8 <main+0x128>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	f083 0301 	eor.w	r3, r3, #1
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <main+0xb8>
 8005d26:	4b1e      	ldr	r3, [pc, #120]	; (8005da0 <main+0x120>)
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	4b1c      	ldr	r3, [pc, #112]	; (8005d9c <main+0x11c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	dd02      	ble.n	8005d38 <main+0xb8>
	  		kierunek = 1;
 8005d32:	4b1d      	ldr	r3, [pc, #116]	; (8005da8 <main+0x128>)
 8005d34:	2201      	movs	r2, #1
 8005d36:	701a      	strb	r2, [r3, #0]

	  	if(kierunek == 1 && max < pietro)
 8005d38:	4b1b      	ldr	r3, [pc, #108]	; (8005da8 <main+0x128>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d008      	beq.n	8005d52 <main+0xd2>
 8005d40:	4b18      	ldr	r3, [pc, #96]	; (8005da4 <main+0x124>)
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	4b15      	ldr	r3, [pc, #84]	; (8005d9c <main+0x11c>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	da02      	bge.n	8005d52 <main+0xd2>
	  		kierunek = 0;
 8005d4c:	4b16      	ldr	r3, [pc, #88]	; (8005da8 <main+0x128>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	701a      	strb	r2, [r3, #0]

	  	if( (max > 0 || min > 0) && (max != pietro && min != pietro) )
 8005d52:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <main+0x124>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	dc03      	bgt.n	8005d62 <main+0xe2>
 8005d5a:	4b11      	ldr	r3, [pc, #68]	; (8005da0 <main+0x120>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	ddce      	ble.n	8005d00 <main+0x80>
 8005d62:	4b10      	ldr	r3, [pc, #64]	; (8005da4 <main+0x124>)
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	4b0d      	ldr	r3, [pc, #52]	; (8005d9c <main+0x11c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d0c8      	beq.n	8005d00 <main+0x80>
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <main+0x120>)
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <main+0x11c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d0c2      	beq.n	8005d00 <main+0x80>
	  	{
	  		if(kierunek)
 8005d7a:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <main+0x128>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <main+0x108>
	  			pietro_wyzej();
 8005d82:	f7ff fe53 	bl	8005a2c <pietro_wyzej>
 8005d86:	e7bb      	b.n	8005d00 <main+0x80>
	  		else
	  			pietro_nizej();
 8005d88:	f7ff fec4 	bl	8005b14 <pietro_nizej>
	    przyciski();
 8005d8c:	e7b8      	b.n	8005d00 <main+0x80>
 8005d8e:	bf00      	nop
 8005d90:	ff0000ff 	.word	0xff0000ff
 8005d94:	ffff0000 	.word	0xffff0000
 8005d98:	2000003c 	.word	0x2000003c
 8005d9c:	20000050 	.word	0x20000050
 8005da0:	20000614 	.word	0x20000614
 8005da4:	20000610 	.word	0x20000610
 8005da8:	20000058 	.word	0x20000058

08005dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b0a0      	sub	sp, #128	; 0x80
 8005db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005db2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005db6:	2230      	movs	r2, #48	; 0x30
 8005db8:	2100      	movs	r1, #0
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fe94 	bl	8006ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005dc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	605a      	str	r2, [r3, #4]
 8005dca:	609a      	str	r2, [r3, #8]
 8005dcc:	60da      	str	r2, [r3, #12]
 8005dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005dd0:	f107 030c 	add.w	r3, r7, #12
 8005dd4:	2230      	movs	r2, #48	; 0x30
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 fe85 	bl	8006ae8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dde:	2300      	movs	r3, #0
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	4b35      	ldr	r3, [pc, #212]	; (8005eb8 <SystemClock_Config+0x10c>)
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	4a34      	ldr	r2, [pc, #208]	; (8005eb8 <SystemClock_Config+0x10c>)
 8005de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dec:	6413      	str	r3, [r2, #64]	; 0x40
 8005dee:	4b32      	ldr	r3, [pc, #200]	; (8005eb8 <SystemClock_Config+0x10c>)
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df6:	60bb      	str	r3, [r7, #8]
 8005df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	607b      	str	r3, [r7, #4]
 8005dfe:	4b2f      	ldr	r3, [pc, #188]	; (8005ebc <SystemClock_Config+0x110>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a2e      	ldr	r2, [pc, #184]	; (8005ebc <SystemClock_Config+0x110>)
 8005e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	4b2c      	ldr	r3, [pc, #176]	; (8005ebc <SystemClock_Config+0x110>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e12:	607b      	str	r3, [r7, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005e16:	2301      	movs	r3, #1
 8005e18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e1e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e20:	2302      	movs	r3, #2
 8005e22:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e28:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005e2a:	2304      	movs	r3, #4
 8005e2c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005e2e:	23b4      	movs	r3, #180	; 0xb4
 8005e30:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005e32:	2302      	movs	r3, #2
 8005e34:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005e36:	2304      	movs	r3, #4
 8005e38:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fe f83c 	bl	8003ebc <HAL_RCC_OscConfig>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005e4a:	f000 fa9d 	bl	8006388 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005e4e:	f7fd ffe5 	bl	8003e1c <HAL_PWREx_EnableOverDrive>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8005e58:	f000 fa96 	bl	8006388 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e5c:	230f      	movs	r3, #15
 8005e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e60:	2302      	movs	r3, #2
 8005e62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e64:	2300      	movs	r3, #0
 8005e66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005e68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005e6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e72:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005e74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005e78:	2105      	movs	r1, #5
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fe fa60 	bl	8004340 <HAL_RCC_ClockConfig>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8005e86:	f000 fa7f 	bl	8006388 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005e8a:	2308      	movs	r3, #8
 8005e8c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 166;
 8005e8e:	23a6      	movs	r3, #166	; 0xa6
 8005e90:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8005e92:	2302      	movs	r3, #2
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8005e96:	2300      	movs	r3, #0
 8005e98:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e9a:	f107 030c 	add.w	r3, r7, #12
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fe fc28 	bl	80046f4 <HAL_RCCEx_PeriphCLKConfig>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <SystemClock_Config+0x102>
  {
    Error_Handler();
 8005eaa:	f000 fa6d 	bl	8006388 <Error_Handler>
  }
}
 8005eae:	bf00      	nop
 8005eb0:	3780      	adds	r7, #128	; 0x80
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	40007000 	.word	0x40007000

08005ec0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8005ec4:	4b15      	ldr	r3, [pc, #84]	; (8005f1c <MX_DMA2D_Init+0x5c>)
 8005ec6:	4a16      	ldr	r2, [pc, #88]	; (8005f20 <MX_DMA2D_Init+0x60>)
 8005ec8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8005eca:	4b14      	ldr	r3, [pc, #80]	; (8005f1c <MX_DMA2D_Init+0x5c>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8005ed0:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <MX_DMA2D_Init+0x5c>)
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8005ed6:	4b11      	ldr	r3, [pc, #68]	; (8005f1c <MX_DMA2D_Init+0x5c>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8005edc:	4b0f      	ldr	r3, [pc, #60]	; (8005f1c <MX_DMA2D_Init+0x5c>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8005ee2:	4b0e      	ldr	r3, [pc, #56]	; (8005f1c <MX_DMA2D_Init+0x5c>)
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <MX_DMA2D_Init+0x5c>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8005eee:	4b0b      	ldr	r3, [pc, #44]	; (8005f1c <MX_DMA2D_Init+0x5c>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8005ef4:	4809      	ldr	r0, [pc, #36]	; (8005f1c <MX_DMA2D_Init+0x5c>)
 8005ef6:	f7fc fdab 	bl	8002a50 <HAL_DMA2D_Init>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8005f00:	f000 fa42 	bl	8006388 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8005f04:	2101      	movs	r1, #1
 8005f06:	4805      	ldr	r0, [pc, #20]	; (8005f1c <MX_DMA2D_Init+0x5c>)
 8005f08:	f7fc ff00 	bl	8002d0c <HAL_DMA2D_ConfigLayer>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8005f12:	f000 fa39 	bl	8006388 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8005f16:	bf00      	nop
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000618 	.word	0x20000618
 8005f20:	4002b000 	.word	0x4002b000

08005f24 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005f28:	4b1b      	ldr	r3, [pc, #108]	; (8005f98 <MX_I2C3_Init+0x74>)
 8005f2a:	4a1c      	ldr	r2, [pc, #112]	; (8005f9c <MX_I2C3_Init+0x78>)
 8005f2c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005f2e:	4b1a      	ldr	r3, [pc, #104]	; (8005f98 <MX_I2C3_Init+0x74>)
 8005f30:	4a1b      	ldr	r2, [pc, #108]	; (8005fa0 <MX_I2C3_Init+0x7c>)
 8005f32:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005f34:	4b18      	ldr	r3, [pc, #96]	; (8005f98 <MX_I2C3_Init+0x74>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005f3a:	4b17      	ldr	r3, [pc, #92]	; (8005f98 <MX_I2C3_Init+0x74>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005f40:	4b15      	ldr	r3, [pc, #84]	; (8005f98 <MX_I2C3_Init+0x74>)
 8005f42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f46:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005f48:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <MX_I2C3_Init+0x74>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005f4e:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <MX_I2C3_Init+0x74>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005f54:	4b10      	ldr	r3, [pc, #64]	; (8005f98 <MX_I2C3_Init+0x74>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005f5a:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <MX_I2C3_Init+0x74>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005f60:	480d      	ldr	r0, [pc, #52]	; (8005f98 <MX_I2C3_Init+0x74>)
 8005f62:	f7fd fae7 	bl	8003534 <HAL_I2C_Init>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005f6c:	f000 fa0c 	bl	8006388 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005f70:	2100      	movs	r1, #0
 8005f72:	4809      	ldr	r0, [pc, #36]	; (8005f98 <MX_I2C3_Init+0x74>)
 8005f74:	f7fd fc06 	bl	8003784 <HAL_I2CEx_ConfigAnalogFilter>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8005f7e:	f000 fa03 	bl	8006388 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8005f82:	2100      	movs	r1, #0
 8005f84:	4804      	ldr	r0, [pc, #16]	; (8005f98 <MX_I2C3_Init+0x74>)
 8005f86:	f7fd fc39 	bl	80037fc <HAL_I2CEx_ConfigDigitalFilter>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8005f90:	f000 f9fa 	bl	8006388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005f94:	bf00      	nop
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	200004bc 	.word	0x200004bc
 8005f9c:	40005c00 	.word	0x40005c00
 8005fa0:	000186a0 	.word	0x000186a0

08005fa4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b09a      	sub	sp, #104	; 0x68
 8005fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8005faa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005fae:	2234      	movs	r2, #52	; 0x34
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fd98 	bl	8006ae8 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8005fb8:	463b      	mov	r3, r7
 8005fba:	2234      	movs	r2, #52	; 0x34
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fd92 	bl	8006ae8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8005fc4:	4b4e      	ldr	r3, [pc, #312]	; (8006100 <MX_LTDC_Init+0x15c>)
 8005fc6:	4a4f      	ldr	r2, [pc, #316]	; (8006104 <MX_LTDC_Init+0x160>)
 8005fc8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005fca:	4b4d      	ldr	r3, [pc, #308]	; (8006100 <MX_LTDC_Init+0x15c>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005fd0:	4b4b      	ldr	r3, [pc, #300]	; (8006100 <MX_LTDC_Init+0x15c>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8005fd6:	4b4a      	ldr	r3, [pc, #296]	; (8006100 <MX_LTDC_Init+0x15c>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005fdc:	4b48      	ldr	r3, [pc, #288]	; (8006100 <MX_LTDC_Init+0x15c>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8005fe2:	4b47      	ldr	r3, [pc, #284]	; (8006100 <MX_LTDC_Init+0x15c>)
 8005fe4:	2207      	movs	r2, #7
 8005fe6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8005fe8:	4b45      	ldr	r3, [pc, #276]	; (8006100 <MX_LTDC_Init+0x15c>)
 8005fea:	2203      	movs	r2, #3
 8005fec:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8005fee:	4b44      	ldr	r3, [pc, #272]	; (8006100 <MX_LTDC_Init+0x15c>)
 8005ff0:	220e      	movs	r2, #14
 8005ff2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8005ff4:	4b42      	ldr	r3, [pc, #264]	; (8006100 <MX_LTDC_Init+0x15c>)
 8005ff6:	2205      	movs	r2, #5
 8005ff8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 254;
 8005ffa:	4b41      	ldr	r3, [pc, #260]	; (8006100 <MX_LTDC_Init+0x15c>)
 8005ffc:	22fe      	movs	r2, #254	; 0xfe
 8005ffe:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 325;
 8006000:	4b3f      	ldr	r3, [pc, #252]	; (8006100 <MX_LTDC_Init+0x15c>)
 8006002:	f240 1245 	movw	r2, #325	; 0x145
 8006006:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 260;
 8006008:	4b3d      	ldr	r3, [pc, #244]	; (8006100 <MX_LTDC_Init+0x15c>)
 800600a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800600e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8006010:	4b3b      	ldr	r3, [pc, #236]	; (8006100 <MX_LTDC_Init+0x15c>)
 8006012:	f240 1247 	movw	r2, #327	; 0x147
 8006016:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8006018:	4b39      	ldr	r3, [pc, #228]	; (8006100 <MX_LTDC_Init+0x15c>)
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8006020:	4b37      	ldr	r3, [pc, #220]	; (8006100 <MX_LTDC_Init+0x15c>)
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8006028:	4b35      	ldr	r3, [pc, #212]	; (8006100 <MX_LTDC_Init+0x15c>)
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8006030:	4833      	ldr	r0, [pc, #204]	; (8006100 <MX_LTDC_Init+0x15c>)
 8006032:	f7fd fc23 	bl	800387c <HAL_LTDC_Init>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <MX_LTDC_Init+0x9c>
  {
    Error_Handler();
 800603c:	f000 f9a4 	bl	8006388 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8006040:	2300      	movs	r3, #0
 8006042:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8006044:	2300      	movs	r3, #0
 8006046:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006050:	2300      	movs	r3, #0
 8006052:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800605c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006060:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8006062:	2305      	movs	r3, #5
 8006064:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800606a:	2300      	movs	r3, #0
 800606c:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800606e:	2300      	movs	r3, #0
 8006070:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8006072:	2300      	movs	r3, #0
 8006074:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8006078:	2300      	movs	r3, #0
 800607a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800607e:	2300      	movs	r3, #0
 8006080:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8006084:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006088:	2200      	movs	r2, #0
 800608a:	4619      	mov	r1, r3
 800608c:	481c      	ldr	r0, [pc, #112]	; (8006100 <MX_LTDC_Init+0x15c>)
 800608e:	f7fd fcc5 	bl	8003a1c <HAL_LTDC_ConfigLayer>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8006098:	f000 f976 	bl	8006388 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80060ac:	2300      	movs	r3, #0
 80060ae:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80060b0:	2300      	movs	r3, #0
 80060b2:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80060b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060bc:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80060be:	2305      	movs	r3, #5
 80060c0:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80060c2:	2300      	movs	r3, #0
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80060ce:	2300      	movs	r3, #0
 80060d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80060e0:	463b      	mov	r3, r7
 80060e2:	2201      	movs	r2, #1
 80060e4:	4619      	mov	r1, r3
 80060e6:	4806      	ldr	r0, [pc, #24]	; (8006100 <MX_LTDC_Init+0x15c>)
 80060e8:	f7fd fc98 	bl	8003a1c <HAL_LTDC_ConfigLayer>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <MX_LTDC_Init+0x152>
  {
    Error_Handler();
 80060f2:	f000 f949 	bl	8006388 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80060f6:	bf00      	nop
 80060f8:	3768      	adds	r7, #104	; 0x68
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000568 	.word	0x20000568
 8006104:	40016800 	.word	0x40016800

08006108 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800610c:	4b17      	ldr	r3, [pc, #92]	; (800616c <MX_SPI5_Init+0x64>)
 800610e:	4a18      	ldr	r2, [pc, #96]	; (8006170 <MX_SPI5_Init+0x68>)
 8006110:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8006112:	4b16      	ldr	r3, [pc, #88]	; (800616c <MX_SPI5_Init+0x64>)
 8006114:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006118:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800611a:	4b14      	ldr	r3, [pc, #80]	; (800616c <MX_SPI5_Init+0x64>)
 800611c:	2200      	movs	r2, #0
 800611e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8006120:	4b12      	ldr	r3, [pc, #72]	; (800616c <MX_SPI5_Init+0x64>)
 8006122:	2200      	movs	r2, #0
 8006124:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006126:	4b11      	ldr	r3, [pc, #68]	; (800616c <MX_SPI5_Init+0x64>)
 8006128:	2200      	movs	r2, #0
 800612a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800612c:	4b0f      	ldr	r3, [pc, #60]	; (800616c <MX_SPI5_Init+0x64>)
 800612e:	2200      	movs	r2, #0
 8006130:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8006132:	4b0e      	ldr	r3, [pc, #56]	; (800616c <MX_SPI5_Init+0x64>)
 8006134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006138:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800613a:	4b0c      	ldr	r3, [pc, #48]	; (800616c <MX_SPI5_Init+0x64>)
 800613c:	2200      	movs	r2, #0
 800613e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006140:	4b0a      	ldr	r3, [pc, #40]	; (800616c <MX_SPI5_Init+0x64>)
 8006142:	2200      	movs	r2, #0
 8006144:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8006146:	4b09      	ldr	r3, [pc, #36]	; (800616c <MX_SPI5_Init+0x64>)
 8006148:	2200      	movs	r2, #0
 800614a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800614c:	4b07      	ldr	r3, [pc, #28]	; (800616c <MX_SPI5_Init+0x64>)
 800614e:	2200      	movs	r2, #0
 8006150:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8006152:	4b06      	ldr	r3, [pc, #24]	; (800616c <MX_SPI5_Init+0x64>)
 8006154:	220a      	movs	r2, #10
 8006156:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8006158:	4804      	ldr	r0, [pc, #16]	; (800616c <MX_SPI5_Init+0x64>)
 800615a:	f7fe fcee 	bl	8004b3a <HAL_SPI_Init>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8006164:	f000 f910 	bl	8006388 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8006168:	bf00      	nop
 800616a:	bd80      	pop	{r7, pc}
 800616c:	20000510 	.word	0x20000510
 8006170:	40015000 	.word	0x40015000

08006174 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800617a:	1d3b      	adds	r3, r7, #4
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	609a      	str	r2, [r3, #8]
 8006184:	60da      	str	r2, [r3, #12]
 8006186:	611a      	str	r2, [r3, #16]
 8006188:	615a      	str	r2, [r3, #20]
 800618a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800618c:	4b1e      	ldr	r3, [pc, #120]	; (8006208 <MX_FMC_Init+0x94>)
 800618e:	4a1f      	ldr	r2, [pc, #124]	; (800620c <MX_FMC_Init+0x98>)
 8006190:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8006192:	4b1d      	ldr	r3, [pc, #116]	; (8006208 <MX_FMC_Init+0x94>)
 8006194:	2201      	movs	r2, #1
 8006196:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006198:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <MX_FMC_Init+0x94>)
 800619a:	2200      	movs	r2, #0
 800619c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800619e:	4b1a      	ldr	r3, [pc, #104]	; (8006208 <MX_FMC_Init+0x94>)
 80061a0:	2204      	movs	r2, #4
 80061a2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80061a4:	4b18      	ldr	r3, [pc, #96]	; (8006208 <MX_FMC_Init+0x94>)
 80061a6:	2210      	movs	r2, #16
 80061a8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80061aa:	4b17      	ldr	r3, [pc, #92]	; (8006208 <MX_FMC_Init+0x94>)
 80061ac:	2240      	movs	r2, #64	; 0x40
 80061ae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80061b0:	4b15      	ldr	r3, [pc, #84]	; (8006208 <MX_FMC_Init+0x94>)
 80061b2:	2280      	movs	r2, #128	; 0x80
 80061b4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <MX_FMC_Init+0x94>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80061bc:	4b12      	ldr	r3, [pc, #72]	; (8006208 <MX_FMC_Init+0x94>)
 80061be:	2200      	movs	r2, #0
 80061c0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80061c2:	4b11      	ldr	r3, [pc, #68]	; (8006208 <MX_FMC_Init+0x94>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80061c8:	4b0f      	ldr	r3, [pc, #60]	; (8006208 <MX_FMC_Init+0x94>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80061ce:	2310      	movs	r3, #16
 80061d0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80061d2:	2310      	movs	r3, #16
 80061d4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80061d6:	2310      	movs	r3, #16
 80061d8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80061da:	2310      	movs	r3, #16
 80061dc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80061de:	2310      	movs	r3, #16
 80061e0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80061e2:	2310      	movs	r3, #16
 80061e4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80061e6:	2310      	movs	r3, #16
 80061e8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80061ea:	1d3b      	adds	r3, r7, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4806      	ldr	r0, [pc, #24]	; (8006208 <MX_FMC_Init+0x94>)
 80061f0:	f7fe fc24 	bl	8004a3c <HAL_SDRAM_Init>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80061fa:	f000 f8c5 	bl	8006388 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80061fe:	bf00      	nop
 8006200:	3720      	adds	r7, #32
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000658 	.word	0x20000658
 800620c:	a0000140 	.word	0xa0000140

08006210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08e      	sub	sp, #56	; 0x38
 8006214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	605a      	str	r2, [r3, #4]
 8006220:	609a      	str	r2, [r3, #8]
 8006222:	60da      	str	r2, [r3, #12]
 8006224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006226:	2300      	movs	r3, #0
 8006228:	623b      	str	r3, [r7, #32]
 800622a:	4b52      	ldr	r3, [pc, #328]	; (8006374 <MX_GPIO_Init+0x164>)
 800622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622e:	4a51      	ldr	r2, [pc, #324]	; (8006374 <MX_GPIO_Init+0x164>)
 8006230:	f043 0310 	orr.w	r3, r3, #16
 8006234:	6313      	str	r3, [r2, #48]	; 0x30
 8006236:	4b4f      	ldr	r3, [pc, #316]	; (8006374 <MX_GPIO_Init+0x164>)
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	623b      	str	r3, [r7, #32]
 8006240:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006242:	2300      	movs	r3, #0
 8006244:	61fb      	str	r3, [r7, #28]
 8006246:	4b4b      	ldr	r3, [pc, #300]	; (8006374 <MX_GPIO_Init+0x164>)
 8006248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624a:	4a4a      	ldr	r2, [pc, #296]	; (8006374 <MX_GPIO_Init+0x164>)
 800624c:	f043 0320 	orr.w	r3, r3, #32
 8006250:	6313      	str	r3, [r2, #48]	; 0x30
 8006252:	4b48      	ldr	r3, [pc, #288]	; (8006374 <MX_GPIO_Init+0x164>)
 8006254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	61fb      	str	r3, [r7, #28]
 800625c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800625e:	2300      	movs	r3, #0
 8006260:	61bb      	str	r3, [r7, #24]
 8006262:	4b44      	ldr	r3, [pc, #272]	; (8006374 <MX_GPIO_Init+0x164>)
 8006264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006266:	4a43      	ldr	r2, [pc, #268]	; (8006374 <MX_GPIO_Init+0x164>)
 8006268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626c:	6313      	str	r3, [r2, #48]	; 0x30
 800626e:	4b41      	ldr	r3, [pc, #260]	; (8006374 <MX_GPIO_Init+0x164>)
 8006270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006276:	61bb      	str	r3, [r7, #24]
 8006278:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800627a:	2300      	movs	r3, #0
 800627c:	617b      	str	r3, [r7, #20]
 800627e:	4b3d      	ldr	r3, [pc, #244]	; (8006374 <MX_GPIO_Init+0x164>)
 8006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006282:	4a3c      	ldr	r2, [pc, #240]	; (8006374 <MX_GPIO_Init+0x164>)
 8006284:	f043 0304 	orr.w	r3, r3, #4
 8006288:	6313      	str	r3, [r2, #48]	; 0x30
 800628a:	4b3a      	ldr	r3, [pc, #232]	; (8006374 <MX_GPIO_Init+0x164>)
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	f003 0304 	and.w	r3, r3, #4
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006296:	2300      	movs	r3, #0
 8006298:	613b      	str	r3, [r7, #16]
 800629a:	4b36      	ldr	r3, [pc, #216]	; (8006374 <MX_GPIO_Init+0x164>)
 800629c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629e:	4a35      	ldr	r2, [pc, #212]	; (8006374 <MX_GPIO_Init+0x164>)
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	6313      	str	r3, [r2, #48]	; 0x30
 80062a6:	4b33      	ldr	r3, [pc, #204]	; (8006374 <MX_GPIO_Init+0x164>)
 80062a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	613b      	str	r3, [r7, #16]
 80062b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	4b2f      	ldr	r3, [pc, #188]	; (8006374 <MX_GPIO_Init+0x164>)
 80062b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ba:	4a2e      	ldr	r2, [pc, #184]	; (8006374 <MX_GPIO_Init+0x164>)
 80062bc:	f043 0302 	orr.w	r3, r3, #2
 80062c0:	6313      	str	r3, [r2, #48]	; 0x30
 80062c2:	4b2c      	ldr	r3, [pc, #176]	; (8006374 <MX_GPIO_Init+0x164>)
 80062c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80062ce:	2300      	movs	r3, #0
 80062d0:	60bb      	str	r3, [r7, #8]
 80062d2:	4b28      	ldr	r3, [pc, #160]	; (8006374 <MX_GPIO_Init+0x164>)
 80062d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d6:	4a27      	ldr	r2, [pc, #156]	; (8006374 <MX_GPIO_Init+0x164>)
 80062d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062dc:	6313      	str	r3, [r2, #48]	; 0x30
 80062de:	4b25      	ldr	r3, [pc, #148]	; (8006374 <MX_GPIO_Init+0x164>)
 80062e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e6:	60bb      	str	r3, [r7, #8]
 80062e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80062ea:	2300      	movs	r3, #0
 80062ec:	607b      	str	r3, [r7, #4]
 80062ee:	4b21      	ldr	r3, [pc, #132]	; (8006374 <MX_GPIO_Init+0x164>)
 80062f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f2:	4a20      	ldr	r2, [pc, #128]	; (8006374 <MX_GPIO_Init+0x164>)
 80062f4:	f043 0308 	orr.w	r3, r3, #8
 80062f8:	6313      	str	r3, [r2, #48]	; 0x30
 80062fa:	4b1e      	ldr	r3, [pc, #120]	; (8006374 <MX_GPIO_Init+0x164>)
 80062fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	607b      	str	r3, [r7, #4]
 8006304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE4 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8006306:	2354      	movs	r3, #84	; 0x54
 8006308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800630a:	2300      	movs	r3, #0
 800630c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800630e:	2300      	movs	r3, #0
 8006310:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006316:	4619      	mov	r1, r3
 8006318:	4817      	ldr	r0, [pc, #92]	; (8006378 <MX_GPIO_Init+0x168>)
 800631a:	f7fc fe25 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800631e:	2304      	movs	r3, #4
 8006320:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006322:	2300      	movs	r3, #0
 8006324:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006326:	2300      	movs	r3, #0
 8006328:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800632a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800632e:	4619      	mov	r1, r3
 8006330:	4812      	ldr	r0, [pc, #72]	; (800637c <MX_GPIO_Init+0x16c>)
 8006332:	f7fc fe19 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800633a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800633c:	2300      	movs	r3, #0
 800633e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006340:	2300      	movs	r3, #0
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006348:	4619      	mov	r1, r3
 800634a:	480d      	ldr	r0, [pc, #52]	; (8006380 <MX_GPIO_Init+0x170>)
 800634c:	f7fc fe0c 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006354:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006356:	2300      	movs	r3, #0
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800635a:	2300      	movs	r3, #0
 800635c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800635e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006362:	4619      	mov	r1, r3
 8006364:	4807      	ldr	r0, [pc, #28]	; (8006384 <MX_GPIO_Init+0x174>)
 8006366:	f7fc fdff 	bl	8002f68 <HAL_GPIO_Init>

}
 800636a:	bf00      	nop
 800636c:	3738      	adds	r7, #56	; 0x38
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	40023800 	.word	0x40023800
 8006378:	40021000 	.word	0x40021000
 800637c:	40021800 	.word	0x40021800
 8006380:	40020800 	.word	0x40020800
 8006384:	40020000 	.word	0x40020000

08006388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006388:	b480      	push	{r7}
 800638a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800638c:	bf00      	nop
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
	...

08006398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800639e:	2300      	movs	r3, #0
 80063a0:	607b      	str	r3, [r7, #4]
 80063a2:	4b10      	ldr	r3, [pc, #64]	; (80063e4 <HAL_MspInit+0x4c>)
 80063a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a6:	4a0f      	ldr	r2, [pc, #60]	; (80063e4 <HAL_MspInit+0x4c>)
 80063a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063ac:	6453      	str	r3, [r2, #68]	; 0x44
 80063ae:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <HAL_MspInit+0x4c>)
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b6:	607b      	str	r3, [r7, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063ba:	2300      	movs	r3, #0
 80063bc:	603b      	str	r3, [r7, #0]
 80063be:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <HAL_MspInit+0x4c>)
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	4a08      	ldr	r2, [pc, #32]	; (80063e4 <HAL_MspInit+0x4c>)
 80063c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c8:	6413      	str	r3, [r2, #64]	; 0x40
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <HAL_MspInit+0x4c>)
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40023800 	.word	0x40023800

080063e8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a0b      	ldr	r2, [pc, #44]	; (8006424 <HAL_DMA2D_MspInit+0x3c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d10d      	bne.n	8006416 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80063fa:	2300      	movs	r3, #0
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <HAL_DMA2D_MspInit+0x40>)
 8006400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006402:	4a09      	ldr	r2, [pc, #36]	; (8006428 <HAL_DMA2D_MspInit+0x40>)
 8006404:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006408:	6313      	str	r3, [r2, #48]	; 0x30
 800640a:	4b07      	ldr	r3, [pc, #28]	; (8006428 <HAL_DMA2D_MspInit+0x40>)
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8006416:	bf00      	nop
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	4002b000 	.word	0x4002b000
 8006428:	40023800 	.word	0x40023800

0800642c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b08a      	sub	sp, #40	; 0x28
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006434:	f107 0314 	add.w	r3, r7, #20
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	605a      	str	r2, [r3, #4]
 800643e:	609a      	str	r2, [r3, #8]
 8006440:	60da      	str	r2, [r3, #12]
 8006442:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a29      	ldr	r2, [pc, #164]	; (80064f0 <HAL_I2C_MspInit+0xc4>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d14b      	bne.n	80064e6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800644e:	2300      	movs	r3, #0
 8006450:	613b      	str	r3, [r7, #16]
 8006452:	4b28      	ldr	r3, [pc, #160]	; (80064f4 <HAL_I2C_MspInit+0xc8>)
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	4a27      	ldr	r2, [pc, #156]	; (80064f4 <HAL_I2C_MspInit+0xc8>)
 8006458:	f043 0304 	orr.w	r3, r3, #4
 800645c:	6313      	str	r3, [r2, #48]	; 0x30
 800645e:	4b25      	ldr	r3, [pc, #148]	; (80064f4 <HAL_I2C_MspInit+0xc8>)
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	4b21      	ldr	r3, [pc, #132]	; (80064f4 <HAL_I2C_MspInit+0xc8>)
 8006470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006472:	4a20      	ldr	r2, [pc, #128]	; (80064f4 <HAL_I2C_MspInit+0xc8>)
 8006474:	f043 0301 	orr.w	r3, r3, #1
 8006478:	6313      	str	r3, [r2, #48]	; 0x30
 800647a:	4b1e      	ldr	r3, [pc, #120]	; (80064f4 <HAL_I2C_MspInit+0xc8>)
 800647c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800648a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800648c:	2312      	movs	r3, #18
 800648e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006490:	2301      	movs	r3, #1
 8006492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006494:	2303      	movs	r3, #3
 8006496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006498:	2304      	movs	r3, #4
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800649c:	f107 0314 	add.w	r3, r7, #20
 80064a0:	4619      	mov	r1, r3
 80064a2:	4815      	ldr	r0, [pc, #84]	; (80064f8 <HAL_I2C_MspInit+0xcc>)
 80064a4:	f7fc fd60 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80064a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80064ae:	2312      	movs	r3, #18
 80064b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064b2:	2301      	movs	r3, #1
 80064b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064b6:	2303      	movs	r3, #3
 80064b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80064ba:	2304      	movs	r3, #4
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064be:	f107 0314 	add.w	r3, r7, #20
 80064c2:	4619      	mov	r1, r3
 80064c4:	480d      	ldr	r0, [pc, #52]	; (80064fc <HAL_I2C_MspInit+0xd0>)
 80064c6:	f7fc fd4f 	bl	8002f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80064ca:	2300      	movs	r3, #0
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <HAL_I2C_MspInit+0xc8>)
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	4a08      	ldr	r2, [pc, #32]	; (80064f4 <HAL_I2C_MspInit+0xc8>)
 80064d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064d8:	6413      	str	r3, [r2, #64]	; 0x40
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <HAL_I2C_MspInit+0xc8>)
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064e2:	60bb      	str	r3, [r7, #8]
 80064e4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80064e6:	bf00      	nop
 80064e8:	3728      	adds	r7, #40	; 0x28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	40005c00 	.word	0x40005c00
 80064f4:	40023800 	.word	0x40023800
 80064f8:	40020800 	.word	0x40020800
 80064fc:	40020000 	.word	0x40020000

08006500 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b08e      	sub	sp, #56	; 0x38
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	605a      	str	r2, [r3, #4]
 8006512:	609a      	str	r2, [r3, #8]
 8006514:	60da      	str	r2, [r3, #12]
 8006516:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a77      	ldr	r2, [pc, #476]	; (80066fc <HAL_LTDC_MspInit+0x1fc>)
 800651e:	4293      	cmp	r3, r2
 8006520:	f040 80e8 	bne.w	80066f4 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006524:	2300      	movs	r3, #0
 8006526:	623b      	str	r3, [r7, #32]
 8006528:	4b75      	ldr	r3, [pc, #468]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 800652a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652c:	4a74      	ldr	r2, [pc, #464]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 800652e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006532:	6453      	str	r3, [r2, #68]	; 0x44
 8006534:	4b72      	ldr	r3, [pc, #456]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 8006536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006538:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800653c:	623b      	str	r3, [r7, #32]
 800653e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006540:	2300      	movs	r3, #0
 8006542:	61fb      	str	r3, [r7, #28]
 8006544:	4b6e      	ldr	r3, [pc, #440]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	4a6d      	ldr	r2, [pc, #436]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 800654a:	f043 0320 	orr.w	r3, r3, #32
 800654e:	6313      	str	r3, [r2, #48]	; 0x30
 8006550:	4b6b      	ldr	r3, [pc, #428]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	61fb      	str	r3, [r7, #28]
 800655a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800655c:	2300      	movs	r3, #0
 800655e:	61bb      	str	r3, [r7, #24]
 8006560:	4b67      	ldr	r3, [pc, #412]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	4a66      	ldr	r2, [pc, #408]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 8006566:	f043 0301 	orr.w	r3, r3, #1
 800656a:	6313      	str	r3, [r2, #48]	; 0x30
 800656c:	4b64      	ldr	r3, [pc, #400]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	61bb      	str	r3, [r7, #24]
 8006576:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006578:	2300      	movs	r3, #0
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	4b60      	ldr	r3, [pc, #384]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	4a5f      	ldr	r2, [pc, #380]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 8006582:	f043 0302 	orr.w	r3, r3, #2
 8006586:	6313      	str	r3, [r2, #48]	; 0x30
 8006588:	4b5d      	ldr	r3, [pc, #372]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006594:	2300      	movs	r3, #0
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	4b59      	ldr	r3, [pc, #356]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	4a58      	ldr	r2, [pc, #352]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 800659e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a2:	6313      	str	r3, [r2, #48]	; 0x30
 80065a4:	4b56      	ldr	r3, [pc, #344]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065b0:	2300      	movs	r3, #0
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	4b52      	ldr	r3, [pc, #328]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 80065b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b8:	4a51      	ldr	r2, [pc, #324]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 80065ba:	f043 0304 	orr.w	r3, r3, #4
 80065be:	6313      	str	r3, [r2, #48]	; 0x30
 80065c0:	4b4f      	ldr	r3, [pc, #316]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 80065c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80065cc:	2300      	movs	r3, #0
 80065ce:	60bb      	str	r3, [r7, #8]
 80065d0:	4b4b      	ldr	r3, [pc, #300]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 80065d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d4:	4a4a      	ldr	r2, [pc, #296]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 80065d6:	f043 0308 	orr.w	r3, r3, #8
 80065da:	6313      	str	r3, [r2, #48]	; 0x30
 80065dc:	4b48      	ldr	r3, [pc, #288]	; (8006700 <HAL_LTDC_MspInit+0x200>)
 80065de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e0:	f003 0308 	and.w	r3, r3, #8
 80065e4:	60bb      	str	r3, [r7, #8]
 80065e6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80065e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ee:	2302      	movs	r3, #2
 80065f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065f6:	2300      	movs	r3, #0
 80065f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80065fa:	230e      	movs	r3, #14
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80065fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006602:	4619      	mov	r1, r3
 8006604:	483f      	ldr	r0, [pc, #252]	; (8006704 <HAL_LTDC_MspInit+0x204>)
 8006606:	f7fc fcaf 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 800660a:	f641 0358 	movw	r3, #6232	; 0x1858
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006610:	2302      	movs	r3, #2
 8006612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006614:	2300      	movs	r3, #0
 8006616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006618:	2300      	movs	r3, #0
 800661a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800661c:	230e      	movs	r3, #14
 800661e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006624:	4619      	mov	r1, r3
 8006626:	4838      	ldr	r0, [pc, #224]	; (8006708 <HAL_LTDC_MspInit+0x208>)
 8006628:	f7fc fc9e 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800662c:	2303      	movs	r3, #3
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006630:	2302      	movs	r3, #2
 8006632:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006634:	2300      	movs	r3, #0
 8006636:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006638:	2300      	movs	r3, #0
 800663a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800663c:	2309      	movs	r3, #9
 800663e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006644:	4619      	mov	r1, r3
 8006646:	4831      	ldr	r0, [pc, #196]	; (800670c <HAL_LTDC_MspInit+0x20c>)
 8006648:	f7fc fc8e 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 800664c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006652:	2302      	movs	r3, #2
 8006654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006656:	2300      	movs	r3, #0
 8006658:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800665a:	2300      	movs	r3, #0
 800665c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800665e:	230e      	movs	r3, #14
 8006660:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006666:	4619      	mov	r1, r3
 8006668:	4828      	ldr	r0, [pc, #160]	; (800670c <HAL_LTDC_MspInit+0x20c>)
 800666a:	f7fc fc7d 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 800666e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006674:	2302      	movs	r3, #2
 8006676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006678:	2300      	movs	r3, #0
 800667a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800667c:	2300      	movs	r3, #0
 800667e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006680:	230e      	movs	r3, #14
 8006682:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006688:	4619      	mov	r1, r3
 800668a:	4821      	ldr	r0, [pc, #132]	; (8006710 <HAL_LTDC_MspInit+0x210>)
 800668c:	f7fc fc6c 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8006690:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8006694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006696:	2302      	movs	r3, #2
 8006698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669a:	2300      	movs	r3, #0
 800669c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800669e:	2300      	movs	r3, #0
 80066a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80066a2:	230e      	movs	r3, #14
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066aa:	4619      	mov	r1, r3
 80066ac:	4819      	ldr	r0, [pc, #100]	; (8006714 <HAL_LTDC_MspInit+0x214>)
 80066ae:	f7fc fc5b 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80066b2:	2348      	movs	r3, #72	; 0x48
 80066b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066b6:	2302      	movs	r3, #2
 80066b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066be:	2300      	movs	r3, #0
 80066c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80066c2:	230e      	movs	r3, #14
 80066c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ca:	4619      	mov	r1, r3
 80066cc:	4812      	ldr	r0, [pc, #72]	; (8006718 <HAL_LTDC_MspInit+0x218>)
 80066ce:	f7fc fc4b 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80066d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066d8:	2302      	movs	r3, #2
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066dc:	2300      	movs	r3, #0
 80066de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066e0:	2300      	movs	r3, #0
 80066e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80066e4:	2309      	movs	r3, #9
 80066e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80066e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ec:	4619      	mov	r1, r3
 80066ee:	4808      	ldr	r0, [pc, #32]	; (8006710 <HAL_LTDC_MspInit+0x210>)
 80066f0:	f7fc fc3a 	bl	8002f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80066f4:	bf00      	nop
 80066f6:	3738      	adds	r7, #56	; 0x38
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40016800 	.word	0x40016800
 8006700:	40023800 	.word	0x40023800
 8006704:	40021400 	.word	0x40021400
 8006708:	40020000 	.word	0x40020000
 800670c:	40020400 	.word	0x40020400
 8006710:	40021800 	.word	0x40021800
 8006714:	40020800 	.word	0x40020800
 8006718:	40020c00 	.word	0x40020c00

0800671c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b08a      	sub	sp, #40	; 0x28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006724:	f107 0314 	add.w	r3, r7, #20
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	605a      	str	r2, [r3, #4]
 800672e:	609a      	str	r2, [r3, #8]
 8006730:	60da      	str	r2, [r3, #12]
 8006732:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a19      	ldr	r2, [pc, #100]	; (80067a0 <HAL_SPI_MspInit+0x84>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d12c      	bne.n	8006798 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800673e:	2300      	movs	r3, #0
 8006740:	613b      	str	r3, [r7, #16]
 8006742:	4b18      	ldr	r3, [pc, #96]	; (80067a4 <HAL_SPI_MspInit+0x88>)
 8006744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006746:	4a17      	ldr	r2, [pc, #92]	; (80067a4 <HAL_SPI_MspInit+0x88>)
 8006748:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800674c:	6453      	str	r3, [r2, #68]	; 0x44
 800674e:	4b15      	ldr	r3, [pc, #84]	; (80067a4 <HAL_SPI_MspInit+0x88>)
 8006750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006756:	613b      	str	r3, [r7, #16]
 8006758:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	4b11      	ldr	r3, [pc, #68]	; (80067a4 <HAL_SPI_MspInit+0x88>)
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	4a10      	ldr	r2, [pc, #64]	; (80067a4 <HAL_SPI_MspInit+0x88>)
 8006764:	f043 0320 	orr.w	r3, r3, #32
 8006768:	6313      	str	r3, [r2, #48]	; 0x30
 800676a:	4b0e      	ldr	r3, [pc, #56]	; (80067a4 <HAL_SPI_MspInit+0x88>)
 800676c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676e:	f003 0320 	and.w	r3, r3, #32
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8006776:	f44f 7360 	mov.w	r3, #896	; 0x380
 800677a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800677c:	2302      	movs	r3, #2
 800677e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006780:	2300      	movs	r3, #0
 8006782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006784:	2303      	movs	r3, #3
 8006786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006788:	2305      	movs	r3, #5
 800678a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800678c:	f107 0314 	add.w	r3, r7, #20
 8006790:	4619      	mov	r1, r3
 8006792:	4805      	ldr	r0, [pc, #20]	; (80067a8 <HAL_SPI_MspInit+0x8c>)
 8006794:	f7fc fbe8 	bl	8002f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8006798:	bf00      	nop
 800679a:	3728      	adds	r7, #40	; 0x28
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40015000 	.word	0x40015000
 80067a4:	40023800 	.word	0x40023800
 80067a8:	40021400 	.word	0x40021400

080067ac <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a08      	ldr	r2, [pc, #32]	; (80067dc <HAL_SPI_MspDeInit+0x30>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d10a      	bne.n	80067d4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80067be:	4b08      	ldr	r3, [pc, #32]	; (80067e0 <HAL_SPI_MspDeInit+0x34>)
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	4a07      	ldr	r2, [pc, #28]	; (80067e0 <HAL_SPI_MspDeInit+0x34>)
 80067c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80067c8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80067ca:	f44f 7160 	mov.w	r1, #896	; 0x380
 80067ce:	4805      	ldr	r0, [pc, #20]	; (80067e4 <HAL_SPI_MspDeInit+0x38>)
 80067d0:	f7fc fd74 	bl	80032bc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80067d4:	bf00      	nop
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	40015000 	.word	0x40015000
 80067e0:	40023800 	.word	0x40023800
 80067e4:	40021400 	.word	0x40021400

080067e8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80067ee:	1d3b      	adds	r3, r7, #4
 80067f0:	2200      	movs	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	605a      	str	r2, [r3, #4]
 80067f6:	609a      	str	r2, [r3, #8]
 80067f8:	60da      	str	r2, [r3, #12]
 80067fa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80067fc:	4b3b      	ldr	r3, [pc, #236]	; (80068ec <HAL_FMC_MspInit+0x104>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d16f      	bne.n	80068e4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8006804:	4b39      	ldr	r3, [pc, #228]	; (80068ec <HAL_FMC_MspInit+0x104>)
 8006806:	2201      	movs	r2, #1
 8006808:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800680a:	2300      	movs	r3, #0
 800680c:	603b      	str	r3, [r7, #0]
 800680e:	4b38      	ldr	r3, [pc, #224]	; (80068f0 <HAL_FMC_MspInit+0x108>)
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	4a37      	ldr	r2, [pc, #220]	; (80068f0 <HAL_FMC_MspInit+0x108>)
 8006814:	f043 0301 	orr.w	r3, r3, #1
 8006818:	6393      	str	r3, [r2, #56]	; 0x38
 800681a:	4b35      	ldr	r3, [pc, #212]	; (80068f0 <HAL_FMC_MspInit+0x108>)
 800681c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8006826:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800682a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800682c:	2302      	movs	r3, #2
 800682e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006834:	2303      	movs	r3, #3
 8006836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006838:	230c      	movs	r3, #12
 800683a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800683c:	1d3b      	adds	r3, r7, #4
 800683e:	4619      	mov	r1, r3
 8006840:	482c      	ldr	r0, [pc, #176]	; (80068f4 <HAL_FMC_MspInit+0x10c>)
 8006842:	f7fc fb91 	bl	8002f68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006846:	2301      	movs	r3, #1
 8006848:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800684a:	2302      	movs	r3, #2
 800684c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800684e:	2300      	movs	r3, #0
 8006850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006852:	2303      	movs	r3, #3
 8006854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006856:	230c      	movs	r3, #12
 8006858:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800685a:	1d3b      	adds	r3, r7, #4
 800685c:	4619      	mov	r1, r3
 800685e:	4826      	ldr	r0, [pc, #152]	; (80068f8 <HAL_FMC_MspInit+0x110>)
 8006860:	f7fc fb82 	bl	8002f68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8006864:	f248 1333 	movw	r3, #33075	; 0x8133
 8006868:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800686a:	2302      	movs	r3, #2
 800686c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006872:	2303      	movs	r3, #3
 8006874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006876:	230c      	movs	r3, #12
 8006878:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800687a:	1d3b      	adds	r3, r7, #4
 800687c:	4619      	mov	r1, r3
 800687e:	481f      	ldr	r0, [pc, #124]	; (80068fc <HAL_FMC_MspInit+0x114>)
 8006880:	f7fc fb72 	bl	8002f68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8006884:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006888:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800688a:	2302      	movs	r3, #2
 800688c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006892:	2303      	movs	r3, #3
 8006894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006896:	230c      	movs	r3, #12
 8006898:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800689a:	1d3b      	adds	r3, r7, #4
 800689c:	4619      	mov	r1, r3
 800689e:	4818      	ldr	r0, [pc, #96]	; (8006900 <HAL_FMC_MspInit+0x118>)
 80068a0:	f7fc fb62 	bl	8002f68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 80068a4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80068a8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068aa:	2302      	movs	r3, #2
 80068ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068b2:	2303      	movs	r3, #3
 80068b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80068b6:	230c      	movs	r3, #12
 80068b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80068ba:	1d3b      	adds	r3, r7, #4
 80068bc:	4619      	mov	r1, r3
 80068be:	4811      	ldr	r0, [pc, #68]	; (8006904 <HAL_FMC_MspInit+0x11c>)
 80068c0:	f7fc fb52 	bl	8002f68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80068c4:	2360      	movs	r3, #96	; 0x60
 80068c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068c8:	2302      	movs	r3, #2
 80068ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068cc:	2300      	movs	r3, #0
 80068ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068d0:	2303      	movs	r3, #3
 80068d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80068d4:	230c      	movs	r3, #12
 80068d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068d8:	1d3b      	adds	r3, r7, #4
 80068da:	4619      	mov	r1, r3
 80068dc:	480a      	ldr	r0, [pc, #40]	; (8006908 <HAL_FMC_MspInit+0x120>)
 80068de:	f7fc fb43 	bl	8002f68 <HAL_GPIO_Init>
 80068e2:	e000      	b.n	80068e6 <HAL_FMC_MspInit+0xfe>
    return;
 80068e4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	200003fc 	.word	0x200003fc
 80068f0:	40023800 	.word	0x40023800
 80068f4:	40021400 	.word	0x40021400
 80068f8:	40020800 	.word	0x40020800
 80068fc:	40021800 	.word	0x40021800
 8006900:	40021000 	.word	0x40021000
 8006904:	40020c00 	.word	0x40020c00
 8006908:	40020400 	.word	0x40020400

0800690c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8006914:	f7ff ff68 	bl	80067e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8006918:	bf00      	nop
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006924:	bf00      	nop
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800692e:	b480      	push	{r7}
 8006930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006932:	e7fe      	b.n	8006932 <HardFault_Handler+0x4>

08006934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006934:	b480      	push	{r7}
 8006936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006938:	e7fe      	b.n	8006938 <MemManage_Handler+0x4>

0800693a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800693a:	b480      	push	{r7}
 800693c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800693e:	e7fe      	b.n	800693e <BusFault_Handler+0x4>

08006940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006944:	e7fe      	b.n	8006944 <UsageFault_Handler+0x4>

08006946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006946:	b480      	push	{r7}
 8006948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800694a:	bf00      	nop
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006958:	bf00      	nop
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006962:	b480      	push	{r7}
 8006964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006966:	bf00      	nop
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006974:	f7fb fd5c 	bl	8002430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006978:	bf00      	nop
 800697a:	bd80      	pop	{r7, pc}

0800697c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006984:	4b11      	ldr	r3, [pc, #68]	; (80069cc <_sbrk+0x50>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <_sbrk+0x16>
		heap_end = &end;
 800698c:	4b0f      	ldr	r3, [pc, #60]	; (80069cc <_sbrk+0x50>)
 800698e:	4a10      	ldr	r2, [pc, #64]	; (80069d0 <_sbrk+0x54>)
 8006990:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006992:	4b0e      	ldr	r3, [pc, #56]	; (80069cc <_sbrk+0x50>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006998:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <_sbrk+0x50>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4413      	add	r3, r2
 80069a0:	466a      	mov	r2, sp
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d907      	bls.n	80069b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80069a6:	f000 f875 	bl	8006a94 <__errno>
 80069aa:	4602      	mov	r2, r0
 80069ac:	230c      	movs	r3, #12
 80069ae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80069b0:	f04f 33ff 	mov.w	r3, #4294967295
 80069b4:	e006      	b.n	80069c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80069b6:	4b05      	ldr	r3, [pc, #20]	; (80069cc <_sbrk+0x50>)
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4413      	add	r3, r2
 80069be:	4a03      	ldr	r2, [pc, #12]	; (80069cc <_sbrk+0x50>)
 80069c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80069c2:	68fb      	ldr	r3, [r7, #12]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	20000400 	.word	0x20000400
 80069d0:	20000690 	.word	0x20000690

080069d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80069d8:	4b16      	ldr	r3, [pc, #88]	; (8006a34 <SystemInit+0x60>)
 80069da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069de:	4a15      	ldr	r2, [pc, #84]	; (8006a34 <SystemInit+0x60>)
 80069e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80069e8:	4b13      	ldr	r3, [pc, #76]	; (8006a38 <SystemInit+0x64>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a12      	ldr	r2, [pc, #72]	; (8006a38 <SystemInit+0x64>)
 80069ee:	f043 0301 	orr.w	r3, r3, #1
 80069f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80069f4:	4b10      	ldr	r3, [pc, #64]	; (8006a38 <SystemInit+0x64>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80069fa:	4b0f      	ldr	r3, [pc, #60]	; (8006a38 <SystemInit+0x64>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a0e      	ldr	r2, [pc, #56]	; (8006a38 <SystemInit+0x64>)
 8006a00:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <SystemInit+0x64>)
 8006a0c:	4a0b      	ldr	r2, [pc, #44]	; (8006a3c <SystemInit+0x68>)
 8006a0e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006a10:	4b09      	ldr	r3, [pc, #36]	; (8006a38 <SystemInit+0x64>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a08      	ldr	r2, [pc, #32]	; (8006a38 <SystemInit+0x64>)
 8006a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006a1c:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <SystemInit+0x64>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006a22:	4b04      	ldr	r3, [pc, #16]	; (8006a34 <SystemInit+0x60>)
 8006a24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a28:	609a      	str	r2, [r3, #8]
#endif
}
 8006a2a:	bf00      	nop
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	e000ed00 	.word	0xe000ed00
 8006a38:	40023800 	.word	0x40023800
 8006a3c:	24003010 	.word	0x24003010

08006a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a78 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006a44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006a46:	e003      	b.n	8006a50 <LoopCopyDataInit>

08006a48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006a48:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006a4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006a4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006a4e:	3104      	adds	r1, #4

08006a50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006a50:	480b      	ldr	r0, [pc, #44]	; (8006a80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006a52:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006a54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006a56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006a58:	d3f6      	bcc.n	8006a48 <CopyDataInit>
  ldr  r2, =_sbss
 8006a5a:	4a0b      	ldr	r2, [pc, #44]	; (8006a88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006a5c:	e002      	b.n	8006a64 <LoopFillZerobss>

08006a5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006a5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006a60:	f842 3b04 	str.w	r3, [r2], #4

08006a64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006a64:	4b09      	ldr	r3, [pc, #36]	; (8006a8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006a66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006a68:	d3f9      	bcc.n	8006a5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006a6a:	f7ff ffb3 	bl	80069d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a6e:	f000 f817 	bl	8006aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006a72:	f7ff f905 	bl	8005c80 <main>
  bx  lr    
 8006a76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006a78:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8006a7c:	0800c340 	.word	0x0800c340
  ldr  r0, =_sdata
 8006a80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006a84:	20000230 	.word	0x20000230
  ldr  r2, =_sbss
 8006a88:	20000230 	.word	0x20000230
  ldr  r3, = _ebss
 8006a8c:	20000690 	.word	0x20000690

08006a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a90:	e7fe      	b.n	8006a90 <ADC_IRQHandler>
	...

08006a94 <__errno>:
 8006a94:	4b01      	ldr	r3, [pc, #4]	; (8006a9c <__errno+0x8>)
 8006a96:	6818      	ldr	r0, [r3, #0]
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	20000060 	.word	0x20000060

08006aa0 <__libc_init_array>:
 8006aa0:	b570      	push	{r4, r5, r6, lr}
 8006aa2:	4e0d      	ldr	r6, [pc, #52]	; (8006ad8 <__libc_init_array+0x38>)
 8006aa4:	4c0d      	ldr	r4, [pc, #52]	; (8006adc <__libc_init_array+0x3c>)
 8006aa6:	1ba4      	subs	r4, r4, r6
 8006aa8:	10a4      	asrs	r4, r4, #2
 8006aaa:	2500      	movs	r5, #0
 8006aac:	42a5      	cmp	r5, r4
 8006aae:	d109      	bne.n	8006ac4 <__libc_init_array+0x24>
 8006ab0:	4e0b      	ldr	r6, [pc, #44]	; (8006ae0 <__libc_init_array+0x40>)
 8006ab2:	4c0c      	ldr	r4, [pc, #48]	; (8006ae4 <__libc_init_array+0x44>)
 8006ab4:	f003 fd56 	bl	800a564 <_init>
 8006ab8:	1ba4      	subs	r4, r4, r6
 8006aba:	10a4      	asrs	r4, r4, #2
 8006abc:	2500      	movs	r5, #0
 8006abe:	42a5      	cmp	r5, r4
 8006ac0:	d105      	bne.n	8006ace <__libc_init_array+0x2e>
 8006ac2:	bd70      	pop	{r4, r5, r6, pc}
 8006ac4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ac8:	4798      	blx	r3
 8006aca:	3501      	adds	r5, #1
 8006acc:	e7ee      	b.n	8006aac <__libc_init_array+0xc>
 8006ace:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ad2:	4798      	blx	r3
 8006ad4:	3501      	adds	r5, #1
 8006ad6:	e7f2      	b.n	8006abe <__libc_init_array+0x1e>
 8006ad8:	0800c338 	.word	0x0800c338
 8006adc:	0800c338 	.word	0x0800c338
 8006ae0:	0800c338 	.word	0x0800c338
 8006ae4:	0800c33c 	.word	0x0800c33c

08006ae8 <memset>:
 8006ae8:	4402      	add	r2, r0
 8006aea:	4603      	mov	r3, r0
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d100      	bne.n	8006af2 <memset+0xa>
 8006af0:	4770      	bx	lr
 8006af2:	f803 1b01 	strb.w	r1, [r3], #1
 8006af6:	e7f9      	b.n	8006aec <memset+0x4>

08006af8 <__cvt>:
 8006af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006afc:	ec55 4b10 	vmov	r4, r5, d0
 8006b00:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006b02:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006b06:	2d00      	cmp	r5, #0
 8006b08:	460e      	mov	r6, r1
 8006b0a:	4691      	mov	r9, r2
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	bfb8      	it	lt
 8006b10:	4622      	movlt	r2, r4
 8006b12:	462b      	mov	r3, r5
 8006b14:	f027 0720 	bic.w	r7, r7, #32
 8006b18:	bfbb      	ittet	lt
 8006b1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006b1e:	461d      	movlt	r5, r3
 8006b20:	2300      	movge	r3, #0
 8006b22:	232d      	movlt	r3, #45	; 0x2d
 8006b24:	bfb8      	it	lt
 8006b26:	4614      	movlt	r4, r2
 8006b28:	2f46      	cmp	r7, #70	; 0x46
 8006b2a:	700b      	strb	r3, [r1, #0]
 8006b2c:	d004      	beq.n	8006b38 <__cvt+0x40>
 8006b2e:	2f45      	cmp	r7, #69	; 0x45
 8006b30:	d100      	bne.n	8006b34 <__cvt+0x3c>
 8006b32:	3601      	adds	r6, #1
 8006b34:	2102      	movs	r1, #2
 8006b36:	e000      	b.n	8006b3a <__cvt+0x42>
 8006b38:	2103      	movs	r1, #3
 8006b3a:	ab03      	add	r3, sp, #12
 8006b3c:	9301      	str	r3, [sp, #4]
 8006b3e:	ab02      	add	r3, sp, #8
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	4632      	mov	r2, r6
 8006b44:	4653      	mov	r3, sl
 8006b46:	ec45 4b10 	vmov	d0, r4, r5
 8006b4a:	f001 fd75 	bl	8008638 <_dtoa_r>
 8006b4e:	2f47      	cmp	r7, #71	; 0x47
 8006b50:	4680      	mov	r8, r0
 8006b52:	d102      	bne.n	8006b5a <__cvt+0x62>
 8006b54:	f019 0f01 	tst.w	r9, #1
 8006b58:	d026      	beq.n	8006ba8 <__cvt+0xb0>
 8006b5a:	2f46      	cmp	r7, #70	; 0x46
 8006b5c:	eb08 0906 	add.w	r9, r8, r6
 8006b60:	d111      	bne.n	8006b86 <__cvt+0x8e>
 8006b62:	f898 3000 	ldrb.w	r3, [r8]
 8006b66:	2b30      	cmp	r3, #48	; 0x30
 8006b68:	d10a      	bne.n	8006b80 <__cvt+0x88>
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4620      	mov	r0, r4
 8006b70:	4629      	mov	r1, r5
 8006b72:	f7f9 ffb9 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b76:	b918      	cbnz	r0, 8006b80 <__cvt+0x88>
 8006b78:	f1c6 0601 	rsb	r6, r6, #1
 8006b7c:	f8ca 6000 	str.w	r6, [sl]
 8006b80:	f8da 3000 	ldr.w	r3, [sl]
 8006b84:	4499      	add	r9, r3
 8006b86:	2200      	movs	r2, #0
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	f7f9 ffab 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b92:	b938      	cbnz	r0, 8006ba4 <__cvt+0xac>
 8006b94:	2230      	movs	r2, #48	; 0x30
 8006b96:	9b03      	ldr	r3, [sp, #12]
 8006b98:	454b      	cmp	r3, r9
 8006b9a:	d205      	bcs.n	8006ba8 <__cvt+0xb0>
 8006b9c:	1c59      	adds	r1, r3, #1
 8006b9e:	9103      	str	r1, [sp, #12]
 8006ba0:	701a      	strb	r2, [r3, #0]
 8006ba2:	e7f8      	b.n	8006b96 <__cvt+0x9e>
 8006ba4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ba8:	9b03      	ldr	r3, [sp, #12]
 8006baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bac:	eba3 0308 	sub.w	r3, r3, r8
 8006bb0:	4640      	mov	r0, r8
 8006bb2:	6013      	str	r3, [r2, #0]
 8006bb4:	b004      	add	sp, #16
 8006bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006bba <__exponent>:
 8006bba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bbc:	2900      	cmp	r1, #0
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	bfba      	itte	lt
 8006bc2:	4249      	neglt	r1, r1
 8006bc4:	232d      	movlt	r3, #45	; 0x2d
 8006bc6:	232b      	movge	r3, #43	; 0x2b
 8006bc8:	2909      	cmp	r1, #9
 8006bca:	f804 2b02 	strb.w	r2, [r4], #2
 8006bce:	7043      	strb	r3, [r0, #1]
 8006bd0:	dd20      	ble.n	8006c14 <__exponent+0x5a>
 8006bd2:	f10d 0307 	add.w	r3, sp, #7
 8006bd6:	461f      	mov	r7, r3
 8006bd8:	260a      	movs	r6, #10
 8006bda:	fb91 f5f6 	sdiv	r5, r1, r6
 8006bde:	fb06 1115 	mls	r1, r6, r5, r1
 8006be2:	3130      	adds	r1, #48	; 0x30
 8006be4:	2d09      	cmp	r5, #9
 8006be6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006bea:	f103 32ff 	add.w	r2, r3, #4294967295
 8006bee:	4629      	mov	r1, r5
 8006bf0:	dc09      	bgt.n	8006c06 <__exponent+0x4c>
 8006bf2:	3130      	adds	r1, #48	; 0x30
 8006bf4:	3b02      	subs	r3, #2
 8006bf6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006bfa:	42bb      	cmp	r3, r7
 8006bfc:	4622      	mov	r2, r4
 8006bfe:	d304      	bcc.n	8006c0a <__exponent+0x50>
 8006c00:	1a10      	subs	r0, r2, r0
 8006c02:	b003      	add	sp, #12
 8006c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c06:	4613      	mov	r3, r2
 8006c08:	e7e7      	b.n	8006bda <__exponent+0x20>
 8006c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c0e:	f804 2b01 	strb.w	r2, [r4], #1
 8006c12:	e7f2      	b.n	8006bfa <__exponent+0x40>
 8006c14:	2330      	movs	r3, #48	; 0x30
 8006c16:	4419      	add	r1, r3
 8006c18:	7083      	strb	r3, [r0, #2]
 8006c1a:	1d02      	adds	r2, r0, #4
 8006c1c:	70c1      	strb	r1, [r0, #3]
 8006c1e:	e7ef      	b.n	8006c00 <__exponent+0x46>

08006c20 <_printf_float>:
 8006c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c24:	b08d      	sub	sp, #52	; 0x34
 8006c26:	460c      	mov	r4, r1
 8006c28:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006c2c:	4616      	mov	r6, r2
 8006c2e:	461f      	mov	r7, r3
 8006c30:	4605      	mov	r5, r0
 8006c32:	f002 fde5 	bl	8009800 <_localeconv_r>
 8006c36:	6803      	ldr	r3, [r0, #0]
 8006c38:	9304      	str	r3, [sp, #16]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7f9 fad8 	bl	80001f0 <strlen>
 8006c40:	2300      	movs	r3, #0
 8006c42:	930a      	str	r3, [sp, #40]	; 0x28
 8006c44:	f8d8 3000 	ldr.w	r3, [r8]
 8006c48:	9005      	str	r0, [sp, #20]
 8006c4a:	3307      	adds	r3, #7
 8006c4c:	f023 0307 	bic.w	r3, r3, #7
 8006c50:	f103 0208 	add.w	r2, r3, #8
 8006c54:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c58:	f8d4 b000 	ldr.w	fp, [r4]
 8006c5c:	f8c8 2000 	str.w	r2, [r8]
 8006c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c64:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c68:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006c6c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c70:	9307      	str	r3, [sp, #28]
 8006c72:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c76:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7a:	4ba7      	ldr	r3, [pc, #668]	; (8006f18 <_printf_float+0x2f8>)
 8006c7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c80:	f7f9 ff64 	bl	8000b4c <__aeabi_dcmpun>
 8006c84:	bb70      	cbnz	r0, 8006ce4 <_printf_float+0xc4>
 8006c86:	f04f 32ff 	mov.w	r2, #4294967295
 8006c8a:	4ba3      	ldr	r3, [pc, #652]	; (8006f18 <_printf_float+0x2f8>)
 8006c8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c90:	f7f9 ff3e 	bl	8000b10 <__aeabi_dcmple>
 8006c94:	bb30      	cbnz	r0, 8006ce4 <_printf_float+0xc4>
 8006c96:	2200      	movs	r2, #0
 8006c98:	2300      	movs	r3, #0
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	f7f9 ff2d 	bl	8000afc <__aeabi_dcmplt>
 8006ca2:	b110      	cbz	r0, 8006caa <_printf_float+0x8a>
 8006ca4:	232d      	movs	r3, #45	; 0x2d
 8006ca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006caa:	4a9c      	ldr	r2, [pc, #624]	; (8006f1c <_printf_float+0x2fc>)
 8006cac:	4b9c      	ldr	r3, [pc, #624]	; (8006f20 <_printf_float+0x300>)
 8006cae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006cb2:	bf8c      	ite	hi
 8006cb4:	4690      	movhi	r8, r2
 8006cb6:	4698      	movls	r8, r3
 8006cb8:	2303      	movs	r3, #3
 8006cba:	f02b 0204 	bic.w	r2, fp, #4
 8006cbe:	6123      	str	r3, [r4, #16]
 8006cc0:	6022      	str	r2, [r4, #0]
 8006cc2:	f04f 0900 	mov.w	r9, #0
 8006cc6:	9700      	str	r7, [sp, #0]
 8006cc8:	4633      	mov	r3, r6
 8006cca:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ccc:	4621      	mov	r1, r4
 8006cce:	4628      	mov	r0, r5
 8006cd0:	f000 f9e6 	bl	80070a0 <_printf_common>
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	f040 808d 	bne.w	8006df4 <_printf_float+0x1d4>
 8006cda:	f04f 30ff 	mov.w	r0, #4294967295
 8006cde:	b00d      	add	sp, #52	; 0x34
 8006ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce4:	4642      	mov	r2, r8
 8006ce6:	464b      	mov	r3, r9
 8006ce8:	4640      	mov	r0, r8
 8006cea:	4649      	mov	r1, r9
 8006cec:	f7f9 ff2e 	bl	8000b4c <__aeabi_dcmpun>
 8006cf0:	b110      	cbz	r0, 8006cf8 <_printf_float+0xd8>
 8006cf2:	4a8c      	ldr	r2, [pc, #560]	; (8006f24 <_printf_float+0x304>)
 8006cf4:	4b8c      	ldr	r3, [pc, #560]	; (8006f28 <_printf_float+0x308>)
 8006cf6:	e7da      	b.n	8006cae <_printf_float+0x8e>
 8006cf8:	6861      	ldr	r1, [r4, #4]
 8006cfa:	1c4b      	adds	r3, r1, #1
 8006cfc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006d00:	a80a      	add	r0, sp, #40	; 0x28
 8006d02:	d13e      	bne.n	8006d82 <_printf_float+0x162>
 8006d04:	2306      	movs	r3, #6
 8006d06:	6063      	str	r3, [r4, #4]
 8006d08:	2300      	movs	r3, #0
 8006d0a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006d0e:	ab09      	add	r3, sp, #36	; 0x24
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	ec49 8b10 	vmov	d0, r8, r9
 8006d16:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d1a:	6022      	str	r2, [r4, #0]
 8006d1c:	f8cd a004 	str.w	sl, [sp, #4]
 8006d20:	6861      	ldr	r1, [r4, #4]
 8006d22:	4628      	mov	r0, r5
 8006d24:	f7ff fee8 	bl	8006af8 <__cvt>
 8006d28:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006d2c:	2b47      	cmp	r3, #71	; 0x47
 8006d2e:	4680      	mov	r8, r0
 8006d30:	d109      	bne.n	8006d46 <_printf_float+0x126>
 8006d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d34:	1cd8      	adds	r0, r3, #3
 8006d36:	db02      	blt.n	8006d3e <_printf_float+0x11e>
 8006d38:	6862      	ldr	r2, [r4, #4]
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	dd47      	ble.n	8006dce <_printf_float+0x1ae>
 8006d3e:	f1aa 0a02 	sub.w	sl, sl, #2
 8006d42:	fa5f fa8a 	uxtb.w	sl, sl
 8006d46:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006d4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d4c:	d824      	bhi.n	8006d98 <_printf_float+0x178>
 8006d4e:	3901      	subs	r1, #1
 8006d50:	4652      	mov	r2, sl
 8006d52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d56:	9109      	str	r1, [sp, #36]	; 0x24
 8006d58:	f7ff ff2f 	bl	8006bba <__exponent>
 8006d5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d5e:	1813      	adds	r3, r2, r0
 8006d60:	2a01      	cmp	r2, #1
 8006d62:	4681      	mov	r9, r0
 8006d64:	6123      	str	r3, [r4, #16]
 8006d66:	dc02      	bgt.n	8006d6e <_printf_float+0x14e>
 8006d68:	6822      	ldr	r2, [r4, #0]
 8006d6a:	07d1      	lsls	r1, r2, #31
 8006d6c:	d501      	bpl.n	8006d72 <_printf_float+0x152>
 8006d6e:	3301      	adds	r3, #1
 8006d70:	6123      	str	r3, [r4, #16]
 8006d72:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0a5      	beq.n	8006cc6 <_printf_float+0xa6>
 8006d7a:	232d      	movs	r3, #45	; 0x2d
 8006d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d80:	e7a1      	b.n	8006cc6 <_printf_float+0xa6>
 8006d82:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006d86:	f000 8177 	beq.w	8007078 <_printf_float+0x458>
 8006d8a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006d8e:	d1bb      	bne.n	8006d08 <_printf_float+0xe8>
 8006d90:	2900      	cmp	r1, #0
 8006d92:	d1b9      	bne.n	8006d08 <_printf_float+0xe8>
 8006d94:	2301      	movs	r3, #1
 8006d96:	e7b6      	b.n	8006d06 <_printf_float+0xe6>
 8006d98:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006d9c:	d119      	bne.n	8006dd2 <_printf_float+0x1b2>
 8006d9e:	2900      	cmp	r1, #0
 8006da0:	6863      	ldr	r3, [r4, #4]
 8006da2:	dd0c      	ble.n	8006dbe <_printf_float+0x19e>
 8006da4:	6121      	str	r1, [r4, #16]
 8006da6:	b913      	cbnz	r3, 8006dae <_printf_float+0x18e>
 8006da8:	6822      	ldr	r2, [r4, #0]
 8006daa:	07d2      	lsls	r2, r2, #31
 8006dac:	d502      	bpl.n	8006db4 <_printf_float+0x194>
 8006dae:	3301      	adds	r3, #1
 8006db0:	440b      	add	r3, r1
 8006db2:	6123      	str	r3, [r4, #16]
 8006db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db6:	65a3      	str	r3, [r4, #88]	; 0x58
 8006db8:	f04f 0900 	mov.w	r9, #0
 8006dbc:	e7d9      	b.n	8006d72 <_printf_float+0x152>
 8006dbe:	b913      	cbnz	r3, 8006dc6 <_printf_float+0x1a6>
 8006dc0:	6822      	ldr	r2, [r4, #0]
 8006dc2:	07d0      	lsls	r0, r2, #31
 8006dc4:	d501      	bpl.n	8006dca <_printf_float+0x1aa>
 8006dc6:	3302      	adds	r3, #2
 8006dc8:	e7f3      	b.n	8006db2 <_printf_float+0x192>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e7f1      	b.n	8006db2 <_printf_float+0x192>
 8006dce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006dd2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	db05      	blt.n	8006de6 <_printf_float+0x1c6>
 8006dda:	6822      	ldr	r2, [r4, #0]
 8006ddc:	6123      	str	r3, [r4, #16]
 8006dde:	07d1      	lsls	r1, r2, #31
 8006de0:	d5e8      	bpl.n	8006db4 <_printf_float+0x194>
 8006de2:	3301      	adds	r3, #1
 8006de4:	e7e5      	b.n	8006db2 <_printf_float+0x192>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	bfd4      	ite	le
 8006dea:	f1c3 0302 	rsble	r3, r3, #2
 8006dee:	2301      	movgt	r3, #1
 8006df0:	4413      	add	r3, r2
 8006df2:	e7de      	b.n	8006db2 <_printf_float+0x192>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	055a      	lsls	r2, r3, #21
 8006df8:	d407      	bmi.n	8006e0a <_printf_float+0x1ea>
 8006dfa:	6923      	ldr	r3, [r4, #16]
 8006dfc:	4642      	mov	r2, r8
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4628      	mov	r0, r5
 8006e02:	47b8      	blx	r7
 8006e04:	3001      	adds	r0, #1
 8006e06:	d12b      	bne.n	8006e60 <_printf_float+0x240>
 8006e08:	e767      	b.n	8006cda <_printf_float+0xba>
 8006e0a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006e0e:	f240 80dc 	bls.w	8006fca <_printf_float+0x3aa>
 8006e12:	2200      	movs	r2, #0
 8006e14:	2300      	movs	r3, #0
 8006e16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e1a:	f7f9 fe65 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	d033      	beq.n	8006e8a <_printf_float+0x26a>
 8006e22:	2301      	movs	r3, #1
 8006e24:	4a41      	ldr	r2, [pc, #260]	; (8006f2c <_printf_float+0x30c>)
 8006e26:	4631      	mov	r1, r6
 8006e28:	4628      	mov	r0, r5
 8006e2a:	47b8      	blx	r7
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	f43f af54 	beq.w	8006cda <_printf_float+0xba>
 8006e32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e36:	429a      	cmp	r2, r3
 8006e38:	db02      	blt.n	8006e40 <_printf_float+0x220>
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	07d8      	lsls	r0, r3, #31
 8006e3e:	d50f      	bpl.n	8006e60 <_printf_float+0x240>
 8006e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e44:	4631      	mov	r1, r6
 8006e46:	4628      	mov	r0, r5
 8006e48:	47b8      	blx	r7
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	f43f af45 	beq.w	8006cda <_printf_float+0xba>
 8006e50:	f04f 0800 	mov.w	r8, #0
 8006e54:	f104 091a 	add.w	r9, r4, #26
 8006e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	4543      	cmp	r3, r8
 8006e5e:	dc09      	bgt.n	8006e74 <_printf_float+0x254>
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	079b      	lsls	r3, r3, #30
 8006e64:	f100 8103 	bmi.w	800706e <_printf_float+0x44e>
 8006e68:	68e0      	ldr	r0, [r4, #12]
 8006e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e6c:	4298      	cmp	r0, r3
 8006e6e:	bfb8      	it	lt
 8006e70:	4618      	movlt	r0, r3
 8006e72:	e734      	b.n	8006cde <_printf_float+0xbe>
 8006e74:	2301      	movs	r3, #1
 8006e76:	464a      	mov	r2, r9
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	47b8      	blx	r7
 8006e7e:	3001      	adds	r0, #1
 8006e80:	f43f af2b 	beq.w	8006cda <_printf_float+0xba>
 8006e84:	f108 0801 	add.w	r8, r8, #1
 8006e88:	e7e6      	b.n	8006e58 <_printf_float+0x238>
 8006e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	dc2b      	bgt.n	8006ee8 <_printf_float+0x2c8>
 8006e90:	2301      	movs	r3, #1
 8006e92:	4a26      	ldr	r2, [pc, #152]	; (8006f2c <_printf_float+0x30c>)
 8006e94:	4631      	mov	r1, r6
 8006e96:	4628      	mov	r0, r5
 8006e98:	47b8      	blx	r7
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	f43f af1d 	beq.w	8006cda <_printf_float+0xba>
 8006ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea2:	b923      	cbnz	r3, 8006eae <_printf_float+0x28e>
 8006ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea6:	b913      	cbnz	r3, 8006eae <_printf_float+0x28e>
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	07d9      	lsls	r1, r3, #31
 8006eac:	d5d8      	bpl.n	8006e60 <_printf_float+0x240>
 8006eae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	47b8      	blx	r7
 8006eb8:	3001      	adds	r0, #1
 8006eba:	f43f af0e 	beq.w	8006cda <_printf_float+0xba>
 8006ebe:	f04f 0900 	mov.w	r9, #0
 8006ec2:	f104 0a1a 	add.w	sl, r4, #26
 8006ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec8:	425b      	negs	r3, r3
 8006eca:	454b      	cmp	r3, r9
 8006ecc:	dc01      	bgt.n	8006ed2 <_printf_float+0x2b2>
 8006ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed0:	e794      	b.n	8006dfc <_printf_float+0x1dc>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	4652      	mov	r2, sl
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b8      	blx	r7
 8006edc:	3001      	adds	r0, #1
 8006ede:	f43f aefc 	beq.w	8006cda <_printf_float+0xba>
 8006ee2:	f109 0901 	add.w	r9, r9, #1
 8006ee6:	e7ee      	b.n	8006ec6 <_printf_float+0x2a6>
 8006ee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006eec:	429a      	cmp	r2, r3
 8006eee:	bfa8      	it	ge
 8006ef0:	461a      	movge	r2, r3
 8006ef2:	2a00      	cmp	r2, #0
 8006ef4:	4691      	mov	r9, r2
 8006ef6:	dd07      	ble.n	8006f08 <_printf_float+0x2e8>
 8006ef8:	4613      	mov	r3, r2
 8006efa:	4631      	mov	r1, r6
 8006efc:	4642      	mov	r2, r8
 8006efe:	4628      	mov	r0, r5
 8006f00:	47b8      	blx	r7
 8006f02:	3001      	adds	r0, #1
 8006f04:	f43f aee9 	beq.w	8006cda <_printf_float+0xba>
 8006f08:	f104 031a 	add.w	r3, r4, #26
 8006f0c:	f04f 0b00 	mov.w	fp, #0
 8006f10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f14:	9306      	str	r3, [sp, #24]
 8006f16:	e015      	b.n	8006f44 <_printf_float+0x324>
 8006f18:	7fefffff 	.word	0x7fefffff
 8006f1c:	0800c080 	.word	0x0800c080
 8006f20:	0800c07c 	.word	0x0800c07c
 8006f24:	0800c088 	.word	0x0800c088
 8006f28:	0800c084 	.word	0x0800c084
 8006f2c:	0800c08c 	.word	0x0800c08c
 8006f30:	2301      	movs	r3, #1
 8006f32:	9a06      	ldr	r2, [sp, #24]
 8006f34:	4631      	mov	r1, r6
 8006f36:	4628      	mov	r0, r5
 8006f38:	47b8      	blx	r7
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	f43f aecd 	beq.w	8006cda <_printf_float+0xba>
 8006f40:	f10b 0b01 	add.w	fp, fp, #1
 8006f44:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006f48:	ebaa 0309 	sub.w	r3, sl, r9
 8006f4c:	455b      	cmp	r3, fp
 8006f4e:	dcef      	bgt.n	8006f30 <_printf_float+0x310>
 8006f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f54:	429a      	cmp	r2, r3
 8006f56:	44d0      	add	r8, sl
 8006f58:	db15      	blt.n	8006f86 <_printf_float+0x366>
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	07da      	lsls	r2, r3, #31
 8006f5e:	d412      	bmi.n	8006f86 <_printf_float+0x366>
 8006f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f64:	eba3 020a 	sub.w	r2, r3, sl
 8006f68:	eba3 0a01 	sub.w	sl, r3, r1
 8006f6c:	4592      	cmp	sl, r2
 8006f6e:	bfa8      	it	ge
 8006f70:	4692      	movge	sl, r2
 8006f72:	f1ba 0f00 	cmp.w	sl, #0
 8006f76:	dc0e      	bgt.n	8006f96 <_printf_float+0x376>
 8006f78:	f04f 0800 	mov.w	r8, #0
 8006f7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f80:	f104 091a 	add.w	r9, r4, #26
 8006f84:	e019      	b.n	8006fba <_printf_float+0x39a>
 8006f86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	47b8      	blx	r7
 8006f90:	3001      	adds	r0, #1
 8006f92:	d1e5      	bne.n	8006f60 <_printf_float+0x340>
 8006f94:	e6a1      	b.n	8006cda <_printf_float+0xba>
 8006f96:	4653      	mov	r3, sl
 8006f98:	4642      	mov	r2, r8
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	47b8      	blx	r7
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d1e9      	bne.n	8006f78 <_printf_float+0x358>
 8006fa4:	e699      	b.n	8006cda <_printf_float+0xba>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	464a      	mov	r2, r9
 8006faa:	4631      	mov	r1, r6
 8006fac:	4628      	mov	r0, r5
 8006fae:	47b8      	blx	r7
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	f43f ae92 	beq.w	8006cda <_printf_float+0xba>
 8006fb6:	f108 0801 	add.w	r8, r8, #1
 8006fba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fbe:	1a9b      	subs	r3, r3, r2
 8006fc0:	eba3 030a 	sub.w	r3, r3, sl
 8006fc4:	4543      	cmp	r3, r8
 8006fc6:	dcee      	bgt.n	8006fa6 <_printf_float+0x386>
 8006fc8:	e74a      	b.n	8006e60 <_printf_float+0x240>
 8006fca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fcc:	2a01      	cmp	r2, #1
 8006fce:	dc01      	bgt.n	8006fd4 <_printf_float+0x3b4>
 8006fd0:	07db      	lsls	r3, r3, #31
 8006fd2:	d53a      	bpl.n	800704a <_printf_float+0x42a>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	4642      	mov	r2, r8
 8006fd8:	4631      	mov	r1, r6
 8006fda:	4628      	mov	r0, r5
 8006fdc:	47b8      	blx	r7
 8006fde:	3001      	adds	r0, #1
 8006fe0:	f43f ae7b 	beq.w	8006cda <_printf_float+0xba>
 8006fe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fe8:	4631      	mov	r1, r6
 8006fea:	4628      	mov	r0, r5
 8006fec:	47b8      	blx	r7
 8006fee:	3001      	adds	r0, #1
 8006ff0:	f108 0801 	add.w	r8, r8, #1
 8006ff4:	f43f ae71 	beq.w	8006cda <_printf_float+0xba>
 8006ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f103 3aff 	add.w	sl, r3, #4294967295
 8007000:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007004:	2300      	movs	r3, #0
 8007006:	f7f9 fd6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800700a:	b9c8      	cbnz	r0, 8007040 <_printf_float+0x420>
 800700c:	4653      	mov	r3, sl
 800700e:	4642      	mov	r2, r8
 8007010:	4631      	mov	r1, r6
 8007012:	4628      	mov	r0, r5
 8007014:	47b8      	blx	r7
 8007016:	3001      	adds	r0, #1
 8007018:	d10e      	bne.n	8007038 <_printf_float+0x418>
 800701a:	e65e      	b.n	8006cda <_printf_float+0xba>
 800701c:	2301      	movs	r3, #1
 800701e:	4652      	mov	r2, sl
 8007020:	4631      	mov	r1, r6
 8007022:	4628      	mov	r0, r5
 8007024:	47b8      	blx	r7
 8007026:	3001      	adds	r0, #1
 8007028:	f43f ae57 	beq.w	8006cda <_printf_float+0xba>
 800702c:	f108 0801 	add.w	r8, r8, #1
 8007030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007032:	3b01      	subs	r3, #1
 8007034:	4543      	cmp	r3, r8
 8007036:	dcf1      	bgt.n	800701c <_printf_float+0x3fc>
 8007038:	464b      	mov	r3, r9
 800703a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800703e:	e6de      	b.n	8006dfe <_printf_float+0x1de>
 8007040:	f04f 0800 	mov.w	r8, #0
 8007044:	f104 0a1a 	add.w	sl, r4, #26
 8007048:	e7f2      	b.n	8007030 <_printf_float+0x410>
 800704a:	2301      	movs	r3, #1
 800704c:	e7df      	b.n	800700e <_printf_float+0x3ee>
 800704e:	2301      	movs	r3, #1
 8007050:	464a      	mov	r2, r9
 8007052:	4631      	mov	r1, r6
 8007054:	4628      	mov	r0, r5
 8007056:	47b8      	blx	r7
 8007058:	3001      	adds	r0, #1
 800705a:	f43f ae3e 	beq.w	8006cda <_printf_float+0xba>
 800705e:	f108 0801 	add.w	r8, r8, #1
 8007062:	68e3      	ldr	r3, [r4, #12]
 8007064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007066:	1a9b      	subs	r3, r3, r2
 8007068:	4543      	cmp	r3, r8
 800706a:	dcf0      	bgt.n	800704e <_printf_float+0x42e>
 800706c:	e6fc      	b.n	8006e68 <_printf_float+0x248>
 800706e:	f04f 0800 	mov.w	r8, #0
 8007072:	f104 0919 	add.w	r9, r4, #25
 8007076:	e7f4      	b.n	8007062 <_printf_float+0x442>
 8007078:	2900      	cmp	r1, #0
 800707a:	f43f ae8b 	beq.w	8006d94 <_printf_float+0x174>
 800707e:	2300      	movs	r3, #0
 8007080:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007084:	ab09      	add	r3, sp, #36	; 0x24
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	ec49 8b10 	vmov	d0, r8, r9
 800708c:	6022      	str	r2, [r4, #0]
 800708e:	f8cd a004 	str.w	sl, [sp, #4]
 8007092:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007096:	4628      	mov	r0, r5
 8007098:	f7ff fd2e 	bl	8006af8 <__cvt>
 800709c:	4680      	mov	r8, r0
 800709e:	e648      	b.n	8006d32 <_printf_float+0x112>

080070a0 <_printf_common>:
 80070a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a4:	4691      	mov	r9, r2
 80070a6:	461f      	mov	r7, r3
 80070a8:	688a      	ldr	r2, [r1, #8]
 80070aa:	690b      	ldr	r3, [r1, #16]
 80070ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070b0:	4293      	cmp	r3, r2
 80070b2:	bfb8      	it	lt
 80070b4:	4613      	movlt	r3, r2
 80070b6:	f8c9 3000 	str.w	r3, [r9]
 80070ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070be:	4606      	mov	r6, r0
 80070c0:	460c      	mov	r4, r1
 80070c2:	b112      	cbz	r2, 80070ca <_printf_common+0x2a>
 80070c4:	3301      	adds	r3, #1
 80070c6:	f8c9 3000 	str.w	r3, [r9]
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	0699      	lsls	r1, r3, #26
 80070ce:	bf42      	ittt	mi
 80070d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80070d4:	3302      	addmi	r3, #2
 80070d6:	f8c9 3000 	strmi.w	r3, [r9]
 80070da:	6825      	ldr	r5, [r4, #0]
 80070dc:	f015 0506 	ands.w	r5, r5, #6
 80070e0:	d107      	bne.n	80070f2 <_printf_common+0x52>
 80070e2:	f104 0a19 	add.w	sl, r4, #25
 80070e6:	68e3      	ldr	r3, [r4, #12]
 80070e8:	f8d9 2000 	ldr.w	r2, [r9]
 80070ec:	1a9b      	subs	r3, r3, r2
 80070ee:	42ab      	cmp	r3, r5
 80070f0:	dc28      	bgt.n	8007144 <_printf_common+0xa4>
 80070f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80070f6:	6822      	ldr	r2, [r4, #0]
 80070f8:	3300      	adds	r3, #0
 80070fa:	bf18      	it	ne
 80070fc:	2301      	movne	r3, #1
 80070fe:	0692      	lsls	r2, r2, #26
 8007100:	d42d      	bmi.n	800715e <_printf_common+0xbe>
 8007102:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007106:	4639      	mov	r1, r7
 8007108:	4630      	mov	r0, r6
 800710a:	47c0      	blx	r8
 800710c:	3001      	adds	r0, #1
 800710e:	d020      	beq.n	8007152 <_printf_common+0xb2>
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	68e5      	ldr	r5, [r4, #12]
 8007114:	f8d9 2000 	ldr.w	r2, [r9]
 8007118:	f003 0306 	and.w	r3, r3, #6
 800711c:	2b04      	cmp	r3, #4
 800711e:	bf08      	it	eq
 8007120:	1aad      	subeq	r5, r5, r2
 8007122:	68a3      	ldr	r3, [r4, #8]
 8007124:	6922      	ldr	r2, [r4, #16]
 8007126:	bf0c      	ite	eq
 8007128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800712c:	2500      	movne	r5, #0
 800712e:	4293      	cmp	r3, r2
 8007130:	bfc4      	itt	gt
 8007132:	1a9b      	subgt	r3, r3, r2
 8007134:	18ed      	addgt	r5, r5, r3
 8007136:	f04f 0900 	mov.w	r9, #0
 800713a:	341a      	adds	r4, #26
 800713c:	454d      	cmp	r5, r9
 800713e:	d11a      	bne.n	8007176 <_printf_common+0xd6>
 8007140:	2000      	movs	r0, #0
 8007142:	e008      	b.n	8007156 <_printf_common+0xb6>
 8007144:	2301      	movs	r3, #1
 8007146:	4652      	mov	r2, sl
 8007148:	4639      	mov	r1, r7
 800714a:	4630      	mov	r0, r6
 800714c:	47c0      	blx	r8
 800714e:	3001      	adds	r0, #1
 8007150:	d103      	bne.n	800715a <_printf_common+0xba>
 8007152:	f04f 30ff 	mov.w	r0, #4294967295
 8007156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715a:	3501      	adds	r5, #1
 800715c:	e7c3      	b.n	80070e6 <_printf_common+0x46>
 800715e:	18e1      	adds	r1, r4, r3
 8007160:	1c5a      	adds	r2, r3, #1
 8007162:	2030      	movs	r0, #48	; 0x30
 8007164:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007168:	4422      	add	r2, r4
 800716a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800716e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007172:	3302      	adds	r3, #2
 8007174:	e7c5      	b.n	8007102 <_printf_common+0x62>
 8007176:	2301      	movs	r3, #1
 8007178:	4622      	mov	r2, r4
 800717a:	4639      	mov	r1, r7
 800717c:	4630      	mov	r0, r6
 800717e:	47c0      	blx	r8
 8007180:	3001      	adds	r0, #1
 8007182:	d0e6      	beq.n	8007152 <_printf_common+0xb2>
 8007184:	f109 0901 	add.w	r9, r9, #1
 8007188:	e7d8      	b.n	800713c <_printf_common+0x9c>
	...

0800718c <_printf_i>:
 800718c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007190:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007194:	460c      	mov	r4, r1
 8007196:	7e09      	ldrb	r1, [r1, #24]
 8007198:	b085      	sub	sp, #20
 800719a:	296e      	cmp	r1, #110	; 0x6e
 800719c:	4617      	mov	r7, r2
 800719e:	4606      	mov	r6, r0
 80071a0:	4698      	mov	r8, r3
 80071a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071a4:	f000 80b3 	beq.w	800730e <_printf_i+0x182>
 80071a8:	d822      	bhi.n	80071f0 <_printf_i+0x64>
 80071aa:	2963      	cmp	r1, #99	; 0x63
 80071ac:	d036      	beq.n	800721c <_printf_i+0x90>
 80071ae:	d80a      	bhi.n	80071c6 <_printf_i+0x3a>
 80071b0:	2900      	cmp	r1, #0
 80071b2:	f000 80b9 	beq.w	8007328 <_printf_i+0x19c>
 80071b6:	2958      	cmp	r1, #88	; 0x58
 80071b8:	f000 8083 	beq.w	80072c2 <_printf_i+0x136>
 80071bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80071c4:	e032      	b.n	800722c <_printf_i+0xa0>
 80071c6:	2964      	cmp	r1, #100	; 0x64
 80071c8:	d001      	beq.n	80071ce <_printf_i+0x42>
 80071ca:	2969      	cmp	r1, #105	; 0x69
 80071cc:	d1f6      	bne.n	80071bc <_printf_i+0x30>
 80071ce:	6820      	ldr	r0, [r4, #0]
 80071d0:	6813      	ldr	r3, [r2, #0]
 80071d2:	0605      	lsls	r5, r0, #24
 80071d4:	f103 0104 	add.w	r1, r3, #4
 80071d8:	d52a      	bpl.n	8007230 <_printf_i+0xa4>
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6011      	str	r1, [r2, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	da03      	bge.n	80071ea <_printf_i+0x5e>
 80071e2:	222d      	movs	r2, #45	; 0x2d
 80071e4:	425b      	negs	r3, r3
 80071e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80071ea:	486f      	ldr	r0, [pc, #444]	; (80073a8 <_printf_i+0x21c>)
 80071ec:	220a      	movs	r2, #10
 80071ee:	e039      	b.n	8007264 <_printf_i+0xd8>
 80071f0:	2973      	cmp	r1, #115	; 0x73
 80071f2:	f000 809d 	beq.w	8007330 <_printf_i+0x1a4>
 80071f6:	d808      	bhi.n	800720a <_printf_i+0x7e>
 80071f8:	296f      	cmp	r1, #111	; 0x6f
 80071fa:	d020      	beq.n	800723e <_printf_i+0xb2>
 80071fc:	2970      	cmp	r1, #112	; 0x70
 80071fe:	d1dd      	bne.n	80071bc <_printf_i+0x30>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	f043 0320 	orr.w	r3, r3, #32
 8007206:	6023      	str	r3, [r4, #0]
 8007208:	e003      	b.n	8007212 <_printf_i+0x86>
 800720a:	2975      	cmp	r1, #117	; 0x75
 800720c:	d017      	beq.n	800723e <_printf_i+0xb2>
 800720e:	2978      	cmp	r1, #120	; 0x78
 8007210:	d1d4      	bne.n	80071bc <_printf_i+0x30>
 8007212:	2378      	movs	r3, #120	; 0x78
 8007214:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007218:	4864      	ldr	r0, [pc, #400]	; (80073ac <_printf_i+0x220>)
 800721a:	e055      	b.n	80072c8 <_printf_i+0x13c>
 800721c:	6813      	ldr	r3, [r2, #0]
 800721e:	1d19      	adds	r1, r3, #4
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6011      	str	r1, [r2, #0]
 8007224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800722c:	2301      	movs	r3, #1
 800722e:	e08c      	b.n	800734a <_printf_i+0x1be>
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6011      	str	r1, [r2, #0]
 8007234:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007238:	bf18      	it	ne
 800723a:	b21b      	sxthne	r3, r3
 800723c:	e7cf      	b.n	80071de <_printf_i+0x52>
 800723e:	6813      	ldr	r3, [r2, #0]
 8007240:	6825      	ldr	r5, [r4, #0]
 8007242:	1d18      	adds	r0, r3, #4
 8007244:	6010      	str	r0, [r2, #0]
 8007246:	0628      	lsls	r0, r5, #24
 8007248:	d501      	bpl.n	800724e <_printf_i+0xc2>
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	e002      	b.n	8007254 <_printf_i+0xc8>
 800724e:	0668      	lsls	r0, r5, #25
 8007250:	d5fb      	bpl.n	800724a <_printf_i+0xbe>
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	4854      	ldr	r0, [pc, #336]	; (80073a8 <_printf_i+0x21c>)
 8007256:	296f      	cmp	r1, #111	; 0x6f
 8007258:	bf14      	ite	ne
 800725a:	220a      	movne	r2, #10
 800725c:	2208      	moveq	r2, #8
 800725e:	2100      	movs	r1, #0
 8007260:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007264:	6865      	ldr	r5, [r4, #4]
 8007266:	60a5      	str	r5, [r4, #8]
 8007268:	2d00      	cmp	r5, #0
 800726a:	f2c0 8095 	blt.w	8007398 <_printf_i+0x20c>
 800726e:	6821      	ldr	r1, [r4, #0]
 8007270:	f021 0104 	bic.w	r1, r1, #4
 8007274:	6021      	str	r1, [r4, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d13d      	bne.n	80072f6 <_printf_i+0x16a>
 800727a:	2d00      	cmp	r5, #0
 800727c:	f040 808e 	bne.w	800739c <_printf_i+0x210>
 8007280:	4665      	mov	r5, ip
 8007282:	2a08      	cmp	r2, #8
 8007284:	d10b      	bne.n	800729e <_printf_i+0x112>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	07db      	lsls	r3, r3, #31
 800728a:	d508      	bpl.n	800729e <_printf_i+0x112>
 800728c:	6923      	ldr	r3, [r4, #16]
 800728e:	6862      	ldr	r2, [r4, #4]
 8007290:	429a      	cmp	r2, r3
 8007292:	bfde      	ittt	le
 8007294:	2330      	movle	r3, #48	; 0x30
 8007296:	f805 3c01 	strble.w	r3, [r5, #-1]
 800729a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800729e:	ebac 0305 	sub.w	r3, ip, r5
 80072a2:	6123      	str	r3, [r4, #16]
 80072a4:	f8cd 8000 	str.w	r8, [sp]
 80072a8:	463b      	mov	r3, r7
 80072aa:	aa03      	add	r2, sp, #12
 80072ac:	4621      	mov	r1, r4
 80072ae:	4630      	mov	r0, r6
 80072b0:	f7ff fef6 	bl	80070a0 <_printf_common>
 80072b4:	3001      	adds	r0, #1
 80072b6:	d14d      	bne.n	8007354 <_printf_i+0x1c8>
 80072b8:	f04f 30ff 	mov.w	r0, #4294967295
 80072bc:	b005      	add	sp, #20
 80072be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072c2:	4839      	ldr	r0, [pc, #228]	; (80073a8 <_printf_i+0x21c>)
 80072c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80072c8:	6813      	ldr	r3, [r2, #0]
 80072ca:	6821      	ldr	r1, [r4, #0]
 80072cc:	1d1d      	adds	r5, r3, #4
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6015      	str	r5, [r2, #0]
 80072d2:	060a      	lsls	r2, r1, #24
 80072d4:	d50b      	bpl.n	80072ee <_printf_i+0x162>
 80072d6:	07ca      	lsls	r2, r1, #31
 80072d8:	bf44      	itt	mi
 80072da:	f041 0120 	orrmi.w	r1, r1, #32
 80072de:	6021      	strmi	r1, [r4, #0]
 80072e0:	b91b      	cbnz	r3, 80072ea <_printf_i+0x15e>
 80072e2:	6822      	ldr	r2, [r4, #0]
 80072e4:	f022 0220 	bic.w	r2, r2, #32
 80072e8:	6022      	str	r2, [r4, #0]
 80072ea:	2210      	movs	r2, #16
 80072ec:	e7b7      	b.n	800725e <_printf_i+0xd2>
 80072ee:	064d      	lsls	r5, r1, #25
 80072f0:	bf48      	it	mi
 80072f2:	b29b      	uxthmi	r3, r3
 80072f4:	e7ef      	b.n	80072d6 <_printf_i+0x14a>
 80072f6:	4665      	mov	r5, ip
 80072f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80072fc:	fb02 3311 	mls	r3, r2, r1, r3
 8007300:	5cc3      	ldrb	r3, [r0, r3]
 8007302:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007306:	460b      	mov	r3, r1
 8007308:	2900      	cmp	r1, #0
 800730a:	d1f5      	bne.n	80072f8 <_printf_i+0x16c>
 800730c:	e7b9      	b.n	8007282 <_printf_i+0xf6>
 800730e:	6813      	ldr	r3, [r2, #0]
 8007310:	6825      	ldr	r5, [r4, #0]
 8007312:	6961      	ldr	r1, [r4, #20]
 8007314:	1d18      	adds	r0, r3, #4
 8007316:	6010      	str	r0, [r2, #0]
 8007318:	0628      	lsls	r0, r5, #24
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	d501      	bpl.n	8007322 <_printf_i+0x196>
 800731e:	6019      	str	r1, [r3, #0]
 8007320:	e002      	b.n	8007328 <_printf_i+0x19c>
 8007322:	066a      	lsls	r2, r5, #25
 8007324:	d5fb      	bpl.n	800731e <_printf_i+0x192>
 8007326:	8019      	strh	r1, [r3, #0]
 8007328:	2300      	movs	r3, #0
 800732a:	6123      	str	r3, [r4, #16]
 800732c:	4665      	mov	r5, ip
 800732e:	e7b9      	b.n	80072a4 <_printf_i+0x118>
 8007330:	6813      	ldr	r3, [r2, #0]
 8007332:	1d19      	adds	r1, r3, #4
 8007334:	6011      	str	r1, [r2, #0]
 8007336:	681d      	ldr	r5, [r3, #0]
 8007338:	6862      	ldr	r2, [r4, #4]
 800733a:	2100      	movs	r1, #0
 800733c:	4628      	mov	r0, r5
 800733e:	f7f8 ff5f 	bl	8000200 <memchr>
 8007342:	b108      	cbz	r0, 8007348 <_printf_i+0x1bc>
 8007344:	1b40      	subs	r0, r0, r5
 8007346:	6060      	str	r0, [r4, #4]
 8007348:	6863      	ldr	r3, [r4, #4]
 800734a:	6123      	str	r3, [r4, #16]
 800734c:	2300      	movs	r3, #0
 800734e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007352:	e7a7      	b.n	80072a4 <_printf_i+0x118>
 8007354:	6923      	ldr	r3, [r4, #16]
 8007356:	462a      	mov	r2, r5
 8007358:	4639      	mov	r1, r7
 800735a:	4630      	mov	r0, r6
 800735c:	47c0      	blx	r8
 800735e:	3001      	adds	r0, #1
 8007360:	d0aa      	beq.n	80072b8 <_printf_i+0x12c>
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	079b      	lsls	r3, r3, #30
 8007366:	d413      	bmi.n	8007390 <_printf_i+0x204>
 8007368:	68e0      	ldr	r0, [r4, #12]
 800736a:	9b03      	ldr	r3, [sp, #12]
 800736c:	4298      	cmp	r0, r3
 800736e:	bfb8      	it	lt
 8007370:	4618      	movlt	r0, r3
 8007372:	e7a3      	b.n	80072bc <_printf_i+0x130>
 8007374:	2301      	movs	r3, #1
 8007376:	464a      	mov	r2, r9
 8007378:	4639      	mov	r1, r7
 800737a:	4630      	mov	r0, r6
 800737c:	47c0      	blx	r8
 800737e:	3001      	adds	r0, #1
 8007380:	d09a      	beq.n	80072b8 <_printf_i+0x12c>
 8007382:	3501      	adds	r5, #1
 8007384:	68e3      	ldr	r3, [r4, #12]
 8007386:	9a03      	ldr	r2, [sp, #12]
 8007388:	1a9b      	subs	r3, r3, r2
 800738a:	42ab      	cmp	r3, r5
 800738c:	dcf2      	bgt.n	8007374 <_printf_i+0x1e8>
 800738e:	e7eb      	b.n	8007368 <_printf_i+0x1dc>
 8007390:	2500      	movs	r5, #0
 8007392:	f104 0919 	add.w	r9, r4, #25
 8007396:	e7f5      	b.n	8007384 <_printf_i+0x1f8>
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1ac      	bne.n	80072f6 <_printf_i+0x16a>
 800739c:	7803      	ldrb	r3, [r0, #0]
 800739e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073a6:	e76c      	b.n	8007282 <_printf_i+0xf6>
 80073a8:	0800c08e 	.word	0x0800c08e
 80073ac:	0800c09f 	.word	0x0800c09f

080073b0 <_scanf_float>:
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	469a      	mov	sl, r3
 80073b6:	688b      	ldr	r3, [r1, #8]
 80073b8:	4616      	mov	r6, r2
 80073ba:	1e5a      	subs	r2, r3, #1
 80073bc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80073c0:	b087      	sub	sp, #28
 80073c2:	bf83      	ittte	hi
 80073c4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80073c8:	189b      	addhi	r3, r3, r2
 80073ca:	9301      	strhi	r3, [sp, #4]
 80073cc:	2300      	movls	r3, #0
 80073ce:	bf86      	itte	hi
 80073d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80073d4:	608b      	strhi	r3, [r1, #8]
 80073d6:	9301      	strls	r3, [sp, #4]
 80073d8:	680b      	ldr	r3, [r1, #0]
 80073da:	4688      	mov	r8, r1
 80073dc:	f04f 0b00 	mov.w	fp, #0
 80073e0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80073e4:	f848 3b1c 	str.w	r3, [r8], #28
 80073e8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80073ec:	4607      	mov	r7, r0
 80073ee:	460c      	mov	r4, r1
 80073f0:	4645      	mov	r5, r8
 80073f2:	465a      	mov	r2, fp
 80073f4:	46d9      	mov	r9, fp
 80073f6:	f8cd b008 	str.w	fp, [sp, #8]
 80073fa:	68a1      	ldr	r1, [r4, #8]
 80073fc:	b181      	cbz	r1, 8007420 <_scanf_float+0x70>
 80073fe:	6833      	ldr	r3, [r6, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	2b49      	cmp	r3, #73	; 0x49
 8007404:	d071      	beq.n	80074ea <_scanf_float+0x13a>
 8007406:	d84d      	bhi.n	80074a4 <_scanf_float+0xf4>
 8007408:	2b39      	cmp	r3, #57	; 0x39
 800740a:	d840      	bhi.n	800748e <_scanf_float+0xde>
 800740c:	2b31      	cmp	r3, #49	; 0x31
 800740e:	f080 8088 	bcs.w	8007522 <_scanf_float+0x172>
 8007412:	2b2d      	cmp	r3, #45	; 0x2d
 8007414:	f000 8090 	beq.w	8007538 <_scanf_float+0x188>
 8007418:	d815      	bhi.n	8007446 <_scanf_float+0x96>
 800741a:	2b2b      	cmp	r3, #43	; 0x2b
 800741c:	f000 808c 	beq.w	8007538 <_scanf_float+0x188>
 8007420:	f1b9 0f00 	cmp.w	r9, #0
 8007424:	d003      	beq.n	800742e <_scanf_float+0x7e>
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	3a01      	subs	r2, #1
 8007430:	2a01      	cmp	r2, #1
 8007432:	f200 80ea 	bhi.w	800760a <_scanf_float+0x25a>
 8007436:	4545      	cmp	r5, r8
 8007438:	f200 80dc 	bhi.w	80075f4 <_scanf_float+0x244>
 800743c:	2601      	movs	r6, #1
 800743e:	4630      	mov	r0, r6
 8007440:	b007      	add	sp, #28
 8007442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007446:	2b2e      	cmp	r3, #46	; 0x2e
 8007448:	f000 809f 	beq.w	800758a <_scanf_float+0x1da>
 800744c:	2b30      	cmp	r3, #48	; 0x30
 800744e:	d1e7      	bne.n	8007420 <_scanf_float+0x70>
 8007450:	6820      	ldr	r0, [r4, #0]
 8007452:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007456:	d064      	beq.n	8007522 <_scanf_float+0x172>
 8007458:	9b01      	ldr	r3, [sp, #4]
 800745a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800745e:	6020      	str	r0, [r4, #0]
 8007460:	f109 0901 	add.w	r9, r9, #1
 8007464:	b11b      	cbz	r3, 800746e <_scanf_float+0xbe>
 8007466:	3b01      	subs	r3, #1
 8007468:	3101      	adds	r1, #1
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	60a1      	str	r1, [r4, #8]
 800746e:	68a3      	ldr	r3, [r4, #8]
 8007470:	3b01      	subs	r3, #1
 8007472:	60a3      	str	r3, [r4, #8]
 8007474:	6923      	ldr	r3, [r4, #16]
 8007476:	3301      	adds	r3, #1
 8007478:	6123      	str	r3, [r4, #16]
 800747a:	6873      	ldr	r3, [r6, #4]
 800747c:	3b01      	subs	r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	6073      	str	r3, [r6, #4]
 8007482:	f340 80ac 	ble.w	80075de <_scanf_float+0x22e>
 8007486:	6833      	ldr	r3, [r6, #0]
 8007488:	3301      	adds	r3, #1
 800748a:	6033      	str	r3, [r6, #0]
 800748c:	e7b5      	b.n	80073fa <_scanf_float+0x4a>
 800748e:	2b45      	cmp	r3, #69	; 0x45
 8007490:	f000 8085 	beq.w	800759e <_scanf_float+0x1ee>
 8007494:	2b46      	cmp	r3, #70	; 0x46
 8007496:	d06a      	beq.n	800756e <_scanf_float+0x1be>
 8007498:	2b41      	cmp	r3, #65	; 0x41
 800749a:	d1c1      	bne.n	8007420 <_scanf_float+0x70>
 800749c:	2a01      	cmp	r2, #1
 800749e:	d1bf      	bne.n	8007420 <_scanf_float+0x70>
 80074a0:	2202      	movs	r2, #2
 80074a2:	e046      	b.n	8007532 <_scanf_float+0x182>
 80074a4:	2b65      	cmp	r3, #101	; 0x65
 80074a6:	d07a      	beq.n	800759e <_scanf_float+0x1ee>
 80074a8:	d818      	bhi.n	80074dc <_scanf_float+0x12c>
 80074aa:	2b54      	cmp	r3, #84	; 0x54
 80074ac:	d066      	beq.n	800757c <_scanf_float+0x1cc>
 80074ae:	d811      	bhi.n	80074d4 <_scanf_float+0x124>
 80074b0:	2b4e      	cmp	r3, #78	; 0x4e
 80074b2:	d1b5      	bne.n	8007420 <_scanf_float+0x70>
 80074b4:	2a00      	cmp	r2, #0
 80074b6:	d146      	bne.n	8007546 <_scanf_float+0x196>
 80074b8:	f1b9 0f00 	cmp.w	r9, #0
 80074bc:	d145      	bne.n	800754a <_scanf_float+0x19a>
 80074be:	6821      	ldr	r1, [r4, #0]
 80074c0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80074c4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80074c8:	d13f      	bne.n	800754a <_scanf_float+0x19a>
 80074ca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80074ce:	6021      	str	r1, [r4, #0]
 80074d0:	2201      	movs	r2, #1
 80074d2:	e02e      	b.n	8007532 <_scanf_float+0x182>
 80074d4:	2b59      	cmp	r3, #89	; 0x59
 80074d6:	d01e      	beq.n	8007516 <_scanf_float+0x166>
 80074d8:	2b61      	cmp	r3, #97	; 0x61
 80074da:	e7de      	b.n	800749a <_scanf_float+0xea>
 80074dc:	2b6e      	cmp	r3, #110	; 0x6e
 80074de:	d0e9      	beq.n	80074b4 <_scanf_float+0x104>
 80074e0:	d815      	bhi.n	800750e <_scanf_float+0x15e>
 80074e2:	2b66      	cmp	r3, #102	; 0x66
 80074e4:	d043      	beq.n	800756e <_scanf_float+0x1be>
 80074e6:	2b69      	cmp	r3, #105	; 0x69
 80074e8:	d19a      	bne.n	8007420 <_scanf_float+0x70>
 80074ea:	f1bb 0f00 	cmp.w	fp, #0
 80074ee:	d138      	bne.n	8007562 <_scanf_float+0x1b2>
 80074f0:	f1b9 0f00 	cmp.w	r9, #0
 80074f4:	d197      	bne.n	8007426 <_scanf_float+0x76>
 80074f6:	6821      	ldr	r1, [r4, #0]
 80074f8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80074fc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007500:	d195      	bne.n	800742e <_scanf_float+0x7e>
 8007502:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007506:	6021      	str	r1, [r4, #0]
 8007508:	f04f 0b01 	mov.w	fp, #1
 800750c:	e011      	b.n	8007532 <_scanf_float+0x182>
 800750e:	2b74      	cmp	r3, #116	; 0x74
 8007510:	d034      	beq.n	800757c <_scanf_float+0x1cc>
 8007512:	2b79      	cmp	r3, #121	; 0x79
 8007514:	d184      	bne.n	8007420 <_scanf_float+0x70>
 8007516:	f1bb 0f07 	cmp.w	fp, #7
 800751a:	d181      	bne.n	8007420 <_scanf_float+0x70>
 800751c:	f04f 0b08 	mov.w	fp, #8
 8007520:	e007      	b.n	8007532 <_scanf_float+0x182>
 8007522:	eb12 0f0b 	cmn.w	r2, fp
 8007526:	f47f af7b 	bne.w	8007420 <_scanf_float+0x70>
 800752a:	6821      	ldr	r1, [r4, #0]
 800752c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007530:	6021      	str	r1, [r4, #0]
 8007532:	702b      	strb	r3, [r5, #0]
 8007534:	3501      	adds	r5, #1
 8007536:	e79a      	b.n	800746e <_scanf_float+0xbe>
 8007538:	6821      	ldr	r1, [r4, #0]
 800753a:	0608      	lsls	r0, r1, #24
 800753c:	f57f af70 	bpl.w	8007420 <_scanf_float+0x70>
 8007540:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007544:	e7f4      	b.n	8007530 <_scanf_float+0x180>
 8007546:	2a02      	cmp	r2, #2
 8007548:	d047      	beq.n	80075da <_scanf_float+0x22a>
 800754a:	f1bb 0f01 	cmp.w	fp, #1
 800754e:	d003      	beq.n	8007558 <_scanf_float+0x1a8>
 8007550:	f1bb 0f04 	cmp.w	fp, #4
 8007554:	f47f af64 	bne.w	8007420 <_scanf_float+0x70>
 8007558:	f10b 0b01 	add.w	fp, fp, #1
 800755c:	fa5f fb8b 	uxtb.w	fp, fp
 8007560:	e7e7      	b.n	8007532 <_scanf_float+0x182>
 8007562:	f1bb 0f03 	cmp.w	fp, #3
 8007566:	d0f7      	beq.n	8007558 <_scanf_float+0x1a8>
 8007568:	f1bb 0f05 	cmp.w	fp, #5
 800756c:	e7f2      	b.n	8007554 <_scanf_float+0x1a4>
 800756e:	f1bb 0f02 	cmp.w	fp, #2
 8007572:	f47f af55 	bne.w	8007420 <_scanf_float+0x70>
 8007576:	f04f 0b03 	mov.w	fp, #3
 800757a:	e7da      	b.n	8007532 <_scanf_float+0x182>
 800757c:	f1bb 0f06 	cmp.w	fp, #6
 8007580:	f47f af4e 	bne.w	8007420 <_scanf_float+0x70>
 8007584:	f04f 0b07 	mov.w	fp, #7
 8007588:	e7d3      	b.n	8007532 <_scanf_float+0x182>
 800758a:	6821      	ldr	r1, [r4, #0]
 800758c:	0588      	lsls	r0, r1, #22
 800758e:	f57f af47 	bpl.w	8007420 <_scanf_float+0x70>
 8007592:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007596:	6021      	str	r1, [r4, #0]
 8007598:	f8cd 9008 	str.w	r9, [sp, #8]
 800759c:	e7c9      	b.n	8007532 <_scanf_float+0x182>
 800759e:	6821      	ldr	r1, [r4, #0]
 80075a0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80075a4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80075a8:	d006      	beq.n	80075b8 <_scanf_float+0x208>
 80075aa:	0548      	lsls	r0, r1, #21
 80075ac:	f57f af38 	bpl.w	8007420 <_scanf_float+0x70>
 80075b0:	f1b9 0f00 	cmp.w	r9, #0
 80075b4:	f43f af3b 	beq.w	800742e <_scanf_float+0x7e>
 80075b8:	0588      	lsls	r0, r1, #22
 80075ba:	bf58      	it	pl
 80075bc:	9802      	ldrpl	r0, [sp, #8]
 80075be:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80075c2:	bf58      	it	pl
 80075c4:	eba9 0000 	subpl.w	r0, r9, r0
 80075c8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80075cc:	bf58      	it	pl
 80075ce:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80075d2:	6021      	str	r1, [r4, #0]
 80075d4:	f04f 0900 	mov.w	r9, #0
 80075d8:	e7ab      	b.n	8007532 <_scanf_float+0x182>
 80075da:	2203      	movs	r2, #3
 80075dc:	e7a9      	b.n	8007532 <_scanf_float+0x182>
 80075de:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80075e2:	9205      	str	r2, [sp, #20]
 80075e4:	4631      	mov	r1, r6
 80075e6:	4638      	mov	r0, r7
 80075e8:	4798      	blx	r3
 80075ea:	9a05      	ldr	r2, [sp, #20]
 80075ec:	2800      	cmp	r0, #0
 80075ee:	f43f af04 	beq.w	80073fa <_scanf_float+0x4a>
 80075f2:	e715      	b.n	8007420 <_scanf_float+0x70>
 80075f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80075fc:	4632      	mov	r2, r6
 80075fe:	4638      	mov	r0, r7
 8007600:	4798      	blx	r3
 8007602:	6923      	ldr	r3, [r4, #16]
 8007604:	3b01      	subs	r3, #1
 8007606:	6123      	str	r3, [r4, #16]
 8007608:	e715      	b.n	8007436 <_scanf_float+0x86>
 800760a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800760e:	2b06      	cmp	r3, #6
 8007610:	d80a      	bhi.n	8007628 <_scanf_float+0x278>
 8007612:	f1bb 0f02 	cmp.w	fp, #2
 8007616:	d968      	bls.n	80076ea <_scanf_float+0x33a>
 8007618:	f1ab 0b03 	sub.w	fp, fp, #3
 800761c:	fa5f fb8b 	uxtb.w	fp, fp
 8007620:	eba5 0b0b 	sub.w	fp, r5, fp
 8007624:	455d      	cmp	r5, fp
 8007626:	d14b      	bne.n	80076c0 <_scanf_float+0x310>
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	05da      	lsls	r2, r3, #23
 800762c:	d51f      	bpl.n	800766e <_scanf_float+0x2be>
 800762e:	055b      	lsls	r3, r3, #21
 8007630:	d468      	bmi.n	8007704 <_scanf_float+0x354>
 8007632:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007636:	6923      	ldr	r3, [r4, #16]
 8007638:	2965      	cmp	r1, #101	; 0x65
 800763a:	f103 33ff 	add.w	r3, r3, #4294967295
 800763e:	f105 3bff 	add.w	fp, r5, #4294967295
 8007642:	6123      	str	r3, [r4, #16]
 8007644:	d00d      	beq.n	8007662 <_scanf_float+0x2b2>
 8007646:	2945      	cmp	r1, #69	; 0x45
 8007648:	d00b      	beq.n	8007662 <_scanf_float+0x2b2>
 800764a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800764e:	4632      	mov	r2, r6
 8007650:	4638      	mov	r0, r7
 8007652:	4798      	blx	r3
 8007654:	6923      	ldr	r3, [r4, #16]
 8007656:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800765a:	3b01      	subs	r3, #1
 800765c:	f1a5 0b02 	sub.w	fp, r5, #2
 8007660:	6123      	str	r3, [r4, #16]
 8007662:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007666:	4632      	mov	r2, r6
 8007668:	4638      	mov	r0, r7
 800766a:	4798      	blx	r3
 800766c:	465d      	mov	r5, fp
 800766e:	6826      	ldr	r6, [r4, #0]
 8007670:	f016 0610 	ands.w	r6, r6, #16
 8007674:	d17a      	bne.n	800776c <_scanf_float+0x3bc>
 8007676:	702e      	strb	r6, [r5, #0]
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800767e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007682:	d142      	bne.n	800770a <_scanf_float+0x35a>
 8007684:	9b02      	ldr	r3, [sp, #8]
 8007686:	eba9 0303 	sub.w	r3, r9, r3
 800768a:	425a      	negs	r2, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d149      	bne.n	8007724 <_scanf_float+0x374>
 8007690:	2200      	movs	r2, #0
 8007692:	4641      	mov	r1, r8
 8007694:	4638      	mov	r0, r7
 8007696:	f000 fea3 	bl	80083e0 <_strtod_r>
 800769a:	6825      	ldr	r5, [r4, #0]
 800769c:	f8da 3000 	ldr.w	r3, [sl]
 80076a0:	f015 0f02 	tst.w	r5, #2
 80076a4:	f103 0204 	add.w	r2, r3, #4
 80076a8:	ec59 8b10 	vmov	r8, r9, d0
 80076ac:	f8ca 2000 	str.w	r2, [sl]
 80076b0:	d043      	beq.n	800773a <_scanf_float+0x38a>
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	e9c3 8900 	strd	r8, r9, [r3]
 80076b8:	68e3      	ldr	r3, [r4, #12]
 80076ba:	3301      	adds	r3, #1
 80076bc:	60e3      	str	r3, [r4, #12]
 80076be:	e6be      	b.n	800743e <_scanf_float+0x8e>
 80076c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80076c8:	4632      	mov	r2, r6
 80076ca:	4638      	mov	r0, r7
 80076cc:	4798      	blx	r3
 80076ce:	6923      	ldr	r3, [r4, #16]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	6123      	str	r3, [r4, #16]
 80076d4:	e7a6      	b.n	8007624 <_scanf_float+0x274>
 80076d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076da:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80076de:	4632      	mov	r2, r6
 80076e0:	4638      	mov	r0, r7
 80076e2:	4798      	blx	r3
 80076e4:	6923      	ldr	r3, [r4, #16]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	6123      	str	r3, [r4, #16]
 80076ea:	4545      	cmp	r5, r8
 80076ec:	d8f3      	bhi.n	80076d6 <_scanf_float+0x326>
 80076ee:	e6a5      	b.n	800743c <_scanf_float+0x8c>
 80076f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80076f8:	4632      	mov	r2, r6
 80076fa:	4638      	mov	r0, r7
 80076fc:	4798      	blx	r3
 80076fe:	6923      	ldr	r3, [r4, #16]
 8007700:	3b01      	subs	r3, #1
 8007702:	6123      	str	r3, [r4, #16]
 8007704:	4545      	cmp	r5, r8
 8007706:	d8f3      	bhi.n	80076f0 <_scanf_float+0x340>
 8007708:	e698      	b.n	800743c <_scanf_float+0x8c>
 800770a:	9b03      	ldr	r3, [sp, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0bf      	beq.n	8007690 <_scanf_float+0x2e0>
 8007710:	9904      	ldr	r1, [sp, #16]
 8007712:	230a      	movs	r3, #10
 8007714:	4632      	mov	r2, r6
 8007716:	3101      	adds	r1, #1
 8007718:	4638      	mov	r0, r7
 800771a:	f000 feed 	bl	80084f8 <_strtol_r>
 800771e:	9b03      	ldr	r3, [sp, #12]
 8007720:	9d04      	ldr	r5, [sp, #16]
 8007722:	1ac2      	subs	r2, r0, r3
 8007724:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007728:	429d      	cmp	r5, r3
 800772a:	bf28      	it	cs
 800772c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007730:	490f      	ldr	r1, [pc, #60]	; (8007770 <_scanf_float+0x3c0>)
 8007732:	4628      	mov	r0, r5
 8007734:	f000 f824 	bl	8007780 <siprintf>
 8007738:	e7aa      	b.n	8007690 <_scanf_float+0x2e0>
 800773a:	f015 0504 	ands.w	r5, r5, #4
 800773e:	d1b8      	bne.n	80076b2 <_scanf_float+0x302>
 8007740:	681f      	ldr	r7, [r3, #0]
 8007742:	ee10 2a10 	vmov	r2, s0
 8007746:	464b      	mov	r3, r9
 8007748:	ee10 0a10 	vmov	r0, s0
 800774c:	4649      	mov	r1, r9
 800774e:	f7f9 f9fd 	bl	8000b4c <__aeabi_dcmpun>
 8007752:	b128      	cbz	r0, 8007760 <_scanf_float+0x3b0>
 8007754:	4628      	mov	r0, r5
 8007756:	f000 f80d 	bl	8007774 <nanf>
 800775a:	ed87 0a00 	vstr	s0, [r7]
 800775e:	e7ab      	b.n	80076b8 <_scanf_float+0x308>
 8007760:	4640      	mov	r0, r8
 8007762:	4649      	mov	r1, r9
 8007764:	f7f9 fa50 	bl	8000c08 <__aeabi_d2f>
 8007768:	6038      	str	r0, [r7, #0]
 800776a:	e7a5      	b.n	80076b8 <_scanf_float+0x308>
 800776c:	2600      	movs	r6, #0
 800776e:	e666      	b.n	800743e <_scanf_float+0x8e>
 8007770:	0800c0b0 	.word	0x0800c0b0

08007774 <nanf>:
 8007774:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800777c <nanf+0x8>
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	7fc00000 	.word	0x7fc00000

08007780 <siprintf>:
 8007780:	b40e      	push	{r1, r2, r3}
 8007782:	b500      	push	{lr}
 8007784:	b09c      	sub	sp, #112	; 0x70
 8007786:	ab1d      	add	r3, sp, #116	; 0x74
 8007788:	9002      	str	r0, [sp, #8]
 800778a:	9006      	str	r0, [sp, #24]
 800778c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007790:	4809      	ldr	r0, [pc, #36]	; (80077b8 <siprintf+0x38>)
 8007792:	9107      	str	r1, [sp, #28]
 8007794:	9104      	str	r1, [sp, #16]
 8007796:	4909      	ldr	r1, [pc, #36]	; (80077bc <siprintf+0x3c>)
 8007798:	f853 2b04 	ldr.w	r2, [r3], #4
 800779c:	9105      	str	r1, [sp, #20]
 800779e:	6800      	ldr	r0, [r0, #0]
 80077a0:	9301      	str	r3, [sp, #4]
 80077a2:	a902      	add	r1, sp, #8
 80077a4:	f002 fd6e 	bl	800a284 <_svfiprintf_r>
 80077a8:	9b02      	ldr	r3, [sp, #8]
 80077aa:	2200      	movs	r2, #0
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	b01c      	add	sp, #112	; 0x70
 80077b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80077b4:	b003      	add	sp, #12
 80077b6:	4770      	bx	lr
 80077b8:	20000060 	.word	0x20000060
 80077bc:	ffff0208 	.word	0xffff0208

080077c0 <sulp>:
 80077c0:	b570      	push	{r4, r5, r6, lr}
 80077c2:	4604      	mov	r4, r0
 80077c4:	460d      	mov	r5, r1
 80077c6:	ec45 4b10 	vmov	d0, r4, r5
 80077ca:	4616      	mov	r6, r2
 80077cc:	f002 fb16 	bl	8009dfc <__ulp>
 80077d0:	ec51 0b10 	vmov	r0, r1, d0
 80077d4:	b17e      	cbz	r6, 80077f6 <sulp+0x36>
 80077d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80077da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80077de:	2b00      	cmp	r3, #0
 80077e0:	dd09      	ble.n	80077f6 <sulp+0x36>
 80077e2:	051b      	lsls	r3, r3, #20
 80077e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80077e8:	2400      	movs	r4, #0
 80077ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80077ee:	4622      	mov	r2, r4
 80077f0:	462b      	mov	r3, r5
 80077f2:	f7f8 ff11 	bl	8000618 <__aeabi_dmul>
 80077f6:	bd70      	pop	{r4, r5, r6, pc}

080077f8 <_strtod_l>:
 80077f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	461f      	mov	r7, r3
 80077fe:	b0a1      	sub	sp, #132	; 0x84
 8007800:	2300      	movs	r3, #0
 8007802:	4681      	mov	r9, r0
 8007804:	4638      	mov	r0, r7
 8007806:	460e      	mov	r6, r1
 8007808:	9217      	str	r2, [sp, #92]	; 0x5c
 800780a:	931c      	str	r3, [sp, #112]	; 0x70
 800780c:	f001 fff5 	bl	80097fa <__localeconv_l>
 8007810:	4680      	mov	r8, r0
 8007812:	6800      	ldr	r0, [r0, #0]
 8007814:	f7f8 fcec 	bl	80001f0 <strlen>
 8007818:	f04f 0a00 	mov.w	sl, #0
 800781c:	4604      	mov	r4, r0
 800781e:	f04f 0b00 	mov.w	fp, #0
 8007822:	961b      	str	r6, [sp, #108]	; 0x6c
 8007824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007826:	781a      	ldrb	r2, [r3, #0]
 8007828:	2a0d      	cmp	r2, #13
 800782a:	d832      	bhi.n	8007892 <_strtod_l+0x9a>
 800782c:	2a09      	cmp	r2, #9
 800782e:	d236      	bcs.n	800789e <_strtod_l+0xa6>
 8007830:	2a00      	cmp	r2, #0
 8007832:	d03e      	beq.n	80078b2 <_strtod_l+0xba>
 8007834:	2300      	movs	r3, #0
 8007836:	930d      	str	r3, [sp, #52]	; 0x34
 8007838:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800783a:	782b      	ldrb	r3, [r5, #0]
 800783c:	2b30      	cmp	r3, #48	; 0x30
 800783e:	f040 80ac 	bne.w	800799a <_strtod_l+0x1a2>
 8007842:	786b      	ldrb	r3, [r5, #1]
 8007844:	2b58      	cmp	r3, #88	; 0x58
 8007846:	d001      	beq.n	800784c <_strtod_l+0x54>
 8007848:	2b78      	cmp	r3, #120	; 0x78
 800784a:	d167      	bne.n	800791c <_strtod_l+0x124>
 800784c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800784e:	9301      	str	r3, [sp, #4]
 8007850:	ab1c      	add	r3, sp, #112	; 0x70
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	9702      	str	r7, [sp, #8]
 8007856:	ab1d      	add	r3, sp, #116	; 0x74
 8007858:	4a88      	ldr	r2, [pc, #544]	; (8007a7c <_strtod_l+0x284>)
 800785a:	a91b      	add	r1, sp, #108	; 0x6c
 800785c:	4648      	mov	r0, r9
 800785e:	f001 fcf2 	bl	8009246 <__gethex>
 8007862:	f010 0407 	ands.w	r4, r0, #7
 8007866:	4606      	mov	r6, r0
 8007868:	d005      	beq.n	8007876 <_strtod_l+0x7e>
 800786a:	2c06      	cmp	r4, #6
 800786c:	d12b      	bne.n	80078c6 <_strtod_l+0xce>
 800786e:	3501      	adds	r5, #1
 8007870:	2300      	movs	r3, #0
 8007872:	951b      	str	r5, [sp, #108]	; 0x6c
 8007874:	930d      	str	r3, [sp, #52]	; 0x34
 8007876:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007878:	2b00      	cmp	r3, #0
 800787a:	f040 859a 	bne.w	80083b2 <_strtod_l+0xbba>
 800787e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007880:	b1e3      	cbz	r3, 80078bc <_strtod_l+0xc4>
 8007882:	4652      	mov	r2, sl
 8007884:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007888:	ec43 2b10 	vmov	d0, r2, r3
 800788c:	b021      	add	sp, #132	; 0x84
 800788e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007892:	2a2b      	cmp	r2, #43	; 0x2b
 8007894:	d015      	beq.n	80078c2 <_strtod_l+0xca>
 8007896:	2a2d      	cmp	r2, #45	; 0x2d
 8007898:	d004      	beq.n	80078a4 <_strtod_l+0xac>
 800789a:	2a20      	cmp	r2, #32
 800789c:	d1ca      	bne.n	8007834 <_strtod_l+0x3c>
 800789e:	3301      	adds	r3, #1
 80078a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80078a2:	e7bf      	b.n	8007824 <_strtod_l+0x2c>
 80078a4:	2201      	movs	r2, #1
 80078a6:	920d      	str	r2, [sp, #52]	; 0x34
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80078ac:	785b      	ldrb	r3, [r3, #1]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1c2      	bne.n	8007838 <_strtod_l+0x40>
 80078b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f040 8579 	bne.w	80083ae <_strtod_l+0xbb6>
 80078bc:	4652      	mov	r2, sl
 80078be:	465b      	mov	r3, fp
 80078c0:	e7e2      	b.n	8007888 <_strtod_l+0x90>
 80078c2:	2200      	movs	r2, #0
 80078c4:	e7ef      	b.n	80078a6 <_strtod_l+0xae>
 80078c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80078c8:	b13a      	cbz	r2, 80078da <_strtod_l+0xe2>
 80078ca:	2135      	movs	r1, #53	; 0x35
 80078cc:	a81e      	add	r0, sp, #120	; 0x78
 80078ce:	f002 fb8d 	bl	8009fec <__copybits>
 80078d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80078d4:	4648      	mov	r0, r9
 80078d6:	f001 fffa 	bl	80098ce <_Bfree>
 80078da:	3c01      	subs	r4, #1
 80078dc:	2c04      	cmp	r4, #4
 80078de:	d806      	bhi.n	80078ee <_strtod_l+0xf6>
 80078e0:	e8df f004 	tbb	[pc, r4]
 80078e4:	1714030a 	.word	0x1714030a
 80078e8:	0a          	.byte	0x0a
 80078e9:	00          	.byte	0x00
 80078ea:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80078ee:	0730      	lsls	r0, r6, #28
 80078f0:	d5c1      	bpl.n	8007876 <_strtod_l+0x7e>
 80078f2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80078f6:	e7be      	b.n	8007876 <_strtod_l+0x7e>
 80078f8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80078fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80078fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007902:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007906:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800790a:	e7f0      	b.n	80078ee <_strtod_l+0xf6>
 800790c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007a80 <_strtod_l+0x288>
 8007910:	e7ed      	b.n	80078ee <_strtod_l+0xf6>
 8007912:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007916:	f04f 3aff 	mov.w	sl, #4294967295
 800791a:	e7e8      	b.n	80078ee <_strtod_l+0xf6>
 800791c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	921b      	str	r2, [sp, #108]	; 0x6c
 8007922:	785b      	ldrb	r3, [r3, #1]
 8007924:	2b30      	cmp	r3, #48	; 0x30
 8007926:	d0f9      	beq.n	800791c <_strtod_l+0x124>
 8007928:	2b00      	cmp	r3, #0
 800792a:	d0a4      	beq.n	8007876 <_strtod_l+0x7e>
 800792c:	2301      	movs	r3, #1
 800792e:	2500      	movs	r5, #0
 8007930:	9306      	str	r3, [sp, #24]
 8007932:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007934:	9308      	str	r3, [sp, #32]
 8007936:	9507      	str	r5, [sp, #28]
 8007938:	9505      	str	r5, [sp, #20]
 800793a:	220a      	movs	r2, #10
 800793c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800793e:	7807      	ldrb	r7, [r0, #0]
 8007940:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007944:	b2d9      	uxtb	r1, r3
 8007946:	2909      	cmp	r1, #9
 8007948:	d929      	bls.n	800799e <_strtod_l+0x1a6>
 800794a:	4622      	mov	r2, r4
 800794c:	f8d8 1000 	ldr.w	r1, [r8]
 8007950:	f002 fda0 	bl	800a494 <strncmp>
 8007954:	2800      	cmp	r0, #0
 8007956:	d031      	beq.n	80079bc <_strtod_l+0x1c4>
 8007958:	2000      	movs	r0, #0
 800795a:	9c05      	ldr	r4, [sp, #20]
 800795c:	9004      	str	r0, [sp, #16]
 800795e:	463b      	mov	r3, r7
 8007960:	4602      	mov	r2, r0
 8007962:	2b65      	cmp	r3, #101	; 0x65
 8007964:	d001      	beq.n	800796a <_strtod_l+0x172>
 8007966:	2b45      	cmp	r3, #69	; 0x45
 8007968:	d114      	bne.n	8007994 <_strtod_l+0x19c>
 800796a:	b924      	cbnz	r4, 8007976 <_strtod_l+0x17e>
 800796c:	b910      	cbnz	r0, 8007974 <_strtod_l+0x17c>
 800796e:	9b06      	ldr	r3, [sp, #24]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d09e      	beq.n	80078b2 <_strtod_l+0xba>
 8007974:	2400      	movs	r4, #0
 8007976:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007978:	1c73      	adds	r3, r6, #1
 800797a:	931b      	str	r3, [sp, #108]	; 0x6c
 800797c:	7873      	ldrb	r3, [r6, #1]
 800797e:	2b2b      	cmp	r3, #43	; 0x2b
 8007980:	d078      	beq.n	8007a74 <_strtod_l+0x27c>
 8007982:	2b2d      	cmp	r3, #45	; 0x2d
 8007984:	d070      	beq.n	8007a68 <_strtod_l+0x270>
 8007986:	f04f 0c00 	mov.w	ip, #0
 800798a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800798e:	2f09      	cmp	r7, #9
 8007990:	d97c      	bls.n	8007a8c <_strtod_l+0x294>
 8007992:	961b      	str	r6, [sp, #108]	; 0x6c
 8007994:	f04f 0e00 	mov.w	lr, #0
 8007998:	e09a      	b.n	8007ad0 <_strtod_l+0x2d8>
 800799a:	2300      	movs	r3, #0
 800799c:	e7c7      	b.n	800792e <_strtod_l+0x136>
 800799e:	9905      	ldr	r1, [sp, #20]
 80079a0:	2908      	cmp	r1, #8
 80079a2:	bfdd      	ittte	le
 80079a4:	9907      	ldrle	r1, [sp, #28]
 80079a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80079aa:	9307      	strle	r3, [sp, #28]
 80079ac:	fb02 3505 	mlagt	r5, r2, r5, r3
 80079b0:	9b05      	ldr	r3, [sp, #20]
 80079b2:	3001      	adds	r0, #1
 80079b4:	3301      	adds	r3, #1
 80079b6:	9305      	str	r3, [sp, #20]
 80079b8:	901b      	str	r0, [sp, #108]	; 0x6c
 80079ba:	e7bf      	b.n	800793c <_strtod_l+0x144>
 80079bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079be:	191a      	adds	r2, r3, r4
 80079c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80079c2:	9a05      	ldr	r2, [sp, #20]
 80079c4:	5d1b      	ldrb	r3, [r3, r4]
 80079c6:	2a00      	cmp	r2, #0
 80079c8:	d037      	beq.n	8007a3a <_strtod_l+0x242>
 80079ca:	9c05      	ldr	r4, [sp, #20]
 80079cc:	4602      	mov	r2, r0
 80079ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80079d2:	2909      	cmp	r1, #9
 80079d4:	d913      	bls.n	80079fe <_strtod_l+0x206>
 80079d6:	2101      	movs	r1, #1
 80079d8:	9104      	str	r1, [sp, #16]
 80079da:	e7c2      	b.n	8007962 <_strtod_l+0x16a>
 80079dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80079e2:	785b      	ldrb	r3, [r3, #1]
 80079e4:	3001      	adds	r0, #1
 80079e6:	2b30      	cmp	r3, #48	; 0x30
 80079e8:	d0f8      	beq.n	80079dc <_strtod_l+0x1e4>
 80079ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80079ee:	2a08      	cmp	r2, #8
 80079f0:	f200 84e4 	bhi.w	80083bc <_strtod_l+0xbc4>
 80079f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80079f6:	9208      	str	r2, [sp, #32]
 80079f8:	4602      	mov	r2, r0
 80079fa:	2000      	movs	r0, #0
 80079fc:	4604      	mov	r4, r0
 80079fe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007a02:	f100 0101 	add.w	r1, r0, #1
 8007a06:	d012      	beq.n	8007a2e <_strtod_l+0x236>
 8007a08:	440a      	add	r2, r1
 8007a0a:	eb00 0c04 	add.w	ip, r0, r4
 8007a0e:	4621      	mov	r1, r4
 8007a10:	270a      	movs	r7, #10
 8007a12:	458c      	cmp	ip, r1
 8007a14:	d113      	bne.n	8007a3e <_strtod_l+0x246>
 8007a16:	1821      	adds	r1, r4, r0
 8007a18:	2908      	cmp	r1, #8
 8007a1a:	f104 0401 	add.w	r4, r4, #1
 8007a1e:	4404      	add	r4, r0
 8007a20:	dc19      	bgt.n	8007a56 <_strtod_l+0x25e>
 8007a22:	9b07      	ldr	r3, [sp, #28]
 8007a24:	210a      	movs	r1, #10
 8007a26:	fb01 e303 	mla	r3, r1, r3, lr
 8007a2a:	9307      	str	r3, [sp, #28]
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a30:	1c58      	adds	r0, r3, #1
 8007a32:	901b      	str	r0, [sp, #108]	; 0x6c
 8007a34:	785b      	ldrb	r3, [r3, #1]
 8007a36:	4608      	mov	r0, r1
 8007a38:	e7c9      	b.n	80079ce <_strtod_l+0x1d6>
 8007a3a:	9805      	ldr	r0, [sp, #20]
 8007a3c:	e7d3      	b.n	80079e6 <_strtod_l+0x1ee>
 8007a3e:	2908      	cmp	r1, #8
 8007a40:	f101 0101 	add.w	r1, r1, #1
 8007a44:	dc03      	bgt.n	8007a4e <_strtod_l+0x256>
 8007a46:	9b07      	ldr	r3, [sp, #28]
 8007a48:	437b      	muls	r3, r7
 8007a4a:	9307      	str	r3, [sp, #28]
 8007a4c:	e7e1      	b.n	8007a12 <_strtod_l+0x21a>
 8007a4e:	2910      	cmp	r1, #16
 8007a50:	bfd8      	it	le
 8007a52:	437d      	mulle	r5, r7
 8007a54:	e7dd      	b.n	8007a12 <_strtod_l+0x21a>
 8007a56:	2c10      	cmp	r4, #16
 8007a58:	bfdc      	itt	le
 8007a5a:	210a      	movle	r1, #10
 8007a5c:	fb01 e505 	mlale	r5, r1, r5, lr
 8007a60:	e7e4      	b.n	8007a2c <_strtod_l+0x234>
 8007a62:	2301      	movs	r3, #1
 8007a64:	9304      	str	r3, [sp, #16]
 8007a66:	e781      	b.n	800796c <_strtod_l+0x174>
 8007a68:	f04f 0c01 	mov.w	ip, #1
 8007a6c:	1cb3      	adds	r3, r6, #2
 8007a6e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007a70:	78b3      	ldrb	r3, [r6, #2]
 8007a72:	e78a      	b.n	800798a <_strtod_l+0x192>
 8007a74:	f04f 0c00 	mov.w	ip, #0
 8007a78:	e7f8      	b.n	8007a6c <_strtod_l+0x274>
 8007a7a:	bf00      	nop
 8007a7c:	0800c0b8 	.word	0x0800c0b8
 8007a80:	7ff00000 	.word	0x7ff00000
 8007a84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a86:	1c5f      	adds	r7, r3, #1
 8007a88:	971b      	str	r7, [sp, #108]	; 0x6c
 8007a8a:	785b      	ldrb	r3, [r3, #1]
 8007a8c:	2b30      	cmp	r3, #48	; 0x30
 8007a8e:	d0f9      	beq.n	8007a84 <_strtod_l+0x28c>
 8007a90:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007a94:	2f08      	cmp	r7, #8
 8007a96:	f63f af7d 	bhi.w	8007994 <_strtod_l+0x19c>
 8007a9a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007a9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007aa0:	930a      	str	r3, [sp, #40]	; 0x28
 8007aa2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007aa4:	1c5f      	adds	r7, r3, #1
 8007aa6:	971b      	str	r7, [sp, #108]	; 0x6c
 8007aa8:	785b      	ldrb	r3, [r3, #1]
 8007aaa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007aae:	f1b8 0f09 	cmp.w	r8, #9
 8007ab2:	d937      	bls.n	8007b24 <_strtod_l+0x32c>
 8007ab4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ab6:	1a7f      	subs	r7, r7, r1
 8007ab8:	2f08      	cmp	r7, #8
 8007aba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007abe:	dc37      	bgt.n	8007b30 <_strtod_l+0x338>
 8007ac0:	45be      	cmp	lr, r7
 8007ac2:	bfa8      	it	ge
 8007ac4:	46be      	movge	lr, r7
 8007ac6:	f1bc 0f00 	cmp.w	ip, #0
 8007aca:	d001      	beq.n	8007ad0 <_strtod_l+0x2d8>
 8007acc:	f1ce 0e00 	rsb	lr, lr, #0
 8007ad0:	2c00      	cmp	r4, #0
 8007ad2:	d151      	bne.n	8007b78 <_strtod_l+0x380>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	f47f aece 	bne.w	8007876 <_strtod_l+0x7e>
 8007ada:	9a06      	ldr	r2, [sp, #24]
 8007adc:	2a00      	cmp	r2, #0
 8007ade:	f47f aeca 	bne.w	8007876 <_strtod_l+0x7e>
 8007ae2:	9a04      	ldr	r2, [sp, #16]
 8007ae4:	2a00      	cmp	r2, #0
 8007ae6:	f47f aee4 	bne.w	80078b2 <_strtod_l+0xba>
 8007aea:	2b4e      	cmp	r3, #78	; 0x4e
 8007aec:	d027      	beq.n	8007b3e <_strtod_l+0x346>
 8007aee:	dc21      	bgt.n	8007b34 <_strtod_l+0x33c>
 8007af0:	2b49      	cmp	r3, #73	; 0x49
 8007af2:	f47f aede 	bne.w	80078b2 <_strtod_l+0xba>
 8007af6:	49a0      	ldr	r1, [pc, #640]	; (8007d78 <_strtod_l+0x580>)
 8007af8:	a81b      	add	r0, sp, #108	; 0x6c
 8007afa:	f001 fdd7 	bl	80096ac <__match>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f43f aed7 	beq.w	80078b2 <_strtod_l+0xba>
 8007b04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b06:	499d      	ldr	r1, [pc, #628]	; (8007d7c <_strtod_l+0x584>)
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	a81b      	add	r0, sp, #108	; 0x6c
 8007b0c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007b0e:	f001 fdcd 	bl	80096ac <__match>
 8007b12:	b910      	cbnz	r0, 8007b1a <_strtod_l+0x322>
 8007b14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b16:	3301      	adds	r3, #1
 8007b18:	931b      	str	r3, [sp, #108]	; 0x6c
 8007b1a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007d90 <_strtod_l+0x598>
 8007b1e:	f04f 0a00 	mov.w	sl, #0
 8007b22:	e6a8      	b.n	8007876 <_strtod_l+0x7e>
 8007b24:	210a      	movs	r1, #10
 8007b26:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007b2a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007b2e:	e7b8      	b.n	8007aa2 <_strtod_l+0x2aa>
 8007b30:	46be      	mov	lr, r7
 8007b32:	e7c8      	b.n	8007ac6 <_strtod_l+0x2ce>
 8007b34:	2b69      	cmp	r3, #105	; 0x69
 8007b36:	d0de      	beq.n	8007af6 <_strtod_l+0x2fe>
 8007b38:	2b6e      	cmp	r3, #110	; 0x6e
 8007b3a:	f47f aeba 	bne.w	80078b2 <_strtod_l+0xba>
 8007b3e:	4990      	ldr	r1, [pc, #576]	; (8007d80 <_strtod_l+0x588>)
 8007b40:	a81b      	add	r0, sp, #108	; 0x6c
 8007b42:	f001 fdb3 	bl	80096ac <__match>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f43f aeb3 	beq.w	80078b2 <_strtod_l+0xba>
 8007b4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	2b28      	cmp	r3, #40	; 0x28
 8007b52:	d10e      	bne.n	8007b72 <_strtod_l+0x37a>
 8007b54:	aa1e      	add	r2, sp, #120	; 0x78
 8007b56:	498b      	ldr	r1, [pc, #556]	; (8007d84 <_strtod_l+0x58c>)
 8007b58:	a81b      	add	r0, sp, #108	; 0x6c
 8007b5a:	f001 fdbb 	bl	80096d4 <__hexnan>
 8007b5e:	2805      	cmp	r0, #5
 8007b60:	d107      	bne.n	8007b72 <_strtod_l+0x37a>
 8007b62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007b64:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007b68:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007b6c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007b70:	e681      	b.n	8007876 <_strtod_l+0x7e>
 8007b72:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007d98 <_strtod_l+0x5a0>
 8007b76:	e7d2      	b.n	8007b1e <_strtod_l+0x326>
 8007b78:	ebae 0302 	sub.w	r3, lr, r2
 8007b7c:	9306      	str	r3, [sp, #24]
 8007b7e:	9b05      	ldr	r3, [sp, #20]
 8007b80:	9807      	ldr	r0, [sp, #28]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	bf08      	it	eq
 8007b86:	4623      	moveq	r3, r4
 8007b88:	2c10      	cmp	r4, #16
 8007b8a:	9305      	str	r3, [sp, #20]
 8007b8c:	46a0      	mov	r8, r4
 8007b8e:	bfa8      	it	ge
 8007b90:	f04f 0810 	movge.w	r8, #16
 8007b94:	f7f8 fcc6 	bl	8000524 <__aeabi_ui2d>
 8007b98:	2c09      	cmp	r4, #9
 8007b9a:	4682      	mov	sl, r0
 8007b9c:	468b      	mov	fp, r1
 8007b9e:	dc13      	bgt.n	8007bc8 <_strtod_l+0x3d0>
 8007ba0:	9b06      	ldr	r3, [sp, #24]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f43f ae67 	beq.w	8007876 <_strtod_l+0x7e>
 8007ba8:	9b06      	ldr	r3, [sp, #24]
 8007baa:	dd7a      	ble.n	8007ca2 <_strtod_l+0x4aa>
 8007bac:	2b16      	cmp	r3, #22
 8007bae:	dc61      	bgt.n	8007c74 <_strtod_l+0x47c>
 8007bb0:	4a75      	ldr	r2, [pc, #468]	; (8007d88 <_strtod_l+0x590>)
 8007bb2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007bb6:	e9de 0100 	ldrd	r0, r1, [lr]
 8007bba:	4652      	mov	r2, sl
 8007bbc:	465b      	mov	r3, fp
 8007bbe:	f7f8 fd2b 	bl	8000618 <__aeabi_dmul>
 8007bc2:	4682      	mov	sl, r0
 8007bc4:	468b      	mov	fp, r1
 8007bc6:	e656      	b.n	8007876 <_strtod_l+0x7e>
 8007bc8:	4b6f      	ldr	r3, [pc, #444]	; (8007d88 <_strtod_l+0x590>)
 8007bca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007bce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007bd2:	f7f8 fd21 	bl	8000618 <__aeabi_dmul>
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	4628      	mov	r0, r5
 8007bda:	460f      	mov	r7, r1
 8007bdc:	f7f8 fca2 	bl	8000524 <__aeabi_ui2d>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	4630      	mov	r0, r6
 8007be6:	4639      	mov	r1, r7
 8007be8:	f7f8 fb60 	bl	80002ac <__adddf3>
 8007bec:	2c0f      	cmp	r4, #15
 8007bee:	4682      	mov	sl, r0
 8007bf0:	468b      	mov	fp, r1
 8007bf2:	ddd5      	ble.n	8007ba0 <_strtod_l+0x3a8>
 8007bf4:	9b06      	ldr	r3, [sp, #24]
 8007bf6:	eba4 0808 	sub.w	r8, r4, r8
 8007bfa:	4498      	add	r8, r3
 8007bfc:	f1b8 0f00 	cmp.w	r8, #0
 8007c00:	f340 8096 	ble.w	8007d30 <_strtod_l+0x538>
 8007c04:	f018 030f 	ands.w	r3, r8, #15
 8007c08:	d00a      	beq.n	8007c20 <_strtod_l+0x428>
 8007c0a:	495f      	ldr	r1, [pc, #380]	; (8007d88 <_strtod_l+0x590>)
 8007c0c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c10:	4652      	mov	r2, sl
 8007c12:	465b      	mov	r3, fp
 8007c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c18:	f7f8 fcfe 	bl	8000618 <__aeabi_dmul>
 8007c1c:	4682      	mov	sl, r0
 8007c1e:	468b      	mov	fp, r1
 8007c20:	f038 080f 	bics.w	r8, r8, #15
 8007c24:	d073      	beq.n	8007d0e <_strtod_l+0x516>
 8007c26:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007c2a:	dd47      	ble.n	8007cbc <_strtod_l+0x4c4>
 8007c2c:	2400      	movs	r4, #0
 8007c2e:	46a0      	mov	r8, r4
 8007c30:	9407      	str	r4, [sp, #28]
 8007c32:	9405      	str	r4, [sp, #20]
 8007c34:	2322      	movs	r3, #34	; 0x22
 8007c36:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007d90 <_strtod_l+0x598>
 8007c3a:	f8c9 3000 	str.w	r3, [r9]
 8007c3e:	f04f 0a00 	mov.w	sl, #0
 8007c42:	9b07      	ldr	r3, [sp, #28]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f43f ae16 	beq.w	8007876 <_strtod_l+0x7e>
 8007c4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c4c:	4648      	mov	r0, r9
 8007c4e:	f001 fe3e 	bl	80098ce <_Bfree>
 8007c52:	9905      	ldr	r1, [sp, #20]
 8007c54:	4648      	mov	r0, r9
 8007c56:	f001 fe3a 	bl	80098ce <_Bfree>
 8007c5a:	4641      	mov	r1, r8
 8007c5c:	4648      	mov	r0, r9
 8007c5e:	f001 fe36 	bl	80098ce <_Bfree>
 8007c62:	9907      	ldr	r1, [sp, #28]
 8007c64:	4648      	mov	r0, r9
 8007c66:	f001 fe32 	bl	80098ce <_Bfree>
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	4648      	mov	r0, r9
 8007c6e:	f001 fe2e 	bl	80098ce <_Bfree>
 8007c72:	e600      	b.n	8007876 <_strtod_l+0x7e>
 8007c74:	9a06      	ldr	r2, [sp, #24]
 8007c76:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	dbba      	blt.n	8007bf4 <_strtod_l+0x3fc>
 8007c7e:	4d42      	ldr	r5, [pc, #264]	; (8007d88 <_strtod_l+0x590>)
 8007c80:	f1c4 040f 	rsb	r4, r4, #15
 8007c84:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007c88:	4652      	mov	r2, sl
 8007c8a:	465b      	mov	r3, fp
 8007c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c90:	f7f8 fcc2 	bl	8000618 <__aeabi_dmul>
 8007c94:	9b06      	ldr	r3, [sp, #24]
 8007c96:	1b1c      	subs	r4, r3, r4
 8007c98:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007c9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ca0:	e78d      	b.n	8007bbe <_strtod_l+0x3c6>
 8007ca2:	f113 0f16 	cmn.w	r3, #22
 8007ca6:	dba5      	blt.n	8007bf4 <_strtod_l+0x3fc>
 8007ca8:	4a37      	ldr	r2, [pc, #220]	; (8007d88 <_strtod_l+0x590>)
 8007caa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007cae:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007cb2:	4650      	mov	r0, sl
 8007cb4:	4659      	mov	r1, fp
 8007cb6:	f7f8 fdd9 	bl	800086c <__aeabi_ddiv>
 8007cba:	e782      	b.n	8007bc2 <_strtod_l+0x3ca>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	4e33      	ldr	r6, [pc, #204]	; (8007d8c <_strtod_l+0x594>)
 8007cc0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007cc4:	4650      	mov	r0, sl
 8007cc6:	4659      	mov	r1, fp
 8007cc8:	461d      	mov	r5, r3
 8007cca:	f1b8 0f01 	cmp.w	r8, #1
 8007cce:	dc21      	bgt.n	8007d14 <_strtod_l+0x51c>
 8007cd0:	b10b      	cbz	r3, 8007cd6 <_strtod_l+0x4de>
 8007cd2:	4682      	mov	sl, r0
 8007cd4:	468b      	mov	fp, r1
 8007cd6:	4b2d      	ldr	r3, [pc, #180]	; (8007d8c <_strtod_l+0x594>)
 8007cd8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007cdc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007ce0:	4652      	mov	r2, sl
 8007ce2:	465b      	mov	r3, fp
 8007ce4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007ce8:	f7f8 fc96 	bl	8000618 <__aeabi_dmul>
 8007cec:	4b28      	ldr	r3, [pc, #160]	; (8007d90 <_strtod_l+0x598>)
 8007cee:	460a      	mov	r2, r1
 8007cf0:	400b      	ands	r3, r1
 8007cf2:	4928      	ldr	r1, [pc, #160]	; (8007d94 <_strtod_l+0x59c>)
 8007cf4:	428b      	cmp	r3, r1
 8007cf6:	4682      	mov	sl, r0
 8007cf8:	d898      	bhi.n	8007c2c <_strtod_l+0x434>
 8007cfa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007cfe:	428b      	cmp	r3, r1
 8007d00:	bf86      	itte	hi
 8007d02:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007d9c <_strtod_l+0x5a4>
 8007d06:	f04f 3aff 	movhi.w	sl, #4294967295
 8007d0a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007d0e:	2300      	movs	r3, #0
 8007d10:	9304      	str	r3, [sp, #16]
 8007d12:	e077      	b.n	8007e04 <_strtod_l+0x60c>
 8007d14:	f018 0f01 	tst.w	r8, #1
 8007d18:	d006      	beq.n	8007d28 <_strtod_l+0x530>
 8007d1a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	f7f8 fc79 	bl	8000618 <__aeabi_dmul>
 8007d26:	2301      	movs	r3, #1
 8007d28:	3501      	adds	r5, #1
 8007d2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007d2e:	e7cc      	b.n	8007cca <_strtod_l+0x4d2>
 8007d30:	d0ed      	beq.n	8007d0e <_strtod_l+0x516>
 8007d32:	f1c8 0800 	rsb	r8, r8, #0
 8007d36:	f018 020f 	ands.w	r2, r8, #15
 8007d3a:	d00a      	beq.n	8007d52 <_strtod_l+0x55a>
 8007d3c:	4b12      	ldr	r3, [pc, #72]	; (8007d88 <_strtod_l+0x590>)
 8007d3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d42:	4650      	mov	r0, sl
 8007d44:	4659      	mov	r1, fp
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	f7f8 fd8f 	bl	800086c <__aeabi_ddiv>
 8007d4e:	4682      	mov	sl, r0
 8007d50:	468b      	mov	fp, r1
 8007d52:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007d56:	d0da      	beq.n	8007d0e <_strtod_l+0x516>
 8007d58:	f1b8 0f1f 	cmp.w	r8, #31
 8007d5c:	dd20      	ble.n	8007da0 <_strtod_l+0x5a8>
 8007d5e:	2400      	movs	r4, #0
 8007d60:	46a0      	mov	r8, r4
 8007d62:	9407      	str	r4, [sp, #28]
 8007d64:	9405      	str	r4, [sp, #20]
 8007d66:	2322      	movs	r3, #34	; 0x22
 8007d68:	f04f 0a00 	mov.w	sl, #0
 8007d6c:	f04f 0b00 	mov.w	fp, #0
 8007d70:	f8c9 3000 	str.w	r3, [r9]
 8007d74:	e765      	b.n	8007c42 <_strtod_l+0x44a>
 8007d76:	bf00      	nop
 8007d78:	0800c081 	.word	0x0800c081
 8007d7c:	0800c10b 	.word	0x0800c10b
 8007d80:	0800c089 	.word	0x0800c089
 8007d84:	0800c0cc 	.word	0x0800c0cc
 8007d88:	0800c148 	.word	0x0800c148
 8007d8c:	0800c120 	.word	0x0800c120
 8007d90:	7ff00000 	.word	0x7ff00000
 8007d94:	7ca00000 	.word	0x7ca00000
 8007d98:	fff80000 	.word	0xfff80000
 8007d9c:	7fefffff 	.word	0x7fefffff
 8007da0:	f018 0310 	ands.w	r3, r8, #16
 8007da4:	bf18      	it	ne
 8007da6:	236a      	movne	r3, #106	; 0x6a
 8007da8:	4da0      	ldr	r5, [pc, #640]	; (800802c <_strtod_l+0x834>)
 8007daa:	9304      	str	r3, [sp, #16]
 8007dac:	4650      	mov	r0, sl
 8007dae:	4659      	mov	r1, fp
 8007db0:	2300      	movs	r3, #0
 8007db2:	f1b8 0f00 	cmp.w	r8, #0
 8007db6:	f300 810a 	bgt.w	8007fce <_strtod_l+0x7d6>
 8007dba:	b10b      	cbz	r3, 8007dc0 <_strtod_l+0x5c8>
 8007dbc:	4682      	mov	sl, r0
 8007dbe:	468b      	mov	fp, r1
 8007dc0:	9b04      	ldr	r3, [sp, #16]
 8007dc2:	b1bb      	cbz	r3, 8007df4 <_strtod_l+0x5fc>
 8007dc4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007dc8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	4659      	mov	r1, fp
 8007dd0:	dd10      	ble.n	8007df4 <_strtod_l+0x5fc>
 8007dd2:	2b1f      	cmp	r3, #31
 8007dd4:	f340 8107 	ble.w	8007fe6 <_strtod_l+0x7ee>
 8007dd8:	2b34      	cmp	r3, #52	; 0x34
 8007dda:	bfde      	ittt	le
 8007ddc:	3b20      	suble	r3, #32
 8007dde:	f04f 32ff 	movle.w	r2, #4294967295
 8007de2:	fa02 f303 	lslle.w	r3, r2, r3
 8007de6:	f04f 0a00 	mov.w	sl, #0
 8007dea:	bfcc      	ite	gt
 8007dec:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007df0:	ea03 0b01 	andle.w	fp, r3, r1
 8007df4:	2200      	movs	r2, #0
 8007df6:	2300      	movs	r3, #0
 8007df8:	4650      	mov	r0, sl
 8007dfa:	4659      	mov	r1, fp
 8007dfc:	f7f8 fe74 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	d1ac      	bne.n	8007d5e <_strtod_l+0x566>
 8007e04:	9b07      	ldr	r3, [sp, #28]
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	9a05      	ldr	r2, [sp, #20]
 8007e0a:	9908      	ldr	r1, [sp, #32]
 8007e0c:	4623      	mov	r3, r4
 8007e0e:	4648      	mov	r0, r9
 8007e10:	f001 fdaf 	bl	8009972 <__s2b>
 8007e14:	9007      	str	r0, [sp, #28]
 8007e16:	2800      	cmp	r0, #0
 8007e18:	f43f af08 	beq.w	8007c2c <_strtod_l+0x434>
 8007e1c:	9a06      	ldr	r2, [sp, #24]
 8007e1e:	9b06      	ldr	r3, [sp, #24]
 8007e20:	2a00      	cmp	r2, #0
 8007e22:	f1c3 0300 	rsb	r3, r3, #0
 8007e26:	bfa8      	it	ge
 8007e28:	2300      	movge	r3, #0
 8007e2a:	930e      	str	r3, [sp, #56]	; 0x38
 8007e2c:	2400      	movs	r4, #0
 8007e2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007e32:	9316      	str	r3, [sp, #88]	; 0x58
 8007e34:	46a0      	mov	r8, r4
 8007e36:	9b07      	ldr	r3, [sp, #28]
 8007e38:	4648      	mov	r0, r9
 8007e3a:	6859      	ldr	r1, [r3, #4]
 8007e3c:	f001 fd13 	bl	8009866 <_Balloc>
 8007e40:	9005      	str	r0, [sp, #20]
 8007e42:	2800      	cmp	r0, #0
 8007e44:	f43f aef6 	beq.w	8007c34 <_strtod_l+0x43c>
 8007e48:	9b07      	ldr	r3, [sp, #28]
 8007e4a:	691a      	ldr	r2, [r3, #16]
 8007e4c:	3202      	adds	r2, #2
 8007e4e:	f103 010c 	add.w	r1, r3, #12
 8007e52:	0092      	lsls	r2, r2, #2
 8007e54:	300c      	adds	r0, #12
 8007e56:	f001 fcfb 	bl	8009850 <memcpy>
 8007e5a:	aa1e      	add	r2, sp, #120	; 0x78
 8007e5c:	a91d      	add	r1, sp, #116	; 0x74
 8007e5e:	ec4b ab10 	vmov	d0, sl, fp
 8007e62:	4648      	mov	r0, r9
 8007e64:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007e68:	f002 f83e 	bl	8009ee8 <__d2b>
 8007e6c:	901c      	str	r0, [sp, #112]	; 0x70
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	f43f aee0 	beq.w	8007c34 <_strtod_l+0x43c>
 8007e74:	2101      	movs	r1, #1
 8007e76:	4648      	mov	r0, r9
 8007e78:	f001 fe07 	bl	8009a8a <__i2b>
 8007e7c:	4680      	mov	r8, r0
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	f43f aed8 	beq.w	8007c34 <_strtod_l+0x43c>
 8007e84:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007e86:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007e88:	2e00      	cmp	r6, #0
 8007e8a:	bfab      	itete	ge
 8007e8c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007e8e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007e90:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007e92:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007e94:	bfac      	ite	ge
 8007e96:	18f7      	addge	r7, r6, r3
 8007e98:	1b9d      	sublt	r5, r3, r6
 8007e9a:	9b04      	ldr	r3, [sp, #16]
 8007e9c:	1af6      	subs	r6, r6, r3
 8007e9e:	4416      	add	r6, r2
 8007ea0:	4b63      	ldr	r3, [pc, #396]	; (8008030 <_strtod_l+0x838>)
 8007ea2:	3e01      	subs	r6, #1
 8007ea4:	429e      	cmp	r6, r3
 8007ea6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007eaa:	f280 80af 	bge.w	800800c <_strtod_l+0x814>
 8007eae:	1b9b      	subs	r3, r3, r6
 8007eb0:	2b1f      	cmp	r3, #31
 8007eb2:	eba2 0203 	sub.w	r2, r2, r3
 8007eb6:	f04f 0101 	mov.w	r1, #1
 8007eba:	f300 809b 	bgt.w	8007ff4 <_strtod_l+0x7fc>
 8007ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec2:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec8:	18be      	adds	r6, r7, r2
 8007eca:	9b04      	ldr	r3, [sp, #16]
 8007ecc:	42b7      	cmp	r7, r6
 8007ece:	4415      	add	r5, r2
 8007ed0:	441d      	add	r5, r3
 8007ed2:	463b      	mov	r3, r7
 8007ed4:	bfa8      	it	ge
 8007ed6:	4633      	movge	r3, r6
 8007ed8:	42ab      	cmp	r3, r5
 8007eda:	bfa8      	it	ge
 8007edc:	462b      	movge	r3, r5
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	bfc2      	ittt	gt
 8007ee2:	1af6      	subgt	r6, r6, r3
 8007ee4:	1aed      	subgt	r5, r5, r3
 8007ee6:	1aff      	subgt	r7, r7, r3
 8007ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007eea:	b1bb      	cbz	r3, 8007f1c <_strtod_l+0x724>
 8007eec:	4641      	mov	r1, r8
 8007eee:	461a      	mov	r2, r3
 8007ef0:	4648      	mov	r0, r9
 8007ef2:	f001 fe69 	bl	8009bc8 <__pow5mult>
 8007ef6:	4680      	mov	r8, r0
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	f43f ae9b 	beq.w	8007c34 <_strtod_l+0x43c>
 8007efe:	4601      	mov	r1, r0
 8007f00:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f02:	4648      	mov	r0, r9
 8007f04:	f001 fdca 	bl	8009a9c <__multiply>
 8007f08:	900c      	str	r0, [sp, #48]	; 0x30
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	f43f ae92 	beq.w	8007c34 <_strtod_l+0x43c>
 8007f10:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f12:	4648      	mov	r0, r9
 8007f14:	f001 fcdb 	bl	80098ce <_Bfree>
 8007f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f1a:	931c      	str	r3, [sp, #112]	; 0x70
 8007f1c:	2e00      	cmp	r6, #0
 8007f1e:	dc7a      	bgt.n	8008016 <_strtod_l+0x81e>
 8007f20:	9b06      	ldr	r3, [sp, #24]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	dd08      	ble.n	8007f38 <_strtod_l+0x740>
 8007f26:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007f28:	9905      	ldr	r1, [sp, #20]
 8007f2a:	4648      	mov	r0, r9
 8007f2c:	f001 fe4c 	bl	8009bc8 <__pow5mult>
 8007f30:	9005      	str	r0, [sp, #20]
 8007f32:	2800      	cmp	r0, #0
 8007f34:	f43f ae7e 	beq.w	8007c34 <_strtod_l+0x43c>
 8007f38:	2d00      	cmp	r5, #0
 8007f3a:	dd08      	ble.n	8007f4e <_strtod_l+0x756>
 8007f3c:	462a      	mov	r2, r5
 8007f3e:	9905      	ldr	r1, [sp, #20]
 8007f40:	4648      	mov	r0, r9
 8007f42:	f001 fe8f 	bl	8009c64 <__lshift>
 8007f46:	9005      	str	r0, [sp, #20]
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	f43f ae73 	beq.w	8007c34 <_strtod_l+0x43c>
 8007f4e:	2f00      	cmp	r7, #0
 8007f50:	dd08      	ble.n	8007f64 <_strtod_l+0x76c>
 8007f52:	4641      	mov	r1, r8
 8007f54:	463a      	mov	r2, r7
 8007f56:	4648      	mov	r0, r9
 8007f58:	f001 fe84 	bl	8009c64 <__lshift>
 8007f5c:	4680      	mov	r8, r0
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	f43f ae68 	beq.w	8007c34 <_strtod_l+0x43c>
 8007f64:	9a05      	ldr	r2, [sp, #20]
 8007f66:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f68:	4648      	mov	r0, r9
 8007f6a:	f001 fee9 	bl	8009d40 <__mdiff>
 8007f6e:	4604      	mov	r4, r0
 8007f70:	2800      	cmp	r0, #0
 8007f72:	f43f ae5f 	beq.w	8007c34 <_strtod_l+0x43c>
 8007f76:	68c3      	ldr	r3, [r0, #12]
 8007f78:	930c      	str	r3, [sp, #48]	; 0x30
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60c3      	str	r3, [r0, #12]
 8007f7e:	4641      	mov	r1, r8
 8007f80:	f001 fec4 	bl	8009d0c <__mcmp>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	da55      	bge.n	8008034 <_strtod_l+0x83c>
 8007f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f8a:	b9e3      	cbnz	r3, 8007fc6 <_strtod_l+0x7ce>
 8007f8c:	f1ba 0f00 	cmp.w	sl, #0
 8007f90:	d119      	bne.n	8007fc6 <_strtod_l+0x7ce>
 8007f92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f96:	b9b3      	cbnz	r3, 8007fc6 <_strtod_l+0x7ce>
 8007f98:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f9c:	0d1b      	lsrs	r3, r3, #20
 8007f9e:	051b      	lsls	r3, r3, #20
 8007fa0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007fa4:	d90f      	bls.n	8007fc6 <_strtod_l+0x7ce>
 8007fa6:	6963      	ldr	r3, [r4, #20]
 8007fa8:	b913      	cbnz	r3, 8007fb0 <_strtod_l+0x7b8>
 8007faa:	6923      	ldr	r3, [r4, #16]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	dd0a      	ble.n	8007fc6 <_strtod_l+0x7ce>
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	4648      	mov	r0, r9
 8007fb6:	f001 fe55 	bl	8009c64 <__lshift>
 8007fba:	4641      	mov	r1, r8
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	f001 fea5 	bl	8009d0c <__mcmp>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	dc67      	bgt.n	8008096 <_strtod_l+0x89e>
 8007fc6:	9b04      	ldr	r3, [sp, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d171      	bne.n	80080b0 <_strtod_l+0x8b8>
 8007fcc:	e63d      	b.n	8007c4a <_strtod_l+0x452>
 8007fce:	f018 0f01 	tst.w	r8, #1
 8007fd2:	d004      	beq.n	8007fde <_strtod_l+0x7e6>
 8007fd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fd8:	f7f8 fb1e 	bl	8000618 <__aeabi_dmul>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007fe2:	3508      	adds	r5, #8
 8007fe4:	e6e5      	b.n	8007db2 <_strtod_l+0x5ba>
 8007fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fea:	fa02 f303 	lsl.w	r3, r2, r3
 8007fee:	ea03 0a0a 	and.w	sl, r3, sl
 8007ff2:	e6ff      	b.n	8007df4 <_strtod_l+0x5fc>
 8007ff4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007ff8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007ffc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008000:	36e2      	adds	r6, #226	; 0xe2
 8008002:	fa01 f306 	lsl.w	r3, r1, r6
 8008006:	930a      	str	r3, [sp, #40]	; 0x28
 8008008:	910f      	str	r1, [sp, #60]	; 0x3c
 800800a:	e75d      	b.n	8007ec8 <_strtod_l+0x6d0>
 800800c:	2300      	movs	r3, #0
 800800e:	930a      	str	r3, [sp, #40]	; 0x28
 8008010:	2301      	movs	r3, #1
 8008012:	930f      	str	r3, [sp, #60]	; 0x3c
 8008014:	e758      	b.n	8007ec8 <_strtod_l+0x6d0>
 8008016:	4632      	mov	r2, r6
 8008018:	991c      	ldr	r1, [sp, #112]	; 0x70
 800801a:	4648      	mov	r0, r9
 800801c:	f001 fe22 	bl	8009c64 <__lshift>
 8008020:	901c      	str	r0, [sp, #112]	; 0x70
 8008022:	2800      	cmp	r0, #0
 8008024:	f47f af7c 	bne.w	8007f20 <_strtod_l+0x728>
 8008028:	e604      	b.n	8007c34 <_strtod_l+0x43c>
 800802a:	bf00      	nop
 800802c:	0800c0e0 	.word	0x0800c0e0
 8008030:	fffffc02 	.word	0xfffffc02
 8008034:	465d      	mov	r5, fp
 8008036:	f040 8086 	bne.w	8008146 <_strtod_l+0x94e>
 800803a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800803c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008040:	b32a      	cbz	r2, 800808e <_strtod_l+0x896>
 8008042:	4aaf      	ldr	r2, [pc, #700]	; (8008300 <_strtod_l+0xb08>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d153      	bne.n	80080f0 <_strtod_l+0x8f8>
 8008048:	9b04      	ldr	r3, [sp, #16]
 800804a:	4650      	mov	r0, sl
 800804c:	b1d3      	cbz	r3, 8008084 <_strtod_l+0x88c>
 800804e:	4aad      	ldr	r2, [pc, #692]	; (8008304 <_strtod_l+0xb0c>)
 8008050:	402a      	ands	r2, r5
 8008052:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008056:	f04f 31ff 	mov.w	r1, #4294967295
 800805a:	d816      	bhi.n	800808a <_strtod_l+0x892>
 800805c:	0d12      	lsrs	r2, r2, #20
 800805e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008062:	fa01 f303 	lsl.w	r3, r1, r3
 8008066:	4298      	cmp	r0, r3
 8008068:	d142      	bne.n	80080f0 <_strtod_l+0x8f8>
 800806a:	4ba7      	ldr	r3, [pc, #668]	; (8008308 <_strtod_l+0xb10>)
 800806c:	429d      	cmp	r5, r3
 800806e:	d102      	bne.n	8008076 <_strtod_l+0x87e>
 8008070:	3001      	adds	r0, #1
 8008072:	f43f addf 	beq.w	8007c34 <_strtod_l+0x43c>
 8008076:	4ba3      	ldr	r3, [pc, #652]	; (8008304 <_strtod_l+0xb0c>)
 8008078:	402b      	ands	r3, r5
 800807a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800807e:	f04f 0a00 	mov.w	sl, #0
 8008082:	e7a0      	b.n	8007fc6 <_strtod_l+0x7ce>
 8008084:	f04f 33ff 	mov.w	r3, #4294967295
 8008088:	e7ed      	b.n	8008066 <_strtod_l+0x86e>
 800808a:	460b      	mov	r3, r1
 800808c:	e7eb      	b.n	8008066 <_strtod_l+0x86e>
 800808e:	bb7b      	cbnz	r3, 80080f0 <_strtod_l+0x8f8>
 8008090:	f1ba 0f00 	cmp.w	sl, #0
 8008094:	d12c      	bne.n	80080f0 <_strtod_l+0x8f8>
 8008096:	9904      	ldr	r1, [sp, #16]
 8008098:	4a9a      	ldr	r2, [pc, #616]	; (8008304 <_strtod_l+0xb0c>)
 800809a:	465b      	mov	r3, fp
 800809c:	b1f1      	cbz	r1, 80080dc <_strtod_l+0x8e4>
 800809e:	ea02 010b 	and.w	r1, r2, fp
 80080a2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80080a6:	dc19      	bgt.n	80080dc <_strtod_l+0x8e4>
 80080a8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80080ac:	f77f ae5b 	ble.w	8007d66 <_strtod_l+0x56e>
 80080b0:	4a96      	ldr	r2, [pc, #600]	; (800830c <_strtod_l+0xb14>)
 80080b2:	2300      	movs	r3, #0
 80080b4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80080b8:	4650      	mov	r0, sl
 80080ba:	4659      	mov	r1, fp
 80080bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80080c0:	f7f8 faaa 	bl	8000618 <__aeabi_dmul>
 80080c4:	4682      	mov	sl, r0
 80080c6:	468b      	mov	fp, r1
 80080c8:	2900      	cmp	r1, #0
 80080ca:	f47f adbe 	bne.w	8007c4a <_strtod_l+0x452>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f47f adbb 	bne.w	8007c4a <_strtod_l+0x452>
 80080d4:	2322      	movs	r3, #34	; 0x22
 80080d6:	f8c9 3000 	str.w	r3, [r9]
 80080da:	e5b6      	b.n	8007c4a <_strtod_l+0x452>
 80080dc:	4013      	ands	r3, r2
 80080de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80080e2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80080e6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80080ea:	f04f 3aff 	mov.w	sl, #4294967295
 80080ee:	e76a      	b.n	8007fc6 <_strtod_l+0x7ce>
 80080f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080f2:	b193      	cbz	r3, 800811a <_strtod_l+0x922>
 80080f4:	422b      	tst	r3, r5
 80080f6:	f43f af66 	beq.w	8007fc6 <_strtod_l+0x7ce>
 80080fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080fc:	9a04      	ldr	r2, [sp, #16]
 80080fe:	4650      	mov	r0, sl
 8008100:	4659      	mov	r1, fp
 8008102:	b173      	cbz	r3, 8008122 <_strtod_l+0x92a>
 8008104:	f7ff fb5c 	bl	80077c0 <sulp>
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008110:	f7f8 f8cc 	bl	80002ac <__adddf3>
 8008114:	4682      	mov	sl, r0
 8008116:	468b      	mov	fp, r1
 8008118:	e755      	b.n	8007fc6 <_strtod_l+0x7ce>
 800811a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800811c:	ea13 0f0a 	tst.w	r3, sl
 8008120:	e7e9      	b.n	80080f6 <_strtod_l+0x8fe>
 8008122:	f7ff fb4d 	bl	80077c0 <sulp>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800812e:	f7f8 f8bb 	bl	80002a8 <__aeabi_dsub>
 8008132:	2200      	movs	r2, #0
 8008134:	2300      	movs	r3, #0
 8008136:	4682      	mov	sl, r0
 8008138:	468b      	mov	fp, r1
 800813a:	f7f8 fcd5 	bl	8000ae8 <__aeabi_dcmpeq>
 800813e:	2800      	cmp	r0, #0
 8008140:	f47f ae11 	bne.w	8007d66 <_strtod_l+0x56e>
 8008144:	e73f      	b.n	8007fc6 <_strtod_l+0x7ce>
 8008146:	4641      	mov	r1, r8
 8008148:	4620      	mov	r0, r4
 800814a:	f001 ff1c 	bl	8009f86 <__ratio>
 800814e:	ec57 6b10 	vmov	r6, r7, d0
 8008152:	2200      	movs	r2, #0
 8008154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008158:	ee10 0a10 	vmov	r0, s0
 800815c:	4639      	mov	r1, r7
 800815e:	f7f8 fcd7 	bl	8000b10 <__aeabi_dcmple>
 8008162:	2800      	cmp	r0, #0
 8008164:	d077      	beq.n	8008256 <_strtod_l+0xa5e>
 8008166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008168:	2b00      	cmp	r3, #0
 800816a:	d04a      	beq.n	8008202 <_strtod_l+0xa0a>
 800816c:	4b68      	ldr	r3, [pc, #416]	; (8008310 <_strtod_l+0xb18>)
 800816e:	2200      	movs	r2, #0
 8008170:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008174:	4f66      	ldr	r7, [pc, #408]	; (8008310 <_strtod_l+0xb18>)
 8008176:	2600      	movs	r6, #0
 8008178:	4b62      	ldr	r3, [pc, #392]	; (8008304 <_strtod_l+0xb0c>)
 800817a:	402b      	ands	r3, r5
 800817c:	930f      	str	r3, [sp, #60]	; 0x3c
 800817e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008180:	4b64      	ldr	r3, [pc, #400]	; (8008314 <_strtod_l+0xb1c>)
 8008182:	429a      	cmp	r2, r3
 8008184:	f040 80ce 	bne.w	8008324 <_strtod_l+0xb2c>
 8008188:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800818c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008190:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8008194:	ec4b ab10 	vmov	d0, sl, fp
 8008198:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800819c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80081a0:	f001 fe2c 	bl	8009dfc <__ulp>
 80081a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80081a8:	ec53 2b10 	vmov	r2, r3, d0
 80081ac:	f7f8 fa34 	bl	8000618 <__aeabi_dmul>
 80081b0:	4652      	mov	r2, sl
 80081b2:	465b      	mov	r3, fp
 80081b4:	f7f8 f87a 	bl	80002ac <__adddf3>
 80081b8:	460b      	mov	r3, r1
 80081ba:	4952      	ldr	r1, [pc, #328]	; (8008304 <_strtod_l+0xb0c>)
 80081bc:	4a56      	ldr	r2, [pc, #344]	; (8008318 <_strtod_l+0xb20>)
 80081be:	4019      	ands	r1, r3
 80081c0:	4291      	cmp	r1, r2
 80081c2:	4682      	mov	sl, r0
 80081c4:	d95b      	bls.n	800827e <_strtod_l+0xa86>
 80081c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d103      	bne.n	80081d8 <_strtod_l+0x9e0>
 80081d0:	9b08      	ldr	r3, [sp, #32]
 80081d2:	3301      	adds	r3, #1
 80081d4:	f43f ad2e 	beq.w	8007c34 <_strtod_l+0x43c>
 80081d8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008308 <_strtod_l+0xb10>
 80081dc:	f04f 3aff 	mov.w	sl, #4294967295
 80081e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80081e2:	4648      	mov	r0, r9
 80081e4:	f001 fb73 	bl	80098ce <_Bfree>
 80081e8:	9905      	ldr	r1, [sp, #20]
 80081ea:	4648      	mov	r0, r9
 80081ec:	f001 fb6f 	bl	80098ce <_Bfree>
 80081f0:	4641      	mov	r1, r8
 80081f2:	4648      	mov	r0, r9
 80081f4:	f001 fb6b 	bl	80098ce <_Bfree>
 80081f8:	4621      	mov	r1, r4
 80081fa:	4648      	mov	r0, r9
 80081fc:	f001 fb67 	bl	80098ce <_Bfree>
 8008200:	e619      	b.n	8007e36 <_strtod_l+0x63e>
 8008202:	f1ba 0f00 	cmp.w	sl, #0
 8008206:	d11a      	bne.n	800823e <_strtod_l+0xa46>
 8008208:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800820c:	b9eb      	cbnz	r3, 800824a <_strtod_l+0xa52>
 800820e:	2200      	movs	r2, #0
 8008210:	4b3f      	ldr	r3, [pc, #252]	; (8008310 <_strtod_l+0xb18>)
 8008212:	4630      	mov	r0, r6
 8008214:	4639      	mov	r1, r7
 8008216:	f7f8 fc71 	bl	8000afc <__aeabi_dcmplt>
 800821a:	b9c8      	cbnz	r0, 8008250 <_strtod_l+0xa58>
 800821c:	4630      	mov	r0, r6
 800821e:	4639      	mov	r1, r7
 8008220:	2200      	movs	r2, #0
 8008222:	4b3e      	ldr	r3, [pc, #248]	; (800831c <_strtod_l+0xb24>)
 8008224:	f7f8 f9f8 	bl	8000618 <__aeabi_dmul>
 8008228:	4606      	mov	r6, r0
 800822a:	460f      	mov	r7, r1
 800822c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008230:	9618      	str	r6, [sp, #96]	; 0x60
 8008232:	9319      	str	r3, [sp, #100]	; 0x64
 8008234:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008238:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800823c:	e79c      	b.n	8008178 <_strtod_l+0x980>
 800823e:	f1ba 0f01 	cmp.w	sl, #1
 8008242:	d102      	bne.n	800824a <_strtod_l+0xa52>
 8008244:	2d00      	cmp	r5, #0
 8008246:	f43f ad8e 	beq.w	8007d66 <_strtod_l+0x56e>
 800824a:	2200      	movs	r2, #0
 800824c:	4b34      	ldr	r3, [pc, #208]	; (8008320 <_strtod_l+0xb28>)
 800824e:	e78f      	b.n	8008170 <_strtod_l+0x978>
 8008250:	2600      	movs	r6, #0
 8008252:	4f32      	ldr	r7, [pc, #200]	; (800831c <_strtod_l+0xb24>)
 8008254:	e7ea      	b.n	800822c <_strtod_l+0xa34>
 8008256:	4b31      	ldr	r3, [pc, #196]	; (800831c <_strtod_l+0xb24>)
 8008258:	4630      	mov	r0, r6
 800825a:	4639      	mov	r1, r7
 800825c:	2200      	movs	r2, #0
 800825e:	f7f8 f9db 	bl	8000618 <__aeabi_dmul>
 8008262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008264:	4606      	mov	r6, r0
 8008266:	460f      	mov	r7, r1
 8008268:	b933      	cbnz	r3, 8008278 <_strtod_l+0xa80>
 800826a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800826e:	9010      	str	r0, [sp, #64]	; 0x40
 8008270:	9311      	str	r3, [sp, #68]	; 0x44
 8008272:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008276:	e7df      	b.n	8008238 <_strtod_l+0xa40>
 8008278:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800827c:	e7f9      	b.n	8008272 <_strtod_l+0xa7a>
 800827e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008282:	9b04      	ldr	r3, [sp, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1ab      	bne.n	80081e0 <_strtod_l+0x9e8>
 8008288:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800828c:	0d1b      	lsrs	r3, r3, #20
 800828e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008290:	051b      	lsls	r3, r3, #20
 8008292:	429a      	cmp	r2, r3
 8008294:	465d      	mov	r5, fp
 8008296:	d1a3      	bne.n	80081e0 <_strtod_l+0x9e8>
 8008298:	4639      	mov	r1, r7
 800829a:	4630      	mov	r0, r6
 800829c:	f7f8 fc6c 	bl	8000b78 <__aeabi_d2iz>
 80082a0:	f7f8 f950 	bl	8000544 <__aeabi_i2d>
 80082a4:	460b      	mov	r3, r1
 80082a6:	4602      	mov	r2, r0
 80082a8:	4639      	mov	r1, r7
 80082aa:	4630      	mov	r0, r6
 80082ac:	f7f7 fffc 	bl	80002a8 <__aeabi_dsub>
 80082b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082b2:	4606      	mov	r6, r0
 80082b4:	460f      	mov	r7, r1
 80082b6:	b933      	cbnz	r3, 80082c6 <_strtod_l+0xace>
 80082b8:	f1ba 0f00 	cmp.w	sl, #0
 80082bc:	d103      	bne.n	80082c6 <_strtod_l+0xace>
 80082be:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80082c2:	2d00      	cmp	r5, #0
 80082c4:	d06d      	beq.n	80083a2 <_strtod_l+0xbaa>
 80082c6:	a30a      	add	r3, pc, #40	; (adr r3, 80082f0 <_strtod_l+0xaf8>)
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	4630      	mov	r0, r6
 80082ce:	4639      	mov	r1, r7
 80082d0:	f7f8 fc14 	bl	8000afc <__aeabi_dcmplt>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	f47f acb8 	bne.w	8007c4a <_strtod_l+0x452>
 80082da:	a307      	add	r3, pc, #28	; (adr r3, 80082f8 <_strtod_l+0xb00>)
 80082dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e0:	4630      	mov	r0, r6
 80082e2:	4639      	mov	r1, r7
 80082e4:	f7f8 fc28 	bl	8000b38 <__aeabi_dcmpgt>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	f43f af79 	beq.w	80081e0 <_strtod_l+0x9e8>
 80082ee:	e4ac      	b.n	8007c4a <_strtod_l+0x452>
 80082f0:	94a03595 	.word	0x94a03595
 80082f4:	3fdfffff 	.word	0x3fdfffff
 80082f8:	35afe535 	.word	0x35afe535
 80082fc:	3fe00000 	.word	0x3fe00000
 8008300:	000fffff 	.word	0x000fffff
 8008304:	7ff00000 	.word	0x7ff00000
 8008308:	7fefffff 	.word	0x7fefffff
 800830c:	39500000 	.word	0x39500000
 8008310:	3ff00000 	.word	0x3ff00000
 8008314:	7fe00000 	.word	0x7fe00000
 8008318:	7c9fffff 	.word	0x7c9fffff
 800831c:	3fe00000 	.word	0x3fe00000
 8008320:	bff00000 	.word	0xbff00000
 8008324:	9b04      	ldr	r3, [sp, #16]
 8008326:	b333      	cbz	r3, 8008376 <_strtod_l+0xb7e>
 8008328:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800832a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800832e:	d822      	bhi.n	8008376 <_strtod_l+0xb7e>
 8008330:	a327      	add	r3, pc, #156	; (adr r3, 80083d0 <_strtod_l+0xbd8>)
 8008332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008336:	4630      	mov	r0, r6
 8008338:	4639      	mov	r1, r7
 800833a:	f7f8 fbe9 	bl	8000b10 <__aeabi_dcmple>
 800833e:	b1a0      	cbz	r0, 800836a <_strtod_l+0xb72>
 8008340:	4639      	mov	r1, r7
 8008342:	4630      	mov	r0, r6
 8008344:	f7f8 fc40 	bl	8000bc8 <__aeabi_d2uiz>
 8008348:	2800      	cmp	r0, #0
 800834a:	bf08      	it	eq
 800834c:	2001      	moveq	r0, #1
 800834e:	f7f8 f8e9 	bl	8000524 <__aeabi_ui2d>
 8008352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008354:	4606      	mov	r6, r0
 8008356:	460f      	mov	r7, r1
 8008358:	bb03      	cbnz	r3, 800839c <_strtod_l+0xba4>
 800835a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800835e:	9012      	str	r0, [sp, #72]	; 0x48
 8008360:	9313      	str	r3, [sp, #76]	; 0x4c
 8008362:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008366:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800836a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800836c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800836e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008372:	1a9b      	subs	r3, r3, r2
 8008374:	930b      	str	r3, [sp, #44]	; 0x2c
 8008376:	ed9d 0b08 	vldr	d0, [sp, #32]
 800837a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800837e:	f001 fd3d 	bl	8009dfc <__ulp>
 8008382:	4650      	mov	r0, sl
 8008384:	ec53 2b10 	vmov	r2, r3, d0
 8008388:	4659      	mov	r1, fp
 800838a:	f7f8 f945 	bl	8000618 <__aeabi_dmul>
 800838e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008392:	f7f7 ff8b 	bl	80002ac <__adddf3>
 8008396:	4682      	mov	sl, r0
 8008398:	468b      	mov	fp, r1
 800839a:	e772      	b.n	8008282 <_strtod_l+0xa8a>
 800839c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80083a0:	e7df      	b.n	8008362 <_strtod_l+0xb6a>
 80083a2:	a30d      	add	r3, pc, #52	; (adr r3, 80083d8 <_strtod_l+0xbe0>)
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	f7f8 fba8 	bl	8000afc <__aeabi_dcmplt>
 80083ac:	e79c      	b.n	80082e8 <_strtod_l+0xaf0>
 80083ae:	2300      	movs	r3, #0
 80083b0:	930d      	str	r3, [sp, #52]	; 0x34
 80083b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80083b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	f7ff ba61 	b.w	800787e <_strtod_l+0x86>
 80083bc:	2b65      	cmp	r3, #101	; 0x65
 80083be:	f04f 0200 	mov.w	r2, #0
 80083c2:	f43f ab4e 	beq.w	8007a62 <_strtod_l+0x26a>
 80083c6:	2101      	movs	r1, #1
 80083c8:	4614      	mov	r4, r2
 80083ca:	9104      	str	r1, [sp, #16]
 80083cc:	f7ff bacb 	b.w	8007966 <_strtod_l+0x16e>
 80083d0:	ffc00000 	.word	0xffc00000
 80083d4:	41dfffff 	.word	0x41dfffff
 80083d8:	94a03595 	.word	0x94a03595
 80083dc:	3fcfffff 	.word	0x3fcfffff

080083e0 <_strtod_r>:
 80083e0:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <_strtod_r+0x18>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	b410      	push	{r4}
 80083e6:	6a1b      	ldr	r3, [r3, #32]
 80083e8:	4c04      	ldr	r4, [pc, #16]	; (80083fc <_strtod_r+0x1c>)
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	bf08      	it	eq
 80083ee:	4623      	moveq	r3, r4
 80083f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083f4:	f7ff ba00 	b.w	80077f8 <_strtod_l>
 80083f8:	20000060 	.word	0x20000060
 80083fc:	200000c4 	.word	0x200000c4

08008400 <_strtol_l.isra.0>:
 8008400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008404:	4680      	mov	r8, r0
 8008406:	4689      	mov	r9, r1
 8008408:	4692      	mov	sl, r2
 800840a:	461e      	mov	r6, r3
 800840c:	460f      	mov	r7, r1
 800840e:	463d      	mov	r5, r7
 8008410:	9808      	ldr	r0, [sp, #32]
 8008412:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008416:	f001 f9ed 	bl	80097f4 <__locale_ctype_ptr_l>
 800841a:	4420      	add	r0, r4
 800841c:	7843      	ldrb	r3, [r0, #1]
 800841e:	f013 0308 	ands.w	r3, r3, #8
 8008422:	d132      	bne.n	800848a <_strtol_l.isra.0+0x8a>
 8008424:	2c2d      	cmp	r4, #45	; 0x2d
 8008426:	d132      	bne.n	800848e <_strtol_l.isra.0+0x8e>
 8008428:	787c      	ldrb	r4, [r7, #1]
 800842a:	1cbd      	adds	r5, r7, #2
 800842c:	2201      	movs	r2, #1
 800842e:	2e00      	cmp	r6, #0
 8008430:	d05d      	beq.n	80084ee <_strtol_l.isra.0+0xee>
 8008432:	2e10      	cmp	r6, #16
 8008434:	d109      	bne.n	800844a <_strtol_l.isra.0+0x4a>
 8008436:	2c30      	cmp	r4, #48	; 0x30
 8008438:	d107      	bne.n	800844a <_strtol_l.isra.0+0x4a>
 800843a:	782b      	ldrb	r3, [r5, #0]
 800843c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008440:	2b58      	cmp	r3, #88	; 0x58
 8008442:	d14f      	bne.n	80084e4 <_strtol_l.isra.0+0xe4>
 8008444:	786c      	ldrb	r4, [r5, #1]
 8008446:	2610      	movs	r6, #16
 8008448:	3502      	adds	r5, #2
 800844a:	2a00      	cmp	r2, #0
 800844c:	bf14      	ite	ne
 800844e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008452:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008456:	2700      	movs	r7, #0
 8008458:	fbb1 fcf6 	udiv	ip, r1, r6
 800845c:	4638      	mov	r0, r7
 800845e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008462:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008466:	2b09      	cmp	r3, #9
 8008468:	d817      	bhi.n	800849a <_strtol_l.isra.0+0x9a>
 800846a:	461c      	mov	r4, r3
 800846c:	42a6      	cmp	r6, r4
 800846e:	dd23      	ble.n	80084b8 <_strtol_l.isra.0+0xb8>
 8008470:	1c7b      	adds	r3, r7, #1
 8008472:	d007      	beq.n	8008484 <_strtol_l.isra.0+0x84>
 8008474:	4584      	cmp	ip, r0
 8008476:	d31c      	bcc.n	80084b2 <_strtol_l.isra.0+0xb2>
 8008478:	d101      	bne.n	800847e <_strtol_l.isra.0+0x7e>
 800847a:	45a6      	cmp	lr, r4
 800847c:	db19      	blt.n	80084b2 <_strtol_l.isra.0+0xb2>
 800847e:	fb00 4006 	mla	r0, r0, r6, r4
 8008482:	2701      	movs	r7, #1
 8008484:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008488:	e7eb      	b.n	8008462 <_strtol_l.isra.0+0x62>
 800848a:	462f      	mov	r7, r5
 800848c:	e7bf      	b.n	800840e <_strtol_l.isra.0+0xe>
 800848e:	2c2b      	cmp	r4, #43	; 0x2b
 8008490:	bf04      	itt	eq
 8008492:	1cbd      	addeq	r5, r7, #2
 8008494:	787c      	ldrbeq	r4, [r7, #1]
 8008496:	461a      	mov	r2, r3
 8008498:	e7c9      	b.n	800842e <_strtol_l.isra.0+0x2e>
 800849a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800849e:	2b19      	cmp	r3, #25
 80084a0:	d801      	bhi.n	80084a6 <_strtol_l.isra.0+0xa6>
 80084a2:	3c37      	subs	r4, #55	; 0x37
 80084a4:	e7e2      	b.n	800846c <_strtol_l.isra.0+0x6c>
 80084a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80084aa:	2b19      	cmp	r3, #25
 80084ac:	d804      	bhi.n	80084b8 <_strtol_l.isra.0+0xb8>
 80084ae:	3c57      	subs	r4, #87	; 0x57
 80084b0:	e7dc      	b.n	800846c <_strtol_l.isra.0+0x6c>
 80084b2:	f04f 37ff 	mov.w	r7, #4294967295
 80084b6:	e7e5      	b.n	8008484 <_strtol_l.isra.0+0x84>
 80084b8:	1c7b      	adds	r3, r7, #1
 80084ba:	d108      	bne.n	80084ce <_strtol_l.isra.0+0xce>
 80084bc:	2322      	movs	r3, #34	; 0x22
 80084be:	f8c8 3000 	str.w	r3, [r8]
 80084c2:	4608      	mov	r0, r1
 80084c4:	f1ba 0f00 	cmp.w	sl, #0
 80084c8:	d107      	bne.n	80084da <_strtol_l.isra.0+0xda>
 80084ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ce:	b102      	cbz	r2, 80084d2 <_strtol_l.isra.0+0xd2>
 80084d0:	4240      	negs	r0, r0
 80084d2:	f1ba 0f00 	cmp.w	sl, #0
 80084d6:	d0f8      	beq.n	80084ca <_strtol_l.isra.0+0xca>
 80084d8:	b10f      	cbz	r7, 80084de <_strtol_l.isra.0+0xde>
 80084da:	f105 39ff 	add.w	r9, r5, #4294967295
 80084de:	f8ca 9000 	str.w	r9, [sl]
 80084e2:	e7f2      	b.n	80084ca <_strtol_l.isra.0+0xca>
 80084e4:	2430      	movs	r4, #48	; 0x30
 80084e6:	2e00      	cmp	r6, #0
 80084e8:	d1af      	bne.n	800844a <_strtol_l.isra.0+0x4a>
 80084ea:	2608      	movs	r6, #8
 80084ec:	e7ad      	b.n	800844a <_strtol_l.isra.0+0x4a>
 80084ee:	2c30      	cmp	r4, #48	; 0x30
 80084f0:	d0a3      	beq.n	800843a <_strtol_l.isra.0+0x3a>
 80084f2:	260a      	movs	r6, #10
 80084f4:	e7a9      	b.n	800844a <_strtol_l.isra.0+0x4a>
	...

080084f8 <_strtol_r>:
 80084f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084fa:	4c06      	ldr	r4, [pc, #24]	; (8008514 <_strtol_r+0x1c>)
 80084fc:	4d06      	ldr	r5, [pc, #24]	; (8008518 <_strtol_r+0x20>)
 80084fe:	6824      	ldr	r4, [r4, #0]
 8008500:	6a24      	ldr	r4, [r4, #32]
 8008502:	2c00      	cmp	r4, #0
 8008504:	bf08      	it	eq
 8008506:	462c      	moveq	r4, r5
 8008508:	9400      	str	r4, [sp, #0]
 800850a:	f7ff ff79 	bl	8008400 <_strtol_l.isra.0>
 800850e:	b003      	add	sp, #12
 8008510:	bd30      	pop	{r4, r5, pc}
 8008512:	bf00      	nop
 8008514:	20000060 	.word	0x20000060
 8008518:	200000c4 	.word	0x200000c4

0800851c <quorem>:
 800851c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008520:	6903      	ldr	r3, [r0, #16]
 8008522:	690c      	ldr	r4, [r1, #16]
 8008524:	42a3      	cmp	r3, r4
 8008526:	4680      	mov	r8, r0
 8008528:	f2c0 8082 	blt.w	8008630 <quorem+0x114>
 800852c:	3c01      	subs	r4, #1
 800852e:	f101 0714 	add.w	r7, r1, #20
 8008532:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008536:	f100 0614 	add.w	r6, r0, #20
 800853a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800853e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008542:	eb06 030c 	add.w	r3, r6, ip
 8008546:	3501      	adds	r5, #1
 8008548:	eb07 090c 	add.w	r9, r7, ip
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	fbb0 f5f5 	udiv	r5, r0, r5
 8008552:	b395      	cbz	r5, 80085ba <quorem+0x9e>
 8008554:	f04f 0a00 	mov.w	sl, #0
 8008558:	4638      	mov	r0, r7
 800855a:	46b6      	mov	lr, r6
 800855c:	46d3      	mov	fp, sl
 800855e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008562:	b293      	uxth	r3, r2
 8008564:	fb05 a303 	mla	r3, r5, r3, sl
 8008568:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800856c:	b29b      	uxth	r3, r3
 800856e:	ebab 0303 	sub.w	r3, fp, r3
 8008572:	0c12      	lsrs	r2, r2, #16
 8008574:	f8de b000 	ldr.w	fp, [lr]
 8008578:	fb05 a202 	mla	r2, r5, r2, sl
 800857c:	fa13 f38b 	uxtah	r3, r3, fp
 8008580:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008584:	fa1f fb82 	uxth.w	fp, r2
 8008588:	f8de 2000 	ldr.w	r2, [lr]
 800858c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008590:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008594:	b29b      	uxth	r3, r3
 8008596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800859a:	4581      	cmp	r9, r0
 800859c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80085a0:	f84e 3b04 	str.w	r3, [lr], #4
 80085a4:	d2db      	bcs.n	800855e <quorem+0x42>
 80085a6:	f856 300c 	ldr.w	r3, [r6, ip]
 80085aa:	b933      	cbnz	r3, 80085ba <quorem+0x9e>
 80085ac:	9b01      	ldr	r3, [sp, #4]
 80085ae:	3b04      	subs	r3, #4
 80085b0:	429e      	cmp	r6, r3
 80085b2:	461a      	mov	r2, r3
 80085b4:	d330      	bcc.n	8008618 <quorem+0xfc>
 80085b6:	f8c8 4010 	str.w	r4, [r8, #16]
 80085ba:	4640      	mov	r0, r8
 80085bc:	f001 fba6 	bl	8009d0c <__mcmp>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	db25      	blt.n	8008610 <quorem+0xf4>
 80085c4:	3501      	adds	r5, #1
 80085c6:	4630      	mov	r0, r6
 80085c8:	f04f 0c00 	mov.w	ip, #0
 80085cc:	f857 2b04 	ldr.w	r2, [r7], #4
 80085d0:	f8d0 e000 	ldr.w	lr, [r0]
 80085d4:	b293      	uxth	r3, r2
 80085d6:	ebac 0303 	sub.w	r3, ip, r3
 80085da:	0c12      	lsrs	r2, r2, #16
 80085dc:	fa13 f38e 	uxtah	r3, r3, lr
 80085e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80085e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085ee:	45b9      	cmp	r9, r7
 80085f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80085f4:	f840 3b04 	str.w	r3, [r0], #4
 80085f8:	d2e8      	bcs.n	80085cc <quorem+0xb0>
 80085fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80085fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008602:	b92a      	cbnz	r2, 8008610 <quorem+0xf4>
 8008604:	3b04      	subs	r3, #4
 8008606:	429e      	cmp	r6, r3
 8008608:	461a      	mov	r2, r3
 800860a:	d30b      	bcc.n	8008624 <quorem+0x108>
 800860c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008610:	4628      	mov	r0, r5
 8008612:	b003      	add	sp, #12
 8008614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008618:	6812      	ldr	r2, [r2, #0]
 800861a:	3b04      	subs	r3, #4
 800861c:	2a00      	cmp	r2, #0
 800861e:	d1ca      	bne.n	80085b6 <quorem+0x9a>
 8008620:	3c01      	subs	r4, #1
 8008622:	e7c5      	b.n	80085b0 <quorem+0x94>
 8008624:	6812      	ldr	r2, [r2, #0]
 8008626:	3b04      	subs	r3, #4
 8008628:	2a00      	cmp	r2, #0
 800862a:	d1ef      	bne.n	800860c <quorem+0xf0>
 800862c:	3c01      	subs	r4, #1
 800862e:	e7ea      	b.n	8008606 <quorem+0xea>
 8008630:	2000      	movs	r0, #0
 8008632:	e7ee      	b.n	8008612 <quorem+0xf6>
 8008634:	0000      	movs	r0, r0
	...

08008638 <_dtoa_r>:
 8008638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863c:	ec57 6b10 	vmov	r6, r7, d0
 8008640:	b097      	sub	sp, #92	; 0x5c
 8008642:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008644:	9106      	str	r1, [sp, #24]
 8008646:	4604      	mov	r4, r0
 8008648:	920b      	str	r2, [sp, #44]	; 0x2c
 800864a:	9312      	str	r3, [sp, #72]	; 0x48
 800864c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008650:	e9cd 6700 	strd	r6, r7, [sp]
 8008654:	b93d      	cbnz	r5, 8008666 <_dtoa_r+0x2e>
 8008656:	2010      	movs	r0, #16
 8008658:	f001 f8e0 	bl	800981c <malloc>
 800865c:	6260      	str	r0, [r4, #36]	; 0x24
 800865e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008662:	6005      	str	r5, [r0, #0]
 8008664:	60c5      	str	r5, [r0, #12]
 8008666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008668:	6819      	ldr	r1, [r3, #0]
 800866a:	b151      	cbz	r1, 8008682 <_dtoa_r+0x4a>
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	604a      	str	r2, [r1, #4]
 8008670:	2301      	movs	r3, #1
 8008672:	4093      	lsls	r3, r2
 8008674:	608b      	str	r3, [r1, #8]
 8008676:	4620      	mov	r0, r4
 8008678:	f001 f929 	bl	80098ce <_Bfree>
 800867c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	1e3b      	subs	r3, r7, #0
 8008684:	bfbb      	ittet	lt
 8008686:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800868a:	9301      	strlt	r3, [sp, #4]
 800868c:	2300      	movge	r3, #0
 800868e:	2201      	movlt	r2, #1
 8008690:	bfac      	ite	ge
 8008692:	f8c8 3000 	strge.w	r3, [r8]
 8008696:	f8c8 2000 	strlt.w	r2, [r8]
 800869a:	4baf      	ldr	r3, [pc, #700]	; (8008958 <_dtoa_r+0x320>)
 800869c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80086a0:	ea33 0308 	bics.w	r3, r3, r8
 80086a4:	d114      	bne.n	80086d0 <_dtoa_r+0x98>
 80086a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	9b00      	ldr	r3, [sp, #0]
 80086b0:	b923      	cbnz	r3, 80086bc <_dtoa_r+0x84>
 80086b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80086b6:	2800      	cmp	r0, #0
 80086b8:	f000 8542 	beq.w	8009140 <_dtoa_r+0xb08>
 80086bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800896c <_dtoa_r+0x334>
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f000 8544 	beq.w	8009150 <_dtoa_r+0xb18>
 80086c8:	f10b 0303 	add.w	r3, fp, #3
 80086cc:	f000 bd3e 	b.w	800914c <_dtoa_r+0xb14>
 80086d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80086d4:	2200      	movs	r2, #0
 80086d6:	2300      	movs	r3, #0
 80086d8:	4630      	mov	r0, r6
 80086da:	4639      	mov	r1, r7
 80086dc:	f7f8 fa04 	bl	8000ae8 <__aeabi_dcmpeq>
 80086e0:	4681      	mov	r9, r0
 80086e2:	b168      	cbz	r0, 8008700 <_dtoa_r+0xc8>
 80086e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086e6:	2301      	movs	r3, #1
 80086e8:	6013      	str	r3, [r2, #0]
 80086ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 8524 	beq.w	800913a <_dtoa_r+0xb02>
 80086f2:	4b9a      	ldr	r3, [pc, #616]	; (800895c <_dtoa_r+0x324>)
 80086f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	f000 bd28 	b.w	8009150 <_dtoa_r+0xb18>
 8008700:	aa14      	add	r2, sp, #80	; 0x50
 8008702:	a915      	add	r1, sp, #84	; 0x54
 8008704:	ec47 6b10 	vmov	d0, r6, r7
 8008708:	4620      	mov	r0, r4
 800870a:	f001 fbed 	bl	8009ee8 <__d2b>
 800870e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008712:	9004      	str	r0, [sp, #16]
 8008714:	2d00      	cmp	r5, #0
 8008716:	d07c      	beq.n	8008812 <_dtoa_r+0x1da>
 8008718:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800871c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008720:	46b2      	mov	sl, r6
 8008722:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008726:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800872a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800872e:	2200      	movs	r2, #0
 8008730:	4b8b      	ldr	r3, [pc, #556]	; (8008960 <_dtoa_r+0x328>)
 8008732:	4650      	mov	r0, sl
 8008734:	4659      	mov	r1, fp
 8008736:	f7f7 fdb7 	bl	80002a8 <__aeabi_dsub>
 800873a:	a381      	add	r3, pc, #516	; (adr r3, 8008940 <_dtoa_r+0x308>)
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	f7f7 ff6a 	bl	8000618 <__aeabi_dmul>
 8008744:	a380      	add	r3, pc, #512	; (adr r3, 8008948 <_dtoa_r+0x310>)
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	f7f7 fdaf 	bl	80002ac <__adddf3>
 800874e:	4606      	mov	r6, r0
 8008750:	4628      	mov	r0, r5
 8008752:	460f      	mov	r7, r1
 8008754:	f7f7 fef6 	bl	8000544 <__aeabi_i2d>
 8008758:	a37d      	add	r3, pc, #500	; (adr r3, 8008950 <_dtoa_r+0x318>)
 800875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875e:	f7f7 ff5b 	bl	8000618 <__aeabi_dmul>
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	4630      	mov	r0, r6
 8008768:	4639      	mov	r1, r7
 800876a:	f7f7 fd9f 	bl	80002ac <__adddf3>
 800876e:	4606      	mov	r6, r0
 8008770:	460f      	mov	r7, r1
 8008772:	f7f8 fa01 	bl	8000b78 <__aeabi_d2iz>
 8008776:	2200      	movs	r2, #0
 8008778:	4682      	mov	sl, r0
 800877a:	2300      	movs	r3, #0
 800877c:	4630      	mov	r0, r6
 800877e:	4639      	mov	r1, r7
 8008780:	f7f8 f9bc 	bl	8000afc <__aeabi_dcmplt>
 8008784:	b148      	cbz	r0, 800879a <_dtoa_r+0x162>
 8008786:	4650      	mov	r0, sl
 8008788:	f7f7 fedc 	bl	8000544 <__aeabi_i2d>
 800878c:	4632      	mov	r2, r6
 800878e:	463b      	mov	r3, r7
 8008790:	f7f8 f9aa 	bl	8000ae8 <__aeabi_dcmpeq>
 8008794:	b908      	cbnz	r0, 800879a <_dtoa_r+0x162>
 8008796:	f10a 3aff 	add.w	sl, sl, #4294967295
 800879a:	f1ba 0f16 	cmp.w	sl, #22
 800879e:	d859      	bhi.n	8008854 <_dtoa_r+0x21c>
 80087a0:	4970      	ldr	r1, [pc, #448]	; (8008964 <_dtoa_r+0x32c>)
 80087a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80087a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087ae:	f7f8 f9c3 	bl	8000b38 <__aeabi_dcmpgt>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	d050      	beq.n	8008858 <_dtoa_r+0x220>
 80087b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087ba:	2300      	movs	r3, #0
 80087bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80087be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087c0:	1b5d      	subs	r5, r3, r5
 80087c2:	f1b5 0801 	subs.w	r8, r5, #1
 80087c6:	bf49      	itett	mi
 80087c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80087cc:	2300      	movpl	r3, #0
 80087ce:	9305      	strmi	r3, [sp, #20]
 80087d0:	f04f 0800 	movmi.w	r8, #0
 80087d4:	bf58      	it	pl
 80087d6:	9305      	strpl	r3, [sp, #20]
 80087d8:	f1ba 0f00 	cmp.w	sl, #0
 80087dc:	db3e      	blt.n	800885c <_dtoa_r+0x224>
 80087de:	2300      	movs	r3, #0
 80087e0:	44d0      	add	r8, sl
 80087e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80087e6:	9307      	str	r3, [sp, #28]
 80087e8:	9b06      	ldr	r3, [sp, #24]
 80087ea:	2b09      	cmp	r3, #9
 80087ec:	f200 8090 	bhi.w	8008910 <_dtoa_r+0x2d8>
 80087f0:	2b05      	cmp	r3, #5
 80087f2:	bfc4      	itt	gt
 80087f4:	3b04      	subgt	r3, #4
 80087f6:	9306      	strgt	r3, [sp, #24]
 80087f8:	9b06      	ldr	r3, [sp, #24]
 80087fa:	f1a3 0302 	sub.w	r3, r3, #2
 80087fe:	bfcc      	ite	gt
 8008800:	2500      	movgt	r5, #0
 8008802:	2501      	movle	r5, #1
 8008804:	2b03      	cmp	r3, #3
 8008806:	f200 808f 	bhi.w	8008928 <_dtoa_r+0x2f0>
 800880a:	e8df f003 	tbb	[pc, r3]
 800880e:	7f7d      	.short	0x7f7d
 8008810:	7131      	.short	0x7131
 8008812:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008816:	441d      	add	r5, r3
 8008818:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800881c:	2820      	cmp	r0, #32
 800881e:	dd13      	ble.n	8008848 <_dtoa_r+0x210>
 8008820:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008824:	9b00      	ldr	r3, [sp, #0]
 8008826:	fa08 f800 	lsl.w	r8, r8, r0
 800882a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800882e:	fa23 f000 	lsr.w	r0, r3, r0
 8008832:	ea48 0000 	orr.w	r0, r8, r0
 8008836:	f7f7 fe75 	bl	8000524 <__aeabi_ui2d>
 800883a:	2301      	movs	r3, #1
 800883c:	4682      	mov	sl, r0
 800883e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008842:	3d01      	subs	r5, #1
 8008844:	9313      	str	r3, [sp, #76]	; 0x4c
 8008846:	e772      	b.n	800872e <_dtoa_r+0xf6>
 8008848:	9b00      	ldr	r3, [sp, #0]
 800884a:	f1c0 0020 	rsb	r0, r0, #32
 800884e:	fa03 f000 	lsl.w	r0, r3, r0
 8008852:	e7f0      	b.n	8008836 <_dtoa_r+0x1fe>
 8008854:	2301      	movs	r3, #1
 8008856:	e7b1      	b.n	80087bc <_dtoa_r+0x184>
 8008858:	900f      	str	r0, [sp, #60]	; 0x3c
 800885a:	e7b0      	b.n	80087be <_dtoa_r+0x186>
 800885c:	9b05      	ldr	r3, [sp, #20]
 800885e:	eba3 030a 	sub.w	r3, r3, sl
 8008862:	9305      	str	r3, [sp, #20]
 8008864:	f1ca 0300 	rsb	r3, sl, #0
 8008868:	9307      	str	r3, [sp, #28]
 800886a:	2300      	movs	r3, #0
 800886c:	930e      	str	r3, [sp, #56]	; 0x38
 800886e:	e7bb      	b.n	80087e8 <_dtoa_r+0x1b0>
 8008870:	2301      	movs	r3, #1
 8008872:	930a      	str	r3, [sp, #40]	; 0x28
 8008874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008876:	2b00      	cmp	r3, #0
 8008878:	dd59      	ble.n	800892e <_dtoa_r+0x2f6>
 800887a:	9302      	str	r3, [sp, #8]
 800887c:	4699      	mov	r9, r3
 800887e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008880:	2200      	movs	r2, #0
 8008882:	6072      	str	r2, [r6, #4]
 8008884:	2204      	movs	r2, #4
 8008886:	f102 0014 	add.w	r0, r2, #20
 800888a:	4298      	cmp	r0, r3
 800888c:	6871      	ldr	r1, [r6, #4]
 800888e:	d953      	bls.n	8008938 <_dtoa_r+0x300>
 8008890:	4620      	mov	r0, r4
 8008892:	f000 ffe8 	bl	8009866 <_Balloc>
 8008896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008898:	6030      	str	r0, [r6, #0]
 800889a:	f1b9 0f0e 	cmp.w	r9, #14
 800889e:	f8d3 b000 	ldr.w	fp, [r3]
 80088a2:	f200 80e6 	bhi.w	8008a72 <_dtoa_r+0x43a>
 80088a6:	2d00      	cmp	r5, #0
 80088a8:	f000 80e3 	beq.w	8008a72 <_dtoa_r+0x43a>
 80088ac:	ed9d 7b00 	vldr	d7, [sp]
 80088b0:	f1ba 0f00 	cmp.w	sl, #0
 80088b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80088b8:	dd74      	ble.n	80089a4 <_dtoa_r+0x36c>
 80088ba:	4a2a      	ldr	r2, [pc, #168]	; (8008964 <_dtoa_r+0x32c>)
 80088bc:	f00a 030f 	and.w	r3, sl, #15
 80088c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80088c4:	ed93 7b00 	vldr	d7, [r3]
 80088c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80088cc:	06f0      	lsls	r0, r6, #27
 80088ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80088d2:	d565      	bpl.n	80089a0 <_dtoa_r+0x368>
 80088d4:	4b24      	ldr	r3, [pc, #144]	; (8008968 <_dtoa_r+0x330>)
 80088d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80088da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088de:	f7f7 ffc5 	bl	800086c <__aeabi_ddiv>
 80088e2:	e9cd 0100 	strd	r0, r1, [sp]
 80088e6:	f006 060f 	and.w	r6, r6, #15
 80088ea:	2503      	movs	r5, #3
 80088ec:	4f1e      	ldr	r7, [pc, #120]	; (8008968 <_dtoa_r+0x330>)
 80088ee:	e04c      	b.n	800898a <_dtoa_r+0x352>
 80088f0:	2301      	movs	r3, #1
 80088f2:	930a      	str	r3, [sp, #40]	; 0x28
 80088f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088f6:	4453      	add	r3, sl
 80088f8:	f103 0901 	add.w	r9, r3, #1
 80088fc:	9302      	str	r3, [sp, #8]
 80088fe:	464b      	mov	r3, r9
 8008900:	2b01      	cmp	r3, #1
 8008902:	bfb8      	it	lt
 8008904:	2301      	movlt	r3, #1
 8008906:	e7ba      	b.n	800887e <_dtoa_r+0x246>
 8008908:	2300      	movs	r3, #0
 800890a:	e7b2      	b.n	8008872 <_dtoa_r+0x23a>
 800890c:	2300      	movs	r3, #0
 800890e:	e7f0      	b.n	80088f2 <_dtoa_r+0x2ba>
 8008910:	2501      	movs	r5, #1
 8008912:	2300      	movs	r3, #0
 8008914:	9306      	str	r3, [sp, #24]
 8008916:	950a      	str	r5, [sp, #40]	; 0x28
 8008918:	f04f 33ff 	mov.w	r3, #4294967295
 800891c:	9302      	str	r3, [sp, #8]
 800891e:	4699      	mov	r9, r3
 8008920:	2200      	movs	r2, #0
 8008922:	2312      	movs	r3, #18
 8008924:	920b      	str	r2, [sp, #44]	; 0x2c
 8008926:	e7aa      	b.n	800887e <_dtoa_r+0x246>
 8008928:	2301      	movs	r3, #1
 800892a:	930a      	str	r3, [sp, #40]	; 0x28
 800892c:	e7f4      	b.n	8008918 <_dtoa_r+0x2e0>
 800892e:	2301      	movs	r3, #1
 8008930:	9302      	str	r3, [sp, #8]
 8008932:	4699      	mov	r9, r3
 8008934:	461a      	mov	r2, r3
 8008936:	e7f5      	b.n	8008924 <_dtoa_r+0x2ec>
 8008938:	3101      	adds	r1, #1
 800893a:	6071      	str	r1, [r6, #4]
 800893c:	0052      	lsls	r2, r2, #1
 800893e:	e7a2      	b.n	8008886 <_dtoa_r+0x24e>
 8008940:	636f4361 	.word	0x636f4361
 8008944:	3fd287a7 	.word	0x3fd287a7
 8008948:	8b60c8b3 	.word	0x8b60c8b3
 800894c:	3fc68a28 	.word	0x3fc68a28
 8008950:	509f79fb 	.word	0x509f79fb
 8008954:	3fd34413 	.word	0x3fd34413
 8008958:	7ff00000 	.word	0x7ff00000
 800895c:	0800c08d 	.word	0x0800c08d
 8008960:	3ff80000 	.word	0x3ff80000
 8008964:	0800c148 	.word	0x0800c148
 8008968:	0800c120 	.word	0x0800c120
 800896c:	0800c111 	.word	0x0800c111
 8008970:	07f1      	lsls	r1, r6, #31
 8008972:	d508      	bpl.n	8008986 <_dtoa_r+0x34e>
 8008974:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800897c:	f7f7 fe4c 	bl	8000618 <__aeabi_dmul>
 8008980:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008984:	3501      	adds	r5, #1
 8008986:	1076      	asrs	r6, r6, #1
 8008988:	3708      	adds	r7, #8
 800898a:	2e00      	cmp	r6, #0
 800898c:	d1f0      	bne.n	8008970 <_dtoa_r+0x338>
 800898e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008992:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008996:	f7f7 ff69 	bl	800086c <__aeabi_ddiv>
 800899a:	e9cd 0100 	strd	r0, r1, [sp]
 800899e:	e01a      	b.n	80089d6 <_dtoa_r+0x39e>
 80089a0:	2502      	movs	r5, #2
 80089a2:	e7a3      	b.n	80088ec <_dtoa_r+0x2b4>
 80089a4:	f000 80a0 	beq.w	8008ae8 <_dtoa_r+0x4b0>
 80089a8:	f1ca 0600 	rsb	r6, sl, #0
 80089ac:	4b9f      	ldr	r3, [pc, #636]	; (8008c2c <_dtoa_r+0x5f4>)
 80089ae:	4fa0      	ldr	r7, [pc, #640]	; (8008c30 <_dtoa_r+0x5f8>)
 80089b0:	f006 020f 	and.w	r2, r6, #15
 80089b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089c0:	f7f7 fe2a 	bl	8000618 <__aeabi_dmul>
 80089c4:	e9cd 0100 	strd	r0, r1, [sp]
 80089c8:	1136      	asrs	r6, r6, #4
 80089ca:	2300      	movs	r3, #0
 80089cc:	2502      	movs	r5, #2
 80089ce:	2e00      	cmp	r6, #0
 80089d0:	d17f      	bne.n	8008ad2 <_dtoa_r+0x49a>
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1e1      	bne.n	800899a <_dtoa_r+0x362>
 80089d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 8087 	beq.w	8008aec <_dtoa_r+0x4b4>
 80089de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80089e2:	2200      	movs	r2, #0
 80089e4:	4b93      	ldr	r3, [pc, #588]	; (8008c34 <_dtoa_r+0x5fc>)
 80089e6:	4630      	mov	r0, r6
 80089e8:	4639      	mov	r1, r7
 80089ea:	f7f8 f887 	bl	8000afc <__aeabi_dcmplt>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	d07c      	beq.n	8008aec <_dtoa_r+0x4b4>
 80089f2:	f1b9 0f00 	cmp.w	r9, #0
 80089f6:	d079      	beq.n	8008aec <_dtoa_r+0x4b4>
 80089f8:	9b02      	ldr	r3, [sp, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	dd35      	ble.n	8008a6a <_dtoa_r+0x432>
 80089fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008a02:	9308      	str	r3, [sp, #32]
 8008a04:	4639      	mov	r1, r7
 8008a06:	2200      	movs	r2, #0
 8008a08:	4b8b      	ldr	r3, [pc, #556]	; (8008c38 <_dtoa_r+0x600>)
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	f7f7 fe04 	bl	8000618 <__aeabi_dmul>
 8008a10:	e9cd 0100 	strd	r0, r1, [sp]
 8008a14:	9f02      	ldr	r7, [sp, #8]
 8008a16:	3501      	adds	r5, #1
 8008a18:	4628      	mov	r0, r5
 8008a1a:	f7f7 fd93 	bl	8000544 <__aeabi_i2d>
 8008a1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a22:	f7f7 fdf9 	bl	8000618 <__aeabi_dmul>
 8008a26:	2200      	movs	r2, #0
 8008a28:	4b84      	ldr	r3, [pc, #528]	; (8008c3c <_dtoa_r+0x604>)
 8008a2a:	f7f7 fc3f 	bl	80002ac <__adddf3>
 8008a2e:	4605      	mov	r5, r0
 8008a30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008a34:	2f00      	cmp	r7, #0
 8008a36:	d15d      	bne.n	8008af4 <_dtoa_r+0x4bc>
 8008a38:	2200      	movs	r2, #0
 8008a3a:	4b81      	ldr	r3, [pc, #516]	; (8008c40 <_dtoa_r+0x608>)
 8008a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a40:	f7f7 fc32 	bl	80002a8 <__aeabi_dsub>
 8008a44:	462a      	mov	r2, r5
 8008a46:	4633      	mov	r3, r6
 8008a48:	e9cd 0100 	strd	r0, r1, [sp]
 8008a4c:	f7f8 f874 	bl	8000b38 <__aeabi_dcmpgt>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	f040 8288 	bne.w	8008f66 <_dtoa_r+0x92e>
 8008a56:	462a      	mov	r2, r5
 8008a58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008a5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a60:	f7f8 f84c 	bl	8000afc <__aeabi_dcmplt>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	f040 827c 	bne.w	8008f62 <_dtoa_r+0x92a>
 8008a6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a6e:	e9cd 2300 	strd	r2, r3, [sp]
 8008a72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f2c0 8150 	blt.w	8008d1a <_dtoa_r+0x6e2>
 8008a7a:	f1ba 0f0e 	cmp.w	sl, #14
 8008a7e:	f300 814c 	bgt.w	8008d1a <_dtoa_r+0x6e2>
 8008a82:	4b6a      	ldr	r3, [pc, #424]	; (8008c2c <_dtoa_r+0x5f4>)
 8008a84:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a88:	ed93 7b00 	vldr	d7, [r3]
 8008a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a94:	f280 80d8 	bge.w	8008c48 <_dtoa_r+0x610>
 8008a98:	f1b9 0f00 	cmp.w	r9, #0
 8008a9c:	f300 80d4 	bgt.w	8008c48 <_dtoa_r+0x610>
 8008aa0:	f040 825e 	bne.w	8008f60 <_dtoa_r+0x928>
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	4b66      	ldr	r3, [pc, #408]	; (8008c40 <_dtoa_r+0x608>)
 8008aa8:	ec51 0b17 	vmov	r0, r1, d7
 8008aac:	f7f7 fdb4 	bl	8000618 <__aeabi_dmul>
 8008ab0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ab4:	f7f8 f836 	bl	8000b24 <__aeabi_dcmpge>
 8008ab8:	464f      	mov	r7, r9
 8008aba:	464e      	mov	r6, r9
 8008abc:	2800      	cmp	r0, #0
 8008abe:	f040 8234 	bne.w	8008f2a <_dtoa_r+0x8f2>
 8008ac2:	2331      	movs	r3, #49	; 0x31
 8008ac4:	f10b 0501 	add.w	r5, fp, #1
 8008ac8:	f88b 3000 	strb.w	r3, [fp]
 8008acc:	f10a 0a01 	add.w	sl, sl, #1
 8008ad0:	e22f      	b.n	8008f32 <_dtoa_r+0x8fa>
 8008ad2:	07f2      	lsls	r2, r6, #31
 8008ad4:	d505      	bpl.n	8008ae2 <_dtoa_r+0x4aa>
 8008ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ada:	f7f7 fd9d 	bl	8000618 <__aeabi_dmul>
 8008ade:	3501      	adds	r5, #1
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	1076      	asrs	r6, r6, #1
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	e772      	b.n	80089ce <_dtoa_r+0x396>
 8008ae8:	2502      	movs	r5, #2
 8008aea:	e774      	b.n	80089d6 <_dtoa_r+0x39e>
 8008aec:	f8cd a020 	str.w	sl, [sp, #32]
 8008af0:	464f      	mov	r7, r9
 8008af2:	e791      	b.n	8008a18 <_dtoa_r+0x3e0>
 8008af4:	4b4d      	ldr	r3, [pc, #308]	; (8008c2c <_dtoa_r+0x5f4>)
 8008af6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008afa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d047      	beq.n	8008b94 <_dtoa_r+0x55c>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	2000      	movs	r0, #0
 8008b0a:	494e      	ldr	r1, [pc, #312]	; (8008c44 <_dtoa_r+0x60c>)
 8008b0c:	f7f7 feae 	bl	800086c <__aeabi_ddiv>
 8008b10:	462a      	mov	r2, r5
 8008b12:	4633      	mov	r3, r6
 8008b14:	f7f7 fbc8 	bl	80002a8 <__aeabi_dsub>
 8008b18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008b1c:	465d      	mov	r5, fp
 8008b1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b22:	f7f8 f829 	bl	8000b78 <__aeabi_d2iz>
 8008b26:	4606      	mov	r6, r0
 8008b28:	f7f7 fd0c 	bl	8000544 <__aeabi_i2d>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b34:	f7f7 fbb8 	bl	80002a8 <__aeabi_dsub>
 8008b38:	3630      	adds	r6, #48	; 0x30
 8008b3a:	f805 6b01 	strb.w	r6, [r5], #1
 8008b3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008b42:	e9cd 0100 	strd	r0, r1, [sp]
 8008b46:	f7f7 ffd9 	bl	8000afc <__aeabi_dcmplt>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d163      	bne.n	8008c16 <_dtoa_r+0x5de>
 8008b4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b52:	2000      	movs	r0, #0
 8008b54:	4937      	ldr	r1, [pc, #220]	; (8008c34 <_dtoa_r+0x5fc>)
 8008b56:	f7f7 fba7 	bl	80002a8 <__aeabi_dsub>
 8008b5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008b5e:	f7f7 ffcd 	bl	8000afc <__aeabi_dcmplt>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	f040 80b7 	bne.w	8008cd6 <_dtoa_r+0x69e>
 8008b68:	eba5 030b 	sub.w	r3, r5, fp
 8008b6c:	429f      	cmp	r7, r3
 8008b6e:	f77f af7c 	ble.w	8008a6a <_dtoa_r+0x432>
 8008b72:	2200      	movs	r2, #0
 8008b74:	4b30      	ldr	r3, [pc, #192]	; (8008c38 <_dtoa_r+0x600>)
 8008b76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b7a:	f7f7 fd4d 	bl	8000618 <__aeabi_dmul>
 8008b7e:	2200      	movs	r2, #0
 8008b80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008b84:	4b2c      	ldr	r3, [pc, #176]	; (8008c38 <_dtoa_r+0x600>)
 8008b86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b8a:	f7f7 fd45 	bl	8000618 <__aeabi_dmul>
 8008b8e:	e9cd 0100 	strd	r0, r1, [sp]
 8008b92:	e7c4      	b.n	8008b1e <_dtoa_r+0x4e6>
 8008b94:	462a      	mov	r2, r5
 8008b96:	4633      	mov	r3, r6
 8008b98:	f7f7 fd3e 	bl	8000618 <__aeabi_dmul>
 8008b9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008ba0:	eb0b 0507 	add.w	r5, fp, r7
 8008ba4:	465e      	mov	r6, fp
 8008ba6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008baa:	f7f7 ffe5 	bl	8000b78 <__aeabi_d2iz>
 8008bae:	4607      	mov	r7, r0
 8008bb0:	f7f7 fcc8 	bl	8000544 <__aeabi_i2d>
 8008bb4:	3730      	adds	r7, #48	; 0x30
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bbe:	f7f7 fb73 	bl	80002a8 <__aeabi_dsub>
 8008bc2:	f806 7b01 	strb.w	r7, [r6], #1
 8008bc6:	42ae      	cmp	r6, r5
 8008bc8:	e9cd 0100 	strd	r0, r1, [sp]
 8008bcc:	f04f 0200 	mov.w	r2, #0
 8008bd0:	d126      	bne.n	8008c20 <_dtoa_r+0x5e8>
 8008bd2:	4b1c      	ldr	r3, [pc, #112]	; (8008c44 <_dtoa_r+0x60c>)
 8008bd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bd8:	f7f7 fb68 	bl	80002ac <__adddf3>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008be4:	f7f7 ffa8 	bl	8000b38 <__aeabi_dcmpgt>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d174      	bne.n	8008cd6 <_dtoa_r+0x69e>
 8008bec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	4914      	ldr	r1, [pc, #80]	; (8008c44 <_dtoa_r+0x60c>)
 8008bf4:	f7f7 fb58 	bl	80002a8 <__aeabi_dsub>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c00:	f7f7 ff7c 	bl	8000afc <__aeabi_dcmplt>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	f43f af30 	beq.w	8008a6a <_dtoa_r+0x432>
 8008c0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c0e:	2b30      	cmp	r3, #48	; 0x30
 8008c10:	f105 32ff 	add.w	r2, r5, #4294967295
 8008c14:	d002      	beq.n	8008c1c <_dtoa_r+0x5e4>
 8008c16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008c1a:	e04a      	b.n	8008cb2 <_dtoa_r+0x67a>
 8008c1c:	4615      	mov	r5, r2
 8008c1e:	e7f4      	b.n	8008c0a <_dtoa_r+0x5d2>
 8008c20:	4b05      	ldr	r3, [pc, #20]	; (8008c38 <_dtoa_r+0x600>)
 8008c22:	f7f7 fcf9 	bl	8000618 <__aeabi_dmul>
 8008c26:	e9cd 0100 	strd	r0, r1, [sp]
 8008c2a:	e7bc      	b.n	8008ba6 <_dtoa_r+0x56e>
 8008c2c:	0800c148 	.word	0x0800c148
 8008c30:	0800c120 	.word	0x0800c120
 8008c34:	3ff00000 	.word	0x3ff00000
 8008c38:	40240000 	.word	0x40240000
 8008c3c:	401c0000 	.word	0x401c0000
 8008c40:	40140000 	.word	0x40140000
 8008c44:	3fe00000 	.word	0x3fe00000
 8008c48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008c4c:	465d      	mov	r5, fp
 8008c4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c52:	4630      	mov	r0, r6
 8008c54:	4639      	mov	r1, r7
 8008c56:	f7f7 fe09 	bl	800086c <__aeabi_ddiv>
 8008c5a:	f7f7 ff8d 	bl	8000b78 <__aeabi_d2iz>
 8008c5e:	4680      	mov	r8, r0
 8008c60:	f7f7 fc70 	bl	8000544 <__aeabi_i2d>
 8008c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c68:	f7f7 fcd6 	bl	8000618 <__aeabi_dmul>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	4630      	mov	r0, r6
 8008c72:	4639      	mov	r1, r7
 8008c74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008c78:	f7f7 fb16 	bl	80002a8 <__aeabi_dsub>
 8008c7c:	f805 6b01 	strb.w	r6, [r5], #1
 8008c80:	eba5 060b 	sub.w	r6, r5, fp
 8008c84:	45b1      	cmp	r9, r6
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	d139      	bne.n	8008d00 <_dtoa_r+0x6c8>
 8008c8c:	f7f7 fb0e 	bl	80002ac <__adddf3>
 8008c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c94:	4606      	mov	r6, r0
 8008c96:	460f      	mov	r7, r1
 8008c98:	f7f7 ff4e 	bl	8000b38 <__aeabi_dcmpgt>
 8008c9c:	b9c8      	cbnz	r0, 8008cd2 <_dtoa_r+0x69a>
 8008c9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	f7f7 ff1f 	bl	8000ae8 <__aeabi_dcmpeq>
 8008caa:	b110      	cbz	r0, 8008cb2 <_dtoa_r+0x67a>
 8008cac:	f018 0f01 	tst.w	r8, #1
 8008cb0:	d10f      	bne.n	8008cd2 <_dtoa_r+0x69a>
 8008cb2:	9904      	ldr	r1, [sp, #16]
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f000 fe0a 	bl	80098ce <_Bfree>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008cbe:	702b      	strb	r3, [r5, #0]
 8008cc0:	f10a 0301 	add.w	r3, sl, #1
 8008cc4:	6013      	str	r3, [r2, #0]
 8008cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 8241 	beq.w	8009150 <_dtoa_r+0xb18>
 8008cce:	601d      	str	r5, [r3, #0]
 8008cd0:	e23e      	b.n	8009150 <_dtoa_r+0xb18>
 8008cd2:	f8cd a020 	str.w	sl, [sp, #32]
 8008cd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008cda:	2a39      	cmp	r2, #57	; 0x39
 8008cdc:	f105 33ff 	add.w	r3, r5, #4294967295
 8008ce0:	d108      	bne.n	8008cf4 <_dtoa_r+0x6bc>
 8008ce2:	459b      	cmp	fp, r3
 8008ce4:	d10a      	bne.n	8008cfc <_dtoa_r+0x6c4>
 8008ce6:	9b08      	ldr	r3, [sp, #32]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	9308      	str	r3, [sp, #32]
 8008cec:	2330      	movs	r3, #48	; 0x30
 8008cee:	f88b 3000 	strb.w	r3, [fp]
 8008cf2:	465b      	mov	r3, fp
 8008cf4:	781a      	ldrb	r2, [r3, #0]
 8008cf6:	3201      	adds	r2, #1
 8008cf8:	701a      	strb	r2, [r3, #0]
 8008cfa:	e78c      	b.n	8008c16 <_dtoa_r+0x5de>
 8008cfc:	461d      	mov	r5, r3
 8008cfe:	e7ea      	b.n	8008cd6 <_dtoa_r+0x69e>
 8008d00:	2200      	movs	r2, #0
 8008d02:	4b9b      	ldr	r3, [pc, #620]	; (8008f70 <_dtoa_r+0x938>)
 8008d04:	f7f7 fc88 	bl	8000618 <__aeabi_dmul>
 8008d08:	2200      	movs	r2, #0
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	4606      	mov	r6, r0
 8008d0e:	460f      	mov	r7, r1
 8008d10:	f7f7 feea 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d09a      	beq.n	8008c4e <_dtoa_r+0x616>
 8008d18:	e7cb      	b.n	8008cb2 <_dtoa_r+0x67a>
 8008d1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d1c:	2a00      	cmp	r2, #0
 8008d1e:	f000 808b 	beq.w	8008e38 <_dtoa_r+0x800>
 8008d22:	9a06      	ldr	r2, [sp, #24]
 8008d24:	2a01      	cmp	r2, #1
 8008d26:	dc6e      	bgt.n	8008e06 <_dtoa_r+0x7ce>
 8008d28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d2a:	2a00      	cmp	r2, #0
 8008d2c:	d067      	beq.n	8008dfe <_dtoa_r+0x7c6>
 8008d2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d32:	9f07      	ldr	r7, [sp, #28]
 8008d34:	9d05      	ldr	r5, [sp, #20]
 8008d36:	9a05      	ldr	r2, [sp, #20]
 8008d38:	2101      	movs	r1, #1
 8008d3a:	441a      	add	r2, r3
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	9205      	str	r2, [sp, #20]
 8008d40:	4498      	add	r8, r3
 8008d42:	f000 fea2 	bl	8009a8a <__i2b>
 8008d46:	4606      	mov	r6, r0
 8008d48:	2d00      	cmp	r5, #0
 8008d4a:	dd0c      	ble.n	8008d66 <_dtoa_r+0x72e>
 8008d4c:	f1b8 0f00 	cmp.w	r8, #0
 8008d50:	dd09      	ble.n	8008d66 <_dtoa_r+0x72e>
 8008d52:	4545      	cmp	r5, r8
 8008d54:	9a05      	ldr	r2, [sp, #20]
 8008d56:	462b      	mov	r3, r5
 8008d58:	bfa8      	it	ge
 8008d5a:	4643      	movge	r3, r8
 8008d5c:	1ad2      	subs	r2, r2, r3
 8008d5e:	9205      	str	r2, [sp, #20]
 8008d60:	1aed      	subs	r5, r5, r3
 8008d62:	eba8 0803 	sub.w	r8, r8, r3
 8008d66:	9b07      	ldr	r3, [sp, #28]
 8008d68:	b1eb      	cbz	r3, 8008da6 <_dtoa_r+0x76e>
 8008d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d067      	beq.n	8008e40 <_dtoa_r+0x808>
 8008d70:	b18f      	cbz	r7, 8008d96 <_dtoa_r+0x75e>
 8008d72:	4631      	mov	r1, r6
 8008d74:	463a      	mov	r2, r7
 8008d76:	4620      	mov	r0, r4
 8008d78:	f000 ff26 	bl	8009bc8 <__pow5mult>
 8008d7c:	9a04      	ldr	r2, [sp, #16]
 8008d7e:	4601      	mov	r1, r0
 8008d80:	4606      	mov	r6, r0
 8008d82:	4620      	mov	r0, r4
 8008d84:	f000 fe8a 	bl	8009a9c <__multiply>
 8008d88:	9904      	ldr	r1, [sp, #16]
 8008d8a:	9008      	str	r0, [sp, #32]
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f000 fd9e 	bl	80098ce <_Bfree>
 8008d92:	9b08      	ldr	r3, [sp, #32]
 8008d94:	9304      	str	r3, [sp, #16]
 8008d96:	9b07      	ldr	r3, [sp, #28]
 8008d98:	1bda      	subs	r2, r3, r7
 8008d9a:	d004      	beq.n	8008da6 <_dtoa_r+0x76e>
 8008d9c:	9904      	ldr	r1, [sp, #16]
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f000 ff12 	bl	8009bc8 <__pow5mult>
 8008da4:	9004      	str	r0, [sp, #16]
 8008da6:	2101      	movs	r1, #1
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 fe6e 	bl	8009a8a <__i2b>
 8008dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008db0:	4607      	mov	r7, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 81d0 	beq.w	8009158 <_dtoa_r+0xb20>
 8008db8:	461a      	mov	r2, r3
 8008dba:	4601      	mov	r1, r0
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f000 ff03 	bl	8009bc8 <__pow5mult>
 8008dc2:	9b06      	ldr	r3, [sp, #24]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	4607      	mov	r7, r0
 8008dc8:	dc40      	bgt.n	8008e4c <_dtoa_r+0x814>
 8008dca:	9b00      	ldr	r3, [sp, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d139      	bne.n	8008e44 <_dtoa_r+0x80c>
 8008dd0:	9b01      	ldr	r3, [sp, #4]
 8008dd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d136      	bne.n	8008e48 <_dtoa_r+0x810>
 8008dda:	9b01      	ldr	r3, [sp, #4]
 8008ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008de0:	0d1b      	lsrs	r3, r3, #20
 8008de2:	051b      	lsls	r3, r3, #20
 8008de4:	b12b      	cbz	r3, 8008df2 <_dtoa_r+0x7ba>
 8008de6:	9b05      	ldr	r3, [sp, #20]
 8008de8:	3301      	adds	r3, #1
 8008dea:	9305      	str	r3, [sp, #20]
 8008dec:	f108 0801 	add.w	r8, r8, #1
 8008df0:	2301      	movs	r3, #1
 8008df2:	9307      	str	r3, [sp, #28]
 8008df4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d12a      	bne.n	8008e50 <_dtoa_r+0x818>
 8008dfa:	2001      	movs	r0, #1
 8008dfc:	e030      	b.n	8008e60 <_dtoa_r+0x828>
 8008dfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e04:	e795      	b.n	8008d32 <_dtoa_r+0x6fa>
 8008e06:	9b07      	ldr	r3, [sp, #28]
 8008e08:	f109 37ff 	add.w	r7, r9, #4294967295
 8008e0c:	42bb      	cmp	r3, r7
 8008e0e:	bfbf      	itttt	lt
 8008e10:	9b07      	ldrlt	r3, [sp, #28]
 8008e12:	9707      	strlt	r7, [sp, #28]
 8008e14:	1afa      	sublt	r2, r7, r3
 8008e16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008e18:	bfbb      	ittet	lt
 8008e1a:	189b      	addlt	r3, r3, r2
 8008e1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008e1e:	1bdf      	subge	r7, r3, r7
 8008e20:	2700      	movlt	r7, #0
 8008e22:	f1b9 0f00 	cmp.w	r9, #0
 8008e26:	bfb5      	itete	lt
 8008e28:	9b05      	ldrlt	r3, [sp, #20]
 8008e2a:	9d05      	ldrge	r5, [sp, #20]
 8008e2c:	eba3 0509 	sublt.w	r5, r3, r9
 8008e30:	464b      	movge	r3, r9
 8008e32:	bfb8      	it	lt
 8008e34:	2300      	movlt	r3, #0
 8008e36:	e77e      	b.n	8008d36 <_dtoa_r+0x6fe>
 8008e38:	9f07      	ldr	r7, [sp, #28]
 8008e3a:	9d05      	ldr	r5, [sp, #20]
 8008e3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008e3e:	e783      	b.n	8008d48 <_dtoa_r+0x710>
 8008e40:	9a07      	ldr	r2, [sp, #28]
 8008e42:	e7ab      	b.n	8008d9c <_dtoa_r+0x764>
 8008e44:	2300      	movs	r3, #0
 8008e46:	e7d4      	b.n	8008df2 <_dtoa_r+0x7ba>
 8008e48:	9b00      	ldr	r3, [sp, #0]
 8008e4a:	e7d2      	b.n	8008df2 <_dtoa_r+0x7ba>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	9307      	str	r3, [sp, #28]
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008e56:	6918      	ldr	r0, [r3, #16]
 8008e58:	f000 fdc9 	bl	80099ee <__hi0bits>
 8008e5c:	f1c0 0020 	rsb	r0, r0, #32
 8008e60:	4440      	add	r0, r8
 8008e62:	f010 001f 	ands.w	r0, r0, #31
 8008e66:	d047      	beq.n	8008ef8 <_dtoa_r+0x8c0>
 8008e68:	f1c0 0320 	rsb	r3, r0, #32
 8008e6c:	2b04      	cmp	r3, #4
 8008e6e:	dd3b      	ble.n	8008ee8 <_dtoa_r+0x8b0>
 8008e70:	9b05      	ldr	r3, [sp, #20]
 8008e72:	f1c0 001c 	rsb	r0, r0, #28
 8008e76:	4403      	add	r3, r0
 8008e78:	9305      	str	r3, [sp, #20]
 8008e7a:	4405      	add	r5, r0
 8008e7c:	4480      	add	r8, r0
 8008e7e:	9b05      	ldr	r3, [sp, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	dd05      	ble.n	8008e90 <_dtoa_r+0x858>
 8008e84:	461a      	mov	r2, r3
 8008e86:	9904      	ldr	r1, [sp, #16]
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f000 feeb 	bl	8009c64 <__lshift>
 8008e8e:	9004      	str	r0, [sp, #16]
 8008e90:	f1b8 0f00 	cmp.w	r8, #0
 8008e94:	dd05      	ble.n	8008ea2 <_dtoa_r+0x86a>
 8008e96:	4639      	mov	r1, r7
 8008e98:	4642      	mov	r2, r8
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 fee2 	bl	8009c64 <__lshift>
 8008ea0:	4607      	mov	r7, r0
 8008ea2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ea4:	b353      	cbz	r3, 8008efc <_dtoa_r+0x8c4>
 8008ea6:	4639      	mov	r1, r7
 8008ea8:	9804      	ldr	r0, [sp, #16]
 8008eaa:	f000 ff2f 	bl	8009d0c <__mcmp>
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	da24      	bge.n	8008efc <_dtoa_r+0x8c4>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	220a      	movs	r2, #10
 8008eb6:	9904      	ldr	r1, [sp, #16]
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f000 fd1f 	bl	80098fc <__multadd>
 8008ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ec0:	9004      	str	r0, [sp, #16]
 8008ec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f000 814d 	beq.w	8009166 <_dtoa_r+0xb2e>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4631      	mov	r1, r6
 8008ed0:	220a      	movs	r2, #10
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f000 fd12 	bl	80098fc <__multadd>
 8008ed8:	9b02      	ldr	r3, [sp, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	4606      	mov	r6, r0
 8008ede:	dc4f      	bgt.n	8008f80 <_dtoa_r+0x948>
 8008ee0:	9b06      	ldr	r3, [sp, #24]
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	dd4c      	ble.n	8008f80 <_dtoa_r+0x948>
 8008ee6:	e011      	b.n	8008f0c <_dtoa_r+0x8d4>
 8008ee8:	d0c9      	beq.n	8008e7e <_dtoa_r+0x846>
 8008eea:	9a05      	ldr	r2, [sp, #20]
 8008eec:	331c      	adds	r3, #28
 8008eee:	441a      	add	r2, r3
 8008ef0:	9205      	str	r2, [sp, #20]
 8008ef2:	441d      	add	r5, r3
 8008ef4:	4498      	add	r8, r3
 8008ef6:	e7c2      	b.n	8008e7e <_dtoa_r+0x846>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	e7f6      	b.n	8008eea <_dtoa_r+0x8b2>
 8008efc:	f1b9 0f00 	cmp.w	r9, #0
 8008f00:	dc38      	bgt.n	8008f74 <_dtoa_r+0x93c>
 8008f02:	9b06      	ldr	r3, [sp, #24]
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	dd35      	ble.n	8008f74 <_dtoa_r+0x93c>
 8008f08:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f0c:	9b02      	ldr	r3, [sp, #8]
 8008f0e:	b963      	cbnz	r3, 8008f2a <_dtoa_r+0x8f2>
 8008f10:	4639      	mov	r1, r7
 8008f12:	2205      	movs	r2, #5
 8008f14:	4620      	mov	r0, r4
 8008f16:	f000 fcf1 	bl	80098fc <__multadd>
 8008f1a:	4601      	mov	r1, r0
 8008f1c:	4607      	mov	r7, r0
 8008f1e:	9804      	ldr	r0, [sp, #16]
 8008f20:	f000 fef4 	bl	8009d0c <__mcmp>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	f73f adcc 	bgt.w	8008ac2 <_dtoa_r+0x48a>
 8008f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f2c:	465d      	mov	r5, fp
 8008f2e:	ea6f 0a03 	mvn.w	sl, r3
 8008f32:	f04f 0900 	mov.w	r9, #0
 8008f36:	4639      	mov	r1, r7
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f000 fcc8 	bl	80098ce <_Bfree>
 8008f3e:	2e00      	cmp	r6, #0
 8008f40:	f43f aeb7 	beq.w	8008cb2 <_dtoa_r+0x67a>
 8008f44:	f1b9 0f00 	cmp.w	r9, #0
 8008f48:	d005      	beq.n	8008f56 <_dtoa_r+0x91e>
 8008f4a:	45b1      	cmp	r9, r6
 8008f4c:	d003      	beq.n	8008f56 <_dtoa_r+0x91e>
 8008f4e:	4649      	mov	r1, r9
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 fcbc 	bl	80098ce <_Bfree>
 8008f56:	4631      	mov	r1, r6
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f000 fcb8 	bl	80098ce <_Bfree>
 8008f5e:	e6a8      	b.n	8008cb2 <_dtoa_r+0x67a>
 8008f60:	2700      	movs	r7, #0
 8008f62:	463e      	mov	r6, r7
 8008f64:	e7e1      	b.n	8008f2a <_dtoa_r+0x8f2>
 8008f66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008f6a:	463e      	mov	r6, r7
 8008f6c:	e5a9      	b.n	8008ac2 <_dtoa_r+0x48a>
 8008f6e:	bf00      	nop
 8008f70:	40240000 	.word	0x40240000
 8008f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f76:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 80fa 	beq.w	8009174 <_dtoa_r+0xb3c>
 8008f80:	2d00      	cmp	r5, #0
 8008f82:	dd05      	ble.n	8008f90 <_dtoa_r+0x958>
 8008f84:	4631      	mov	r1, r6
 8008f86:	462a      	mov	r2, r5
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f000 fe6b 	bl	8009c64 <__lshift>
 8008f8e:	4606      	mov	r6, r0
 8008f90:	9b07      	ldr	r3, [sp, #28]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d04c      	beq.n	8009030 <_dtoa_r+0x9f8>
 8008f96:	6871      	ldr	r1, [r6, #4]
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f000 fc64 	bl	8009866 <_Balloc>
 8008f9e:	6932      	ldr	r2, [r6, #16]
 8008fa0:	3202      	adds	r2, #2
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	0092      	lsls	r2, r2, #2
 8008fa6:	f106 010c 	add.w	r1, r6, #12
 8008faa:	300c      	adds	r0, #12
 8008fac:	f000 fc50 	bl	8009850 <memcpy>
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f000 fe55 	bl	8009c64 <__lshift>
 8008fba:	9b00      	ldr	r3, [sp, #0]
 8008fbc:	f8cd b014 	str.w	fp, [sp, #20]
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	46b1      	mov	r9, r6
 8008fc6:	9307      	str	r3, [sp, #28]
 8008fc8:	4606      	mov	r6, r0
 8008fca:	4639      	mov	r1, r7
 8008fcc:	9804      	ldr	r0, [sp, #16]
 8008fce:	f7ff faa5 	bl	800851c <quorem>
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	4605      	mov	r5, r0
 8008fd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008fda:	9804      	ldr	r0, [sp, #16]
 8008fdc:	f000 fe96 	bl	8009d0c <__mcmp>
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	9000      	str	r0, [sp, #0]
 8008fe4:	4639      	mov	r1, r7
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f000 feaa 	bl	8009d40 <__mdiff>
 8008fec:	68c3      	ldr	r3, [r0, #12]
 8008fee:	4602      	mov	r2, r0
 8008ff0:	bb03      	cbnz	r3, 8009034 <_dtoa_r+0x9fc>
 8008ff2:	4601      	mov	r1, r0
 8008ff4:	9008      	str	r0, [sp, #32]
 8008ff6:	9804      	ldr	r0, [sp, #16]
 8008ff8:	f000 fe88 	bl	8009d0c <__mcmp>
 8008ffc:	9a08      	ldr	r2, [sp, #32]
 8008ffe:	4603      	mov	r3, r0
 8009000:	4611      	mov	r1, r2
 8009002:	4620      	mov	r0, r4
 8009004:	9308      	str	r3, [sp, #32]
 8009006:	f000 fc62 	bl	80098ce <_Bfree>
 800900a:	9b08      	ldr	r3, [sp, #32]
 800900c:	b9a3      	cbnz	r3, 8009038 <_dtoa_r+0xa00>
 800900e:	9a06      	ldr	r2, [sp, #24]
 8009010:	b992      	cbnz	r2, 8009038 <_dtoa_r+0xa00>
 8009012:	9a07      	ldr	r2, [sp, #28]
 8009014:	b982      	cbnz	r2, 8009038 <_dtoa_r+0xa00>
 8009016:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800901a:	d029      	beq.n	8009070 <_dtoa_r+0xa38>
 800901c:	9b00      	ldr	r3, [sp, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	dd01      	ble.n	8009026 <_dtoa_r+0x9ee>
 8009022:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009026:	9b05      	ldr	r3, [sp, #20]
 8009028:	1c5d      	adds	r5, r3, #1
 800902a:	f883 8000 	strb.w	r8, [r3]
 800902e:	e782      	b.n	8008f36 <_dtoa_r+0x8fe>
 8009030:	4630      	mov	r0, r6
 8009032:	e7c2      	b.n	8008fba <_dtoa_r+0x982>
 8009034:	2301      	movs	r3, #1
 8009036:	e7e3      	b.n	8009000 <_dtoa_r+0x9c8>
 8009038:	9a00      	ldr	r2, [sp, #0]
 800903a:	2a00      	cmp	r2, #0
 800903c:	db04      	blt.n	8009048 <_dtoa_r+0xa10>
 800903e:	d125      	bne.n	800908c <_dtoa_r+0xa54>
 8009040:	9a06      	ldr	r2, [sp, #24]
 8009042:	bb1a      	cbnz	r2, 800908c <_dtoa_r+0xa54>
 8009044:	9a07      	ldr	r2, [sp, #28]
 8009046:	bb0a      	cbnz	r2, 800908c <_dtoa_r+0xa54>
 8009048:	2b00      	cmp	r3, #0
 800904a:	ddec      	ble.n	8009026 <_dtoa_r+0x9ee>
 800904c:	2201      	movs	r2, #1
 800904e:	9904      	ldr	r1, [sp, #16]
 8009050:	4620      	mov	r0, r4
 8009052:	f000 fe07 	bl	8009c64 <__lshift>
 8009056:	4639      	mov	r1, r7
 8009058:	9004      	str	r0, [sp, #16]
 800905a:	f000 fe57 	bl	8009d0c <__mcmp>
 800905e:	2800      	cmp	r0, #0
 8009060:	dc03      	bgt.n	800906a <_dtoa_r+0xa32>
 8009062:	d1e0      	bne.n	8009026 <_dtoa_r+0x9ee>
 8009064:	f018 0f01 	tst.w	r8, #1
 8009068:	d0dd      	beq.n	8009026 <_dtoa_r+0x9ee>
 800906a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800906e:	d1d8      	bne.n	8009022 <_dtoa_r+0x9ea>
 8009070:	9b05      	ldr	r3, [sp, #20]
 8009072:	9a05      	ldr	r2, [sp, #20]
 8009074:	1c5d      	adds	r5, r3, #1
 8009076:	2339      	movs	r3, #57	; 0x39
 8009078:	7013      	strb	r3, [r2, #0]
 800907a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800907e:	2b39      	cmp	r3, #57	; 0x39
 8009080:	f105 32ff 	add.w	r2, r5, #4294967295
 8009084:	d04f      	beq.n	8009126 <_dtoa_r+0xaee>
 8009086:	3301      	adds	r3, #1
 8009088:	7013      	strb	r3, [r2, #0]
 800908a:	e754      	b.n	8008f36 <_dtoa_r+0x8fe>
 800908c:	9a05      	ldr	r2, [sp, #20]
 800908e:	2b00      	cmp	r3, #0
 8009090:	f102 0501 	add.w	r5, r2, #1
 8009094:	dd06      	ble.n	80090a4 <_dtoa_r+0xa6c>
 8009096:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800909a:	d0e9      	beq.n	8009070 <_dtoa_r+0xa38>
 800909c:	f108 0801 	add.w	r8, r8, #1
 80090a0:	9b05      	ldr	r3, [sp, #20]
 80090a2:	e7c2      	b.n	800902a <_dtoa_r+0x9f2>
 80090a4:	9a02      	ldr	r2, [sp, #8]
 80090a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80090aa:	eba5 030b 	sub.w	r3, r5, fp
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d021      	beq.n	80090f6 <_dtoa_r+0xabe>
 80090b2:	2300      	movs	r3, #0
 80090b4:	220a      	movs	r2, #10
 80090b6:	9904      	ldr	r1, [sp, #16]
 80090b8:	4620      	mov	r0, r4
 80090ba:	f000 fc1f 	bl	80098fc <__multadd>
 80090be:	45b1      	cmp	r9, r6
 80090c0:	9004      	str	r0, [sp, #16]
 80090c2:	f04f 0300 	mov.w	r3, #0
 80090c6:	f04f 020a 	mov.w	r2, #10
 80090ca:	4649      	mov	r1, r9
 80090cc:	4620      	mov	r0, r4
 80090ce:	d105      	bne.n	80090dc <_dtoa_r+0xaa4>
 80090d0:	f000 fc14 	bl	80098fc <__multadd>
 80090d4:	4681      	mov	r9, r0
 80090d6:	4606      	mov	r6, r0
 80090d8:	9505      	str	r5, [sp, #20]
 80090da:	e776      	b.n	8008fca <_dtoa_r+0x992>
 80090dc:	f000 fc0e 	bl	80098fc <__multadd>
 80090e0:	4631      	mov	r1, r6
 80090e2:	4681      	mov	r9, r0
 80090e4:	2300      	movs	r3, #0
 80090e6:	220a      	movs	r2, #10
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 fc07 	bl	80098fc <__multadd>
 80090ee:	4606      	mov	r6, r0
 80090f0:	e7f2      	b.n	80090d8 <_dtoa_r+0xaa0>
 80090f2:	f04f 0900 	mov.w	r9, #0
 80090f6:	2201      	movs	r2, #1
 80090f8:	9904      	ldr	r1, [sp, #16]
 80090fa:	4620      	mov	r0, r4
 80090fc:	f000 fdb2 	bl	8009c64 <__lshift>
 8009100:	4639      	mov	r1, r7
 8009102:	9004      	str	r0, [sp, #16]
 8009104:	f000 fe02 	bl	8009d0c <__mcmp>
 8009108:	2800      	cmp	r0, #0
 800910a:	dcb6      	bgt.n	800907a <_dtoa_r+0xa42>
 800910c:	d102      	bne.n	8009114 <_dtoa_r+0xadc>
 800910e:	f018 0f01 	tst.w	r8, #1
 8009112:	d1b2      	bne.n	800907a <_dtoa_r+0xa42>
 8009114:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009118:	2b30      	cmp	r3, #48	; 0x30
 800911a:	f105 32ff 	add.w	r2, r5, #4294967295
 800911e:	f47f af0a 	bne.w	8008f36 <_dtoa_r+0x8fe>
 8009122:	4615      	mov	r5, r2
 8009124:	e7f6      	b.n	8009114 <_dtoa_r+0xadc>
 8009126:	4593      	cmp	fp, r2
 8009128:	d105      	bne.n	8009136 <_dtoa_r+0xafe>
 800912a:	2331      	movs	r3, #49	; 0x31
 800912c:	f10a 0a01 	add.w	sl, sl, #1
 8009130:	f88b 3000 	strb.w	r3, [fp]
 8009134:	e6ff      	b.n	8008f36 <_dtoa_r+0x8fe>
 8009136:	4615      	mov	r5, r2
 8009138:	e79f      	b.n	800907a <_dtoa_r+0xa42>
 800913a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80091a0 <_dtoa_r+0xb68>
 800913e:	e007      	b.n	8009150 <_dtoa_r+0xb18>
 8009140:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009142:	f8df b060 	ldr.w	fp, [pc, #96]	; 80091a4 <_dtoa_r+0xb6c>
 8009146:	b11b      	cbz	r3, 8009150 <_dtoa_r+0xb18>
 8009148:	f10b 0308 	add.w	r3, fp, #8
 800914c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800914e:	6013      	str	r3, [r2, #0]
 8009150:	4658      	mov	r0, fp
 8009152:	b017      	add	sp, #92	; 0x5c
 8009154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009158:	9b06      	ldr	r3, [sp, #24]
 800915a:	2b01      	cmp	r3, #1
 800915c:	f77f ae35 	ble.w	8008dca <_dtoa_r+0x792>
 8009160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009162:	9307      	str	r3, [sp, #28]
 8009164:	e649      	b.n	8008dfa <_dtoa_r+0x7c2>
 8009166:	9b02      	ldr	r3, [sp, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	dc03      	bgt.n	8009174 <_dtoa_r+0xb3c>
 800916c:	9b06      	ldr	r3, [sp, #24]
 800916e:	2b02      	cmp	r3, #2
 8009170:	f73f aecc 	bgt.w	8008f0c <_dtoa_r+0x8d4>
 8009174:	465d      	mov	r5, fp
 8009176:	4639      	mov	r1, r7
 8009178:	9804      	ldr	r0, [sp, #16]
 800917a:	f7ff f9cf 	bl	800851c <quorem>
 800917e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009182:	f805 8b01 	strb.w	r8, [r5], #1
 8009186:	9a02      	ldr	r2, [sp, #8]
 8009188:	eba5 030b 	sub.w	r3, r5, fp
 800918c:	429a      	cmp	r2, r3
 800918e:	ddb0      	ble.n	80090f2 <_dtoa_r+0xaba>
 8009190:	2300      	movs	r3, #0
 8009192:	220a      	movs	r2, #10
 8009194:	9904      	ldr	r1, [sp, #16]
 8009196:	4620      	mov	r0, r4
 8009198:	f000 fbb0 	bl	80098fc <__multadd>
 800919c:	9004      	str	r0, [sp, #16]
 800919e:	e7ea      	b.n	8009176 <_dtoa_r+0xb3e>
 80091a0:	0800c08c 	.word	0x0800c08c
 80091a4:	0800c108 	.word	0x0800c108

080091a8 <rshift>:
 80091a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091aa:	6906      	ldr	r6, [r0, #16]
 80091ac:	114b      	asrs	r3, r1, #5
 80091ae:	429e      	cmp	r6, r3
 80091b0:	f100 0414 	add.w	r4, r0, #20
 80091b4:	dd30      	ble.n	8009218 <rshift+0x70>
 80091b6:	f011 011f 	ands.w	r1, r1, #31
 80091ba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80091be:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80091c2:	d108      	bne.n	80091d6 <rshift+0x2e>
 80091c4:	4621      	mov	r1, r4
 80091c6:	42b2      	cmp	r2, r6
 80091c8:	460b      	mov	r3, r1
 80091ca:	d211      	bcs.n	80091f0 <rshift+0x48>
 80091cc:	f852 3b04 	ldr.w	r3, [r2], #4
 80091d0:	f841 3b04 	str.w	r3, [r1], #4
 80091d4:	e7f7      	b.n	80091c6 <rshift+0x1e>
 80091d6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80091da:	f1c1 0c20 	rsb	ip, r1, #32
 80091de:	40cd      	lsrs	r5, r1
 80091e0:	3204      	adds	r2, #4
 80091e2:	4623      	mov	r3, r4
 80091e4:	42b2      	cmp	r2, r6
 80091e6:	4617      	mov	r7, r2
 80091e8:	d30c      	bcc.n	8009204 <rshift+0x5c>
 80091ea:	601d      	str	r5, [r3, #0]
 80091ec:	b105      	cbz	r5, 80091f0 <rshift+0x48>
 80091ee:	3304      	adds	r3, #4
 80091f0:	1b1a      	subs	r2, r3, r4
 80091f2:	42a3      	cmp	r3, r4
 80091f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80091f8:	bf08      	it	eq
 80091fa:	2300      	moveq	r3, #0
 80091fc:	6102      	str	r2, [r0, #16]
 80091fe:	bf08      	it	eq
 8009200:	6143      	streq	r3, [r0, #20]
 8009202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009204:	683f      	ldr	r7, [r7, #0]
 8009206:	fa07 f70c 	lsl.w	r7, r7, ip
 800920a:	433d      	orrs	r5, r7
 800920c:	f843 5b04 	str.w	r5, [r3], #4
 8009210:	f852 5b04 	ldr.w	r5, [r2], #4
 8009214:	40cd      	lsrs	r5, r1
 8009216:	e7e5      	b.n	80091e4 <rshift+0x3c>
 8009218:	4623      	mov	r3, r4
 800921a:	e7e9      	b.n	80091f0 <rshift+0x48>

0800921c <__hexdig_fun>:
 800921c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009220:	2b09      	cmp	r3, #9
 8009222:	d802      	bhi.n	800922a <__hexdig_fun+0xe>
 8009224:	3820      	subs	r0, #32
 8009226:	b2c0      	uxtb	r0, r0
 8009228:	4770      	bx	lr
 800922a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800922e:	2b05      	cmp	r3, #5
 8009230:	d801      	bhi.n	8009236 <__hexdig_fun+0x1a>
 8009232:	3847      	subs	r0, #71	; 0x47
 8009234:	e7f7      	b.n	8009226 <__hexdig_fun+0xa>
 8009236:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800923a:	2b05      	cmp	r3, #5
 800923c:	d801      	bhi.n	8009242 <__hexdig_fun+0x26>
 800923e:	3827      	subs	r0, #39	; 0x27
 8009240:	e7f1      	b.n	8009226 <__hexdig_fun+0xa>
 8009242:	2000      	movs	r0, #0
 8009244:	4770      	bx	lr

08009246 <__gethex>:
 8009246:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924a:	b08b      	sub	sp, #44	; 0x2c
 800924c:	468a      	mov	sl, r1
 800924e:	9002      	str	r0, [sp, #8]
 8009250:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009252:	9306      	str	r3, [sp, #24]
 8009254:	4690      	mov	r8, r2
 8009256:	f000 fad0 	bl	80097fa <__localeconv_l>
 800925a:	6803      	ldr	r3, [r0, #0]
 800925c:	9303      	str	r3, [sp, #12]
 800925e:	4618      	mov	r0, r3
 8009260:	f7f6 ffc6 	bl	80001f0 <strlen>
 8009264:	9b03      	ldr	r3, [sp, #12]
 8009266:	9001      	str	r0, [sp, #4]
 8009268:	4403      	add	r3, r0
 800926a:	f04f 0b00 	mov.w	fp, #0
 800926e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009272:	9307      	str	r3, [sp, #28]
 8009274:	f8da 3000 	ldr.w	r3, [sl]
 8009278:	3302      	adds	r3, #2
 800927a:	461f      	mov	r7, r3
 800927c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009280:	2830      	cmp	r0, #48	; 0x30
 8009282:	d06c      	beq.n	800935e <__gethex+0x118>
 8009284:	f7ff ffca 	bl	800921c <__hexdig_fun>
 8009288:	4604      	mov	r4, r0
 800928a:	2800      	cmp	r0, #0
 800928c:	d16a      	bne.n	8009364 <__gethex+0x11e>
 800928e:	9a01      	ldr	r2, [sp, #4]
 8009290:	9903      	ldr	r1, [sp, #12]
 8009292:	4638      	mov	r0, r7
 8009294:	f001 f8fe 	bl	800a494 <strncmp>
 8009298:	2800      	cmp	r0, #0
 800929a:	d166      	bne.n	800936a <__gethex+0x124>
 800929c:	9b01      	ldr	r3, [sp, #4]
 800929e:	5cf8      	ldrb	r0, [r7, r3]
 80092a0:	18fe      	adds	r6, r7, r3
 80092a2:	f7ff ffbb 	bl	800921c <__hexdig_fun>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d062      	beq.n	8009370 <__gethex+0x12a>
 80092aa:	4633      	mov	r3, r6
 80092ac:	7818      	ldrb	r0, [r3, #0]
 80092ae:	2830      	cmp	r0, #48	; 0x30
 80092b0:	461f      	mov	r7, r3
 80092b2:	f103 0301 	add.w	r3, r3, #1
 80092b6:	d0f9      	beq.n	80092ac <__gethex+0x66>
 80092b8:	f7ff ffb0 	bl	800921c <__hexdig_fun>
 80092bc:	fab0 f580 	clz	r5, r0
 80092c0:	096d      	lsrs	r5, r5, #5
 80092c2:	4634      	mov	r4, r6
 80092c4:	f04f 0b01 	mov.w	fp, #1
 80092c8:	463a      	mov	r2, r7
 80092ca:	4616      	mov	r6, r2
 80092cc:	3201      	adds	r2, #1
 80092ce:	7830      	ldrb	r0, [r6, #0]
 80092d0:	f7ff ffa4 	bl	800921c <__hexdig_fun>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d1f8      	bne.n	80092ca <__gethex+0x84>
 80092d8:	9a01      	ldr	r2, [sp, #4]
 80092da:	9903      	ldr	r1, [sp, #12]
 80092dc:	4630      	mov	r0, r6
 80092de:	f001 f8d9 	bl	800a494 <strncmp>
 80092e2:	b950      	cbnz	r0, 80092fa <__gethex+0xb4>
 80092e4:	b954      	cbnz	r4, 80092fc <__gethex+0xb6>
 80092e6:	9b01      	ldr	r3, [sp, #4]
 80092e8:	18f4      	adds	r4, r6, r3
 80092ea:	4622      	mov	r2, r4
 80092ec:	4616      	mov	r6, r2
 80092ee:	3201      	adds	r2, #1
 80092f0:	7830      	ldrb	r0, [r6, #0]
 80092f2:	f7ff ff93 	bl	800921c <__hexdig_fun>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	d1f8      	bne.n	80092ec <__gethex+0xa6>
 80092fa:	b10c      	cbz	r4, 8009300 <__gethex+0xba>
 80092fc:	1ba4      	subs	r4, r4, r6
 80092fe:	00a4      	lsls	r4, r4, #2
 8009300:	7833      	ldrb	r3, [r6, #0]
 8009302:	2b50      	cmp	r3, #80	; 0x50
 8009304:	d001      	beq.n	800930a <__gethex+0xc4>
 8009306:	2b70      	cmp	r3, #112	; 0x70
 8009308:	d140      	bne.n	800938c <__gethex+0x146>
 800930a:	7873      	ldrb	r3, [r6, #1]
 800930c:	2b2b      	cmp	r3, #43	; 0x2b
 800930e:	d031      	beq.n	8009374 <__gethex+0x12e>
 8009310:	2b2d      	cmp	r3, #45	; 0x2d
 8009312:	d033      	beq.n	800937c <__gethex+0x136>
 8009314:	1c71      	adds	r1, r6, #1
 8009316:	f04f 0900 	mov.w	r9, #0
 800931a:	7808      	ldrb	r0, [r1, #0]
 800931c:	f7ff ff7e 	bl	800921c <__hexdig_fun>
 8009320:	1e43      	subs	r3, r0, #1
 8009322:	b2db      	uxtb	r3, r3
 8009324:	2b18      	cmp	r3, #24
 8009326:	d831      	bhi.n	800938c <__gethex+0x146>
 8009328:	f1a0 0210 	sub.w	r2, r0, #16
 800932c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009330:	f7ff ff74 	bl	800921c <__hexdig_fun>
 8009334:	1e43      	subs	r3, r0, #1
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b18      	cmp	r3, #24
 800933a:	d922      	bls.n	8009382 <__gethex+0x13c>
 800933c:	f1b9 0f00 	cmp.w	r9, #0
 8009340:	d000      	beq.n	8009344 <__gethex+0xfe>
 8009342:	4252      	negs	r2, r2
 8009344:	4414      	add	r4, r2
 8009346:	f8ca 1000 	str.w	r1, [sl]
 800934a:	b30d      	cbz	r5, 8009390 <__gethex+0x14a>
 800934c:	f1bb 0f00 	cmp.w	fp, #0
 8009350:	bf0c      	ite	eq
 8009352:	2706      	moveq	r7, #6
 8009354:	2700      	movne	r7, #0
 8009356:	4638      	mov	r0, r7
 8009358:	b00b      	add	sp, #44	; 0x2c
 800935a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800935e:	f10b 0b01 	add.w	fp, fp, #1
 8009362:	e78a      	b.n	800927a <__gethex+0x34>
 8009364:	2500      	movs	r5, #0
 8009366:	462c      	mov	r4, r5
 8009368:	e7ae      	b.n	80092c8 <__gethex+0x82>
 800936a:	463e      	mov	r6, r7
 800936c:	2501      	movs	r5, #1
 800936e:	e7c7      	b.n	8009300 <__gethex+0xba>
 8009370:	4604      	mov	r4, r0
 8009372:	e7fb      	b.n	800936c <__gethex+0x126>
 8009374:	f04f 0900 	mov.w	r9, #0
 8009378:	1cb1      	adds	r1, r6, #2
 800937a:	e7ce      	b.n	800931a <__gethex+0xd4>
 800937c:	f04f 0901 	mov.w	r9, #1
 8009380:	e7fa      	b.n	8009378 <__gethex+0x132>
 8009382:	230a      	movs	r3, #10
 8009384:	fb03 0202 	mla	r2, r3, r2, r0
 8009388:	3a10      	subs	r2, #16
 800938a:	e7cf      	b.n	800932c <__gethex+0xe6>
 800938c:	4631      	mov	r1, r6
 800938e:	e7da      	b.n	8009346 <__gethex+0x100>
 8009390:	1bf3      	subs	r3, r6, r7
 8009392:	3b01      	subs	r3, #1
 8009394:	4629      	mov	r1, r5
 8009396:	2b07      	cmp	r3, #7
 8009398:	dc49      	bgt.n	800942e <__gethex+0x1e8>
 800939a:	9802      	ldr	r0, [sp, #8]
 800939c:	f000 fa63 	bl	8009866 <_Balloc>
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	f100 0914 	add.w	r9, r0, #20
 80093a6:	f04f 0b00 	mov.w	fp, #0
 80093aa:	f1c3 0301 	rsb	r3, r3, #1
 80093ae:	4605      	mov	r5, r0
 80093b0:	f8cd 9010 	str.w	r9, [sp, #16]
 80093b4:	46da      	mov	sl, fp
 80093b6:	9308      	str	r3, [sp, #32]
 80093b8:	42b7      	cmp	r7, r6
 80093ba:	d33b      	bcc.n	8009434 <__gethex+0x1ee>
 80093bc:	9804      	ldr	r0, [sp, #16]
 80093be:	f840 ab04 	str.w	sl, [r0], #4
 80093c2:	eba0 0009 	sub.w	r0, r0, r9
 80093c6:	1080      	asrs	r0, r0, #2
 80093c8:	6128      	str	r0, [r5, #16]
 80093ca:	0147      	lsls	r7, r0, #5
 80093cc:	4650      	mov	r0, sl
 80093ce:	f000 fb0e 	bl	80099ee <__hi0bits>
 80093d2:	f8d8 6000 	ldr.w	r6, [r8]
 80093d6:	1a3f      	subs	r7, r7, r0
 80093d8:	42b7      	cmp	r7, r6
 80093da:	dd64      	ble.n	80094a6 <__gethex+0x260>
 80093dc:	1bbf      	subs	r7, r7, r6
 80093de:	4639      	mov	r1, r7
 80093e0:	4628      	mov	r0, r5
 80093e2:	f000 fe1d 	bl	800a020 <__any_on>
 80093e6:	4682      	mov	sl, r0
 80093e8:	b178      	cbz	r0, 800940a <__gethex+0x1c4>
 80093ea:	1e7b      	subs	r3, r7, #1
 80093ec:	1159      	asrs	r1, r3, #5
 80093ee:	f003 021f 	and.w	r2, r3, #31
 80093f2:	f04f 0a01 	mov.w	sl, #1
 80093f6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80093fa:	fa0a f202 	lsl.w	r2, sl, r2
 80093fe:	420a      	tst	r2, r1
 8009400:	d003      	beq.n	800940a <__gethex+0x1c4>
 8009402:	4553      	cmp	r3, sl
 8009404:	dc46      	bgt.n	8009494 <__gethex+0x24e>
 8009406:	f04f 0a02 	mov.w	sl, #2
 800940a:	4639      	mov	r1, r7
 800940c:	4628      	mov	r0, r5
 800940e:	f7ff fecb 	bl	80091a8 <rshift>
 8009412:	443c      	add	r4, r7
 8009414:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009418:	42a3      	cmp	r3, r4
 800941a:	da52      	bge.n	80094c2 <__gethex+0x27c>
 800941c:	4629      	mov	r1, r5
 800941e:	9802      	ldr	r0, [sp, #8]
 8009420:	f000 fa55 	bl	80098ce <_Bfree>
 8009424:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009426:	2300      	movs	r3, #0
 8009428:	6013      	str	r3, [r2, #0]
 800942a:	27a3      	movs	r7, #163	; 0xa3
 800942c:	e793      	b.n	8009356 <__gethex+0x110>
 800942e:	3101      	adds	r1, #1
 8009430:	105b      	asrs	r3, r3, #1
 8009432:	e7b0      	b.n	8009396 <__gethex+0x150>
 8009434:	1e73      	subs	r3, r6, #1
 8009436:	9305      	str	r3, [sp, #20]
 8009438:	9a07      	ldr	r2, [sp, #28]
 800943a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800943e:	4293      	cmp	r3, r2
 8009440:	d018      	beq.n	8009474 <__gethex+0x22e>
 8009442:	f1bb 0f20 	cmp.w	fp, #32
 8009446:	d107      	bne.n	8009458 <__gethex+0x212>
 8009448:	9b04      	ldr	r3, [sp, #16]
 800944a:	f8c3 a000 	str.w	sl, [r3]
 800944e:	3304      	adds	r3, #4
 8009450:	f04f 0a00 	mov.w	sl, #0
 8009454:	9304      	str	r3, [sp, #16]
 8009456:	46d3      	mov	fp, sl
 8009458:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800945c:	f7ff fede 	bl	800921c <__hexdig_fun>
 8009460:	f000 000f 	and.w	r0, r0, #15
 8009464:	fa00 f00b 	lsl.w	r0, r0, fp
 8009468:	ea4a 0a00 	orr.w	sl, sl, r0
 800946c:	f10b 0b04 	add.w	fp, fp, #4
 8009470:	9b05      	ldr	r3, [sp, #20]
 8009472:	e00d      	b.n	8009490 <__gethex+0x24a>
 8009474:	9b05      	ldr	r3, [sp, #20]
 8009476:	9a08      	ldr	r2, [sp, #32]
 8009478:	4413      	add	r3, r2
 800947a:	42bb      	cmp	r3, r7
 800947c:	d3e1      	bcc.n	8009442 <__gethex+0x1fc>
 800947e:	4618      	mov	r0, r3
 8009480:	9a01      	ldr	r2, [sp, #4]
 8009482:	9903      	ldr	r1, [sp, #12]
 8009484:	9309      	str	r3, [sp, #36]	; 0x24
 8009486:	f001 f805 	bl	800a494 <strncmp>
 800948a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800948c:	2800      	cmp	r0, #0
 800948e:	d1d8      	bne.n	8009442 <__gethex+0x1fc>
 8009490:	461e      	mov	r6, r3
 8009492:	e791      	b.n	80093b8 <__gethex+0x172>
 8009494:	1eb9      	subs	r1, r7, #2
 8009496:	4628      	mov	r0, r5
 8009498:	f000 fdc2 	bl	800a020 <__any_on>
 800949c:	2800      	cmp	r0, #0
 800949e:	d0b2      	beq.n	8009406 <__gethex+0x1c0>
 80094a0:	f04f 0a03 	mov.w	sl, #3
 80094a4:	e7b1      	b.n	800940a <__gethex+0x1c4>
 80094a6:	da09      	bge.n	80094bc <__gethex+0x276>
 80094a8:	1bf7      	subs	r7, r6, r7
 80094aa:	4629      	mov	r1, r5
 80094ac:	463a      	mov	r2, r7
 80094ae:	9802      	ldr	r0, [sp, #8]
 80094b0:	f000 fbd8 	bl	8009c64 <__lshift>
 80094b4:	1be4      	subs	r4, r4, r7
 80094b6:	4605      	mov	r5, r0
 80094b8:	f100 0914 	add.w	r9, r0, #20
 80094bc:	f04f 0a00 	mov.w	sl, #0
 80094c0:	e7a8      	b.n	8009414 <__gethex+0x1ce>
 80094c2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80094c6:	42a0      	cmp	r0, r4
 80094c8:	dd6a      	ble.n	80095a0 <__gethex+0x35a>
 80094ca:	1b04      	subs	r4, r0, r4
 80094cc:	42a6      	cmp	r6, r4
 80094ce:	dc2e      	bgt.n	800952e <__gethex+0x2e8>
 80094d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d022      	beq.n	800951e <__gethex+0x2d8>
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d024      	beq.n	8009526 <__gethex+0x2e0>
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d115      	bne.n	800950c <__gethex+0x2c6>
 80094e0:	42a6      	cmp	r6, r4
 80094e2:	d113      	bne.n	800950c <__gethex+0x2c6>
 80094e4:	2e01      	cmp	r6, #1
 80094e6:	dc0b      	bgt.n	8009500 <__gethex+0x2ba>
 80094e8:	9a06      	ldr	r2, [sp, #24]
 80094ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094ee:	6013      	str	r3, [r2, #0]
 80094f0:	2301      	movs	r3, #1
 80094f2:	612b      	str	r3, [r5, #16]
 80094f4:	f8c9 3000 	str.w	r3, [r9]
 80094f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094fa:	2762      	movs	r7, #98	; 0x62
 80094fc:	601d      	str	r5, [r3, #0]
 80094fe:	e72a      	b.n	8009356 <__gethex+0x110>
 8009500:	1e71      	subs	r1, r6, #1
 8009502:	4628      	mov	r0, r5
 8009504:	f000 fd8c 	bl	800a020 <__any_on>
 8009508:	2800      	cmp	r0, #0
 800950a:	d1ed      	bne.n	80094e8 <__gethex+0x2a2>
 800950c:	4629      	mov	r1, r5
 800950e:	9802      	ldr	r0, [sp, #8]
 8009510:	f000 f9dd 	bl	80098ce <_Bfree>
 8009514:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009516:	2300      	movs	r3, #0
 8009518:	6013      	str	r3, [r2, #0]
 800951a:	2750      	movs	r7, #80	; 0x50
 800951c:	e71b      	b.n	8009356 <__gethex+0x110>
 800951e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009520:	2b00      	cmp	r3, #0
 8009522:	d0e1      	beq.n	80094e8 <__gethex+0x2a2>
 8009524:	e7f2      	b.n	800950c <__gethex+0x2c6>
 8009526:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1dd      	bne.n	80094e8 <__gethex+0x2a2>
 800952c:	e7ee      	b.n	800950c <__gethex+0x2c6>
 800952e:	1e67      	subs	r7, r4, #1
 8009530:	f1ba 0f00 	cmp.w	sl, #0
 8009534:	d131      	bne.n	800959a <__gethex+0x354>
 8009536:	b127      	cbz	r7, 8009542 <__gethex+0x2fc>
 8009538:	4639      	mov	r1, r7
 800953a:	4628      	mov	r0, r5
 800953c:	f000 fd70 	bl	800a020 <__any_on>
 8009540:	4682      	mov	sl, r0
 8009542:	117a      	asrs	r2, r7, #5
 8009544:	2301      	movs	r3, #1
 8009546:	f007 071f 	and.w	r7, r7, #31
 800954a:	fa03 f707 	lsl.w	r7, r3, r7
 800954e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009552:	4621      	mov	r1, r4
 8009554:	421f      	tst	r7, r3
 8009556:	4628      	mov	r0, r5
 8009558:	bf18      	it	ne
 800955a:	f04a 0a02 	orrne.w	sl, sl, #2
 800955e:	1b36      	subs	r6, r6, r4
 8009560:	f7ff fe22 	bl	80091a8 <rshift>
 8009564:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009568:	2702      	movs	r7, #2
 800956a:	f1ba 0f00 	cmp.w	sl, #0
 800956e:	d048      	beq.n	8009602 <__gethex+0x3bc>
 8009570:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009574:	2b02      	cmp	r3, #2
 8009576:	d015      	beq.n	80095a4 <__gethex+0x35e>
 8009578:	2b03      	cmp	r3, #3
 800957a:	d017      	beq.n	80095ac <__gethex+0x366>
 800957c:	2b01      	cmp	r3, #1
 800957e:	d109      	bne.n	8009594 <__gethex+0x34e>
 8009580:	f01a 0f02 	tst.w	sl, #2
 8009584:	d006      	beq.n	8009594 <__gethex+0x34e>
 8009586:	f8d9 3000 	ldr.w	r3, [r9]
 800958a:	ea4a 0a03 	orr.w	sl, sl, r3
 800958e:	f01a 0f01 	tst.w	sl, #1
 8009592:	d10e      	bne.n	80095b2 <__gethex+0x36c>
 8009594:	f047 0710 	orr.w	r7, r7, #16
 8009598:	e033      	b.n	8009602 <__gethex+0x3bc>
 800959a:	f04f 0a01 	mov.w	sl, #1
 800959e:	e7d0      	b.n	8009542 <__gethex+0x2fc>
 80095a0:	2701      	movs	r7, #1
 80095a2:	e7e2      	b.n	800956a <__gethex+0x324>
 80095a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095a6:	f1c3 0301 	rsb	r3, r3, #1
 80095aa:	9315      	str	r3, [sp, #84]	; 0x54
 80095ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0f0      	beq.n	8009594 <__gethex+0x34e>
 80095b2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80095b6:	f105 0314 	add.w	r3, r5, #20
 80095ba:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80095be:	eb03 010a 	add.w	r1, r3, sl
 80095c2:	f04f 0c00 	mov.w	ip, #0
 80095c6:	4618      	mov	r0, r3
 80095c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80095cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80095d0:	d01c      	beq.n	800960c <__gethex+0x3c6>
 80095d2:	3201      	adds	r2, #1
 80095d4:	6002      	str	r2, [r0, #0]
 80095d6:	2f02      	cmp	r7, #2
 80095d8:	f105 0314 	add.w	r3, r5, #20
 80095dc:	d138      	bne.n	8009650 <__gethex+0x40a>
 80095de:	f8d8 2000 	ldr.w	r2, [r8]
 80095e2:	3a01      	subs	r2, #1
 80095e4:	42b2      	cmp	r2, r6
 80095e6:	d10a      	bne.n	80095fe <__gethex+0x3b8>
 80095e8:	1171      	asrs	r1, r6, #5
 80095ea:	2201      	movs	r2, #1
 80095ec:	f006 061f 	and.w	r6, r6, #31
 80095f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80095f4:	fa02 f606 	lsl.w	r6, r2, r6
 80095f8:	421e      	tst	r6, r3
 80095fa:	bf18      	it	ne
 80095fc:	4617      	movne	r7, r2
 80095fe:	f047 0720 	orr.w	r7, r7, #32
 8009602:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009604:	601d      	str	r5, [r3, #0]
 8009606:	9b06      	ldr	r3, [sp, #24]
 8009608:	601c      	str	r4, [r3, #0]
 800960a:	e6a4      	b.n	8009356 <__gethex+0x110>
 800960c:	4299      	cmp	r1, r3
 800960e:	f843 cc04 	str.w	ip, [r3, #-4]
 8009612:	d8d8      	bhi.n	80095c6 <__gethex+0x380>
 8009614:	68ab      	ldr	r3, [r5, #8]
 8009616:	4599      	cmp	r9, r3
 8009618:	db12      	blt.n	8009640 <__gethex+0x3fa>
 800961a:	6869      	ldr	r1, [r5, #4]
 800961c:	9802      	ldr	r0, [sp, #8]
 800961e:	3101      	adds	r1, #1
 8009620:	f000 f921 	bl	8009866 <_Balloc>
 8009624:	692a      	ldr	r2, [r5, #16]
 8009626:	3202      	adds	r2, #2
 8009628:	f105 010c 	add.w	r1, r5, #12
 800962c:	4683      	mov	fp, r0
 800962e:	0092      	lsls	r2, r2, #2
 8009630:	300c      	adds	r0, #12
 8009632:	f000 f90d 	bl	8009850 <memcpy>
 8009636:	4629      	mov	r1, r5
 8009638:	9802      	ldr	r0, [sp, #8]
 800963a:	f000 f948 	bl	80098ce <_Bfree>
 800963e:	465d      	mov	r5, fp
 8009640:	692b      	ldr	r3, [r5, #16]
 8009642:	1c5a      	adds	r2, r3, #1
 8009644:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009648:	612a      	str	r2, [r5, #16]
 800964a:	2201      	movs	r2, #1
 800964c:	615a      	str	r2, [r3, #20]
 800964e:	e7c2      	b.n	80095d6 <__gethex+0x390>
 8009650:	692a      	ldr	r2, [r5, #16]
 8009652:	454a      	cmp	r2, r9
 8009654:	dd0b      	ble.n	800966e <__gethex+0x428>
 8009656:	2101      	movs	r1, #1
 8009658:	4628      	mov	r0, r5
 800965a:	f7ff fda5 	bl	80091a8 <rshift>
 800965e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009662:	3401      	adds	r4, #1
 8009664:	42a3      	cmp	r3, r4
 8009666:	f6ff aed9 	blt.w	800941c <__gethex+0x1d6>
 800966a:	2701      	movs	r7, #1
 800966c:	e7c7      	b.n	80095fe <__gethex+0x3b8>
 800966e:	f016 061f 	ands.w	r6, r6, #31
 8009672:	d0fa      	beq.n	800966a <__gethex+0x424>
 8009674:	449a      	add	sl, r3
 8009676:	f1c6 0620 	rsb	r6, r6, #32
 800967a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800967e:	f000 f9b6 	bl	80099ee <__hi0bits>
 8009682:	42b0      	cmp	r0, r6
 8009684:	dbe7      	blt.n	8009656 <__gethex+0x410>
 8009686:	e7f0      	b.n	800966a <__gethex+0x424>

08009688 <L_shift>:
 8009688:	f1c2 0208 	rsb	r2, r2, #8
 800968c:	0092      	lsls	r2, r2, #2
 800968e:	b570      	push	{r4, r5, r6, lr}
 8009690:	f1c2 0620 	rsb	r6, r2, #32
 8009694:	6843      	ldr	r3, [r0, #4]
 8009696:	6804      	ldr	r4, [r0, #0]
 8009698:	fa03 f506 	lsl.w	r5, r3, r6
 800969c:	432c      	orrs	r4, r5
 800969e:	40d3      	lsrs	r3, r2
 80096a0:	6004      	str	r4, [r0, #0]
 80096a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80096a6:	4288      	cmp	r0, r1
 80096a8:	d3f4      	bcc.n	8009694 <L_shift+0xc>
 80096aa:	bd70      	pop	{r4, r5, r6, pc}

080096ac <__match>:
 80096ac:	b530      	push	{r4, r5, lr}
 80096ae:	6803      	ldr	r3, [r0, #0]
 80096b0:	3301      	adds	r3, #1
 80096b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096b6:	b914      	cbnz	r4, 80096be <__match+0x12>
 80096b8:	6003      	str	r3, [r0, #0]
 80096ba:	2001      	movs	r0, #1
 80096bc:	bd30      	pop	{r4, r5, pc}
 80096be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80096c6:	2d19      	cmp	r5, #25
 80096c8:	bf98      	it	ls
 80096ca:	3220      	addls	r2, #32
 80096cc:	42a2      	cmp	r2, r4
 80096ce:	d0f0      	beq.n	80096b2 <__match+0x6>
 80096d0:	2000      	movs	r0, #0
 80096d2:	e7f3      	b.n	80096bc <__match+0x10>

080096d4 <__hexnan>:
 80096d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d8:	680b      	ldr	r3, [r1, #0]
 80096da:	6801      	ldr	r1, [r0, #0]
 80096dc:	115f      	asrs	r7, r3, #5
 80096de:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80096e2:	f013 031f 	ands.w	r3, r3, #31
 80096e6:	b087      	sub	sp, #28
 80096e8:	bf18      	it	ne
 80096ea:	3704      	addne	r7, #4
 80096ec:	2500      	movs	r5, #0
 80096ee:	1f3e      	subs	r6, r7, #4
 80096f0:	4682      	mov	sl, r0
 80096f2:	4690      	mov	r8, r2
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	f847 5c04 	str.w	r5, [r7, #-4]
 80096fa:	46b1      	mov	r9, r6
 80096fc:	4634      	mov	r4, r6
 80096fe:	9502      	str	r5, [sp, #8]
 8009700:	46ab      	mov	fp, r5
 8009702:	784a      	ldrb	r2, [r1, #1]
 8009704:	1c4b      	adds	r3, r1, #1
 8009706:	9303      	str	r3, [sp, #12]
 8009708:	b342      	cbz	r2, 800975c <__hexnan+0x88>
 800970a:	4610      	mov	r0, r2
 800970c:	9105      	str	r1, [sp, #20]
 800970e:	9204      	str	r2, [sp, #16]
 8009710:	f7ff fd84 	bl	800921c <__hexdig_fun>
 8009714:	2800      	cmp	r0, #0
 8009716:	d143      	bne.n	80097a0 <__hexnan+0xcc>
 8009718:	9a04      	ldr	r2, [sp, #16]
 800971a:	9905      	ldr	r1, [sp, #20]
 800971c:	2a20      	cmp	r2, #32
 800971e:	d818      	bhi.n	8009752 <__hexnan+0x7e>
 8009720:	9b02      	ldr	r3, [sp, #8]
 8009722:	459b      	cmp	fp, r3
 8009724:	dd13      	ble.n	800974e <__hexnan+0x7a>
 8009726:	454c      	cmp	r4, r9
 8009728:	d206      	bcs.n	8009738 <__hexnan+0x64>
 800972a:	2d07      	cmp	r5, #7
 800972c:	dc04      	bgt.n	8009738 <__hexnan+0x64>
 800972e:	462a      	mov	r2, r5
 8009730:	4649      	mov	r1, r9
 8009732:	4620      	mov	r0, r4
 8009734:	f7ff ffa8 	bl	8009688 <L_shift>
 8009738:	4544      	cmp	r4, r8
 800973a:	d944      	bls.n	80097c6 <__hexnan+0xf2>
 800973c:	2300      	movs	r3, #0
 800973e:	f1a4 0904 	sub.w	r9, r4, #4
 8009742:	f844 3c04 	str.w	r3, [r4, #-4]
 8009746:	f8cd b008 	str.w	fp, [sp, #8]
 800974a:	464c      	mov	r4, r9
 800974c:	461d      	mov	r5, r3
 800974e:	9903      	ldr	r1, [sp, #12]
 8009750:	e7d7      	b.n	8009702 <__hexnan+0x2e>
 8009752:	2a29      	cmp	r2, #41	; 0x29
 8009754:	d14a      	bne.n	80097ec <__hexnan+0x118>
 8009756:	3102      	adds	r1, #2
 8009758:	f8ca 1000 	str.w	r1, [sl]
 800975c:	f1bb 0f00 	cmp.w	fp, #0
 8009760:	d044      	beq.n	80097ec <__hexnan+0x118>
 8009762:	454c      	cmp	r4, r9
 8009764:	d206      	bcs.n	8009774 <__hexnan+0xa0>
 8009766:	2d07      	cmp	r5, #7
 8009768:	dc04      	bgt.n	8009774 <__hexnan+0xa0>
 800976a:	462a      	mov	r2, r5
 800976c:	4649      	mov	r1, r9
 800976e:	4620      	mov	r0, r4
 8009770:	f7ff ff8a 	bl	8009688 <L_shift>
 8009774:	4544      	cmp	r4, r8
 8009776:	d928      	bls.n	80097ca <__hexnan+0xf6>
 8009778:	4643      	mov	r3, r8
 800977a:	f854 2b04 	ldr.w	r2, [r4], #4
 800977e:	f843 2b04 	str.w	r2, [r3], #4
 8009782:	42a6      	cmp	r6, r4
 8009784:	d2f9      	bcs.n	800977a <__hexnan+0xa6>
 8009786:	2200      	movs	r2, #0
 8009788:	f843 2b04 	str.w	r2, [r3], #4
 800978c:	429e      	cmp	r6, r3
 800978e:	d2fb      	bcs.n	8009788 <__hexnan+0xb4>
 8009790:	6833      	ldr	r3, [r6, #0]
 8009792:	b91b      	cbnz	r3, 800979c <__hexnan+0xc8>
 8009794:	4546      	cmp	r6, r8
 8009796:	d127      	bne.n	80097e8 <__hexnan+0x114>
 8009798:	2301      	movs	r3, #1
 800979a:	6033      	str	r3, [r6, #0]
 800979c:	2005      	movs	r0, #5
 800979e:	e026      	b.n	80097ee <__hexnan+0x11a>
 80097a0:	3501      	adds	r5, #1
 80097a2:	2d08      	cmp	r5, #8
 80097a4:	f10b 0b01 	add.w	fp, fp, #1
 80097a8:	dd06      	ble.n	80097b8 <__hexnan+0xe4>
 80097aa:	4544      	cmp	r4, r8
 80097ac:	d9cf      	bls.n	800974e <__hexnan+0x7a>
 80097ae:	2300      	movs	r3, #0
 80097b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80097b4:	2501      	movs	r5, #1
 80097b6:	3c04      	subs	r4, #4
 80097b8:	6822      	ldr	r2, [r4, #0]
 80097ba:	f000 000f 	and.w	r0, r0, #15
 80097be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80097c2:	6020      	str	r0, [r4, #0]
 80097c4:	e7c3      	b.n	800974e <__hexnan+0x7a>
 80097c6:	2508      	movs	r5, #8
 80097c8:	e7c1      	b.n	800974e <__hexnan+0x7a>
 80097ca:	9b01      	ldr	r3, [sp, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d0df      	beq.n	8009790 <__hexnan+0xbc>
 80097d0:	f04f 32ff 	mov.w	r2, #4294967295
 80097d4:	f1c3 0320 	rsb	r3, r3, #32
 80097d8:	fa22 f303 	lsr.w	r3, r2, r3
 80097dc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80097e0:	401a      	ands	r2, r3
 80097e2:	f847 2c04 	str.w	r2, [r7, #-4]
 80097e6:	e7d3      	b.n	8009790 <__hexnan+0xbc>
 80097e8:	3e04      	subs	r6, #4
 80097ea:	e7d1      	b.n	8009790 <__hexnan+0xbc>
 80097ec:	2004      	movs	r0, #4
 80097ee:	b007      	add	sp, #28
 80097f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080097f4 <__locale_ctype_ptr_l>:
 80097f4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80097f8:	4770      	bx	lr

080097fa <__localeconv_l>:
 80097fa:	30f0      	adds	r0, #240	; 0xf0
 80097fc:	4770      	bx	lr
	...

08009800 <_localeconv_r>:
 8009800:	4b04      	ldr	r3, [pc, #16]	; (8009814 <_localeconv_r+0x14>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6a18      	ldr	r0, [r3, #32]
 8009806:	4b04      	ldr	r3, [pc, #16]	; (8009818 <_localeconv_r+0x18>)
 8009808:	2800      	cmp	r0, #0
 800980a:	bf08      	it	eq
 800980c:	4618      	moveq	r0, r3
 800980e:	30f0      	adds	r0, #240	; 0xf0
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	20000060 	.word	0x20000060
 8009818:	200000c4 	.word	0x200000c4

0800981c <malloc>:
 800981c:	4b02      	ldr	r3, [pc, #8]	; (8009828 <malloc+0xc>)
 800981e:	4601      	mov	r1, r0
 8009820:	6818      	ldr	r0, [r3, #0]
 8009822:	f000 bc7b 	b.w	800a11c <_malloc_r>
 8009826:	bf00      	nop
 8009828:	20000060 	.word	0x20000060

0800982c <__ascii_mbtowc>:
 800982c:	b082      	sub	sp, #8
 800982e:	b901      	cbnz	r1, 8009832 <__ascii_mbtowc+0x6>
 8009830:	a901      	add	r1, sp, #4
 8009832:	b142      	cbz	r2, 8009846 <__ascii_mbtowc+0x1a>
 8009834:	b14b      	cbz	r3, 800984a <__ascii_mbtowc+0x1e>
 8009836:	7813      	ldrb	r3, [r2, #0]
 8009838:	600b      	str	r3, [r1, #0]
 800983a:	7812      	ldrb	r2, [r2, #0]
 800983c:	1c10      	adds	r0, r2, #0
 800983e:	bf18      	it	ne
 8009840:	2001      	movne	r0, #1
 8009842:	b002      	add	sp, #8
 8009844:	4770      	bx	lr
 8009846:	4610      	mov	r0, r2
 8009848:	e7fb      	b.n	8009842 <__ascii_mbtowc+0x16>
 800984a:	f06f 0001 	mvn.w	r0, #1
 800984e:	e7f8      	b.n	8009842 <__ascii_mbtowc+0x16>

08009850 <memcpy>:
 8009850:	b510      	push	{r4, lr}
 8009852:	1e43      	subs	r3, r0, #1
 8009854:	440a      	add	r2, r1
 8009856:	4291      	cmp	r1, r2
 8009858:	d100      	bne.n	800985c <memcpy+0xc>
 800985a:	bd10      	pop	{r4, pc}
 800985c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009860:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009864:	e7f7      	b.n	8009856 <memcpy+0x6>

08009866 <_Balloc>:
 8009866:	b570      	push	{r4, r5, r6, lr}
 8009868:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800986a:	4604      	mov	r4, r0
 800986c:	460e      	mov	r6, r1
 800986e:	b93d      	cbnz	r5, 8009880 <_Balloc+0x1a>
 8009870:	2010      	movs	r0, #16
 8009872:	f7ff ffd3 	bl	800981c <malloc>
 8009876:	6260      	str	r0, [r4, #36]	; 0x24
 8009878:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800987c:	6005      	str	r5, [r0, #0]
 800987e:	60c5      	str	r5, [r0, #12]
 8009880:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009882:	68eb      	ldr	r3, [r5, #12]
 8009884:	b183      	cbz	r3, 80098a8 <_Balloc+0x42>
 8009886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800988e:	b9b8      	cbnz	r0, 80098c0 <_Balloc+0x5a>
 8009890:	2101      	movs	r1, #1
 8009892:	fa01 f506 	lsl.w	r5, r1, r6
 8009896:	1d6a      	adds	r2, r5, #5
 8009898:	0092      	lsls	r2, r2, #2
 800989a:	4620      	mov	r0, r4
 800989c:	f000 fbe1 	bl	800a062 <_calloc_r>
 80098a0:	b160      	cbz	r0, 80098bc <_Balloc+0x56>
 80098a2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80098a6:	e00e      	b.n	80098c6 <_Balloc+0x60>
 80098a8:	2221      	movs	r2, #33	; 0x21
 80098aa:	2104      	movs	r1, #4
 80098ac:	4620      	mov	r0, r4
 80098ae:	f000 fbd8 	bl	800a062 <_calloc_r>
 80098b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098b4:	60e8      	str	r0, [r5, #12]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1e4      	bne.n	8009886 <_Balloc+0x20>
 80098bc:	2000      	movs	r0, #0
 80098be:	bd70      	pop	{r4, r5, r6, pc}
 80098c0:	6802      	ldr	r2, [r0, #0]
 80098c2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80098c6:	2300      	movs	r3, #0
 80098c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098cc:	e7f7      	b.n	80098be <_Balloc+0x58>

080098ce <_Bfree>:
 80098ce:	b570      	push	{r4, r5, r6, lr}
 80098d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80098d2:	4606      	mov	r6, r0
 80098d4:	460d      	mov	r5, r1
 80098d6:	b93c      	cbnz	r4, 80098e8 <_Bfree+0x1a>
 80098d8:	2010      	movs	r0, #16
 80098da:	f7ff ff9f 	bl	800981c <malloc>
 80098de:	6270      	str	r0, [r6, #36]	; 0x24
 80098e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098e4:	6004      	str	r4, [r0, #0]
 80098e6:	60c4      	str	r4, [r0, #12]
 80098e8:	b13d      	cbz	r5, 80098fa <_Bfree+0x2c>
 80098ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80098ec:	686a      	ldr	r2, [r5, #4]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098f4:	6029      	str	r1, [r5, #0]
 80098f6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80098fa:	bd70      	pop	{r4, r5, r6, pc}

080098fc <__multadd>:
 80098fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009900:	690d      	ldr	r5, [r1, #16]
 8009902:	461f      	mov	r7, r3
 8009904:	4606      	mov	r6, r0
 8009906:	460c      	mov	r4, r1
 8009908:	f101 0c14 	add.w	ip, r1, #20
 800990c:	2300      	movs	r3, #0
 800990e:	f8dc 0000 	ldr.w	r0, [ip]
 8009912:	b281      	uxth	r1, r0
 8009914:	fb02 7101 	mla	r1, r2, r1, r7
 8009918:	0c0f      	lsrs	r7, r1, #16
 800991a:	0c00      	lsrs	r0, r0, #16
 800991c:	fb02 7000 	mla	r0, r2, r0, r7
 8009920:	b289      	uxth	r1, r1
 8009922:	3301      	adds	r3, #1
 8009924:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009928:	429d      	cmp	r5, r3
 800992a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800992e:	f84c 1b04 	str.w	r1, [ip], #4
 8009932:	dcec      	bgt.n	800990e <__multadd+0x12>
 8009934:	b1d7      	cbz	r7, 800996c <__multadd+0x70>
 8009936:	68a3      	ldr	r3, [r4, #8]
 8009938:	42ab      	cmp	r3, r5
 800993a:	dc12      	bgt.n	8009962 <__multadd+0x66>
 800993c:	6861      	ldr	r1, [r4, #4]
 800993e:	4630      	mov	r0, r6
 8009940:	3101      	adds	r1, #1
 8009942:	f7ff ff90 	bl	8009866 <_Balloc>
 8009946:	6922      	ldr	r2, [r4, #16]
 8009948:	3202      	adds	r2, #2
 800994a:	f104 010c 	add.w	r1, r4, #12
 800994e:	4680      	mov	r8, r0
 8009950:	0092      	lsls	r2, r2, #2
 8009952:	300c      	adds	r0, #12
 8009954:	f7ff ff7c 	bl	8009850 <memcpy>
 8009958:	4621      	mov	r1, r4
 800995a:	4630      	mov	r0, r6
 800995c:	f7ff ffb7 	bl	80098ce <_Bfree>
 8009960:	4644      	mov	r4, r8
 8009962:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009966:	3501      	adds	r5, #1
 8009968:	615f      	str	r7, [r3, #20]
 800996a:	6125      	str	r5, [r4, #16]
 800996c:	4620      	mov	r0, r4
 800996e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009972 <__s2b>:
 8009972:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009976:	460c      	mov	r4, r1
 8009978:	4615      	mov	r5, r2
 800997a:	461f      	mov	r7, r3
 800997c:	2209      	movs	r2, #9
 800997e:	3308      	adds	r3, #8
 8009980:	4606      	mov	r6, r0
 8009982:	fb93 f3f2 	sdiv	r3, r3, r2
 8009986:	2100      	movs	r1, #0
 8009988:	2201      	movs	r2, #1
 800998a:	429a      	cmp	r2, r3
 800998c:	db20      	blt.n	80099d0 <__s2b+0x5e>
 800998e:	4630      	mov	r0, r6
 8009990:	f7ff ff69 	bl	8009866 <_Balloc>
 8009994:	9b08      	ldr	r3, [sp, #32]
 8009996:	6143      	str	r3, [r0, #20]
 8009998:	2d09      	cmp	r5, #9
 800999a:	f04f 0301 	mov.w	r3, #1
 800999e:	6103      	str	r3, [r0, #16]
 80099a0:	dd19      	ble.n	80099d6 <__s2b+0x64>
 80099a2:	f104 0809 	add.w	r8, r4, #9
 80099a6:	46c1      	mov	r9, r8
 80099a8:	442c      	add	r4, r5
 80099aa:	f819 3b01 	ldrb.w	r3, [r9], #1
 80099ae:	4601      	mov	r1, r0
 80099b0:	3b30      	subs	r3, #48	; 0x30
 80099b2:	220a      	movs	r2, #10
 80099b4:	4630      	mov	r0, r6
 80099b6:	f7ff ffa1 	bl	80098fc <__multadd>
 80099ba:	45a1      	cmp	r9, r4
 80099bc:	d1f5      	bne.n	80099aa <__s2b+0x38>
 80099be:	eb08 0405 	add.w	r4, r8, r5
 80099c2:	3c08      	subs	r4, #8
 80099c4:	1b2d      	subs	r5, r5, r4
 80099c6:	1963      	adds	r3, r4, r5
 80099c8:	42bb      	cmp	r3, r7
 80099ca:	db07      	blt.n	80099dc <__s2b+0x6a>
 80099cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099d0:	0052      	lsls	r2, r2, #1
 80099d2:	3101      	adds	r1, #1
 80099d4:	e7d9      	b.n	800998a <__s2b+0x18>
 80099d6:	340a      	adds	r4, #10
 80099d8:	2509      	movs	r5, #9
 80099da:	e7f3      	b.n	80099c4 <__s2b+0x52>
 80099dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80099e0:	4601      	mov	r1, r0
 80099e2:	3b30      	subs	r3, #48	; 0x30
 80099e4:	220a      	movs	r2, #10
 80099e6:	4630      	mov	r0, r6
 80099e8:	f7ff ff88 	bl	80098fc <__multadd>
 80099ec:	e7eb      	b.n	80099c6 <__s2b+0x54>

080099ee <__hi0bits>:
 80099ee:	0c02      	lsrs	r2, r0, #16
 80099f0:	0412      	lsls	r2, r2, #16
 80099f2:	4603      	mov	r3, r0
 80099f4:	b9b2      	cbnz	r2, 8009a24 <__hi0bits+0x36>
 80099f6:	0403      	lsls	r3, r0, #16
 80099f8:	2010      	movs	r0, #16
 80099fa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80099fe:	bf04      	itt	eq
 8009a00:	021b      	lsleq	r3, r3, #8
 8009a02:	3008      	addeq	r0, #8
 8009a04:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009a08:	bf04      	itt	eq
 8009a0a:	011b      	lsleq	r3, r3, #4
 8009a0c:	3004      	addeq	r0, #4
 8009a0e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009a12:	bf04      	itt	eq
 8009a14:	009b      	lsleq	r3, r3, #2
 8009a16:	3002      	addeq	r0, #2
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	db06      	blt.n	8009a2a <__hi0bits+0x3c>
 8009a1c:	005b      	lsls	r3, r3, #1
 8009a1e:	d503      	bpl.n	8009a28 <__hi0bits+0x3a>
 8009a20:	3001      	adds	r0, #1
 8009a22:	4770      	bx	lr
 8009a24:	2000      	movs	r0, #0
 8009a26:	e7e8      	b.n	80099fa <__hi0bits+0xc>
 8009a28:	2020      	movs	r0, #32
 8009a2a:	4770      	bx	lr

08009a2c <__lo0bits>:
 8009a2c:	6803      	ldr	r3, [r0, #0]
 8009a2e:	f013 0207 	ands.w	r2, r3, #7
 8009a32:	4601      	mov	r1, r0
 8009a34:	d00b      	beq.n	8009a4e <__lo0bits+0x22>
 8009a36:	07da      	lsls	r2, r3, #31
 8009a38:	d423      	bmi.n	8009a82 <__lo0bits+0x56>
 8009a3a:	0798      	lsls	r0, r3, #30
 8009a3c:	bf49      	itett	mi
 8009a3e:	085b      	lsrmi	r3, r3, #1
 8009a40:	089b      	lsrpl	r3, r3, #2
 8009a42:	2001      	movmi	r0, #1
 8009a44:	600b      	strmi	r3, [r1, #0]
 8009a46:	bf5c      	itt	pl
 8009a48:	600b      	strpl	r3, [r1, #0]
 8009a4a:	2002      	movpl	r0, #2
 8009a4c:	4770      	bx	lr
 8009a4e:	b298      	uxth	r0, r3
 8009a50:	b9a8      	cbnz	r0, 8009a7e <__lo0bits+0x52>
 8009a52:	0c1b      	lsrs	r3, r3, #16
 8009a54:	2010      	movs	r0, #16
 8009a56:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009a5a:	bf04      	itt	eq
 8009a5c:	0a1b      	lsreq	r3, r3, #8
 8009a5e:	3008      	addeq	r0, #8
 8009a60:	071a      	lsls	r2, r3, #28
 8009a62:	bf04      	itt	eq
 8009a64:	091b      	lsreq	r3, r3, #4
 8009a66:	3004      	addeq	r0, #4
 8009a68:	079a      	lsls	r2, r3, #30
 8009a6a:	bf04      	itt	eq
 8009a6c:	089b      	lsreq	r3, r3, #2
 8009a6e:	3002      	addeq	r0, #2
 8009a70:	07da      	lsls	r2, r3, #31
 8009a72:	d402      	bmi.n	8009a7a <__lo0bits+0x4e>
 8009a74:	085b      	lsrs	r3, r3, #1
 8009a76:	d006      	beq.n	8009a86 <__lo0bits+0x5a>
 8009a78:	3001      	adds	r0, #1
 8009a7a:	600b      	str	r3, [r1, #0]
 8009a7c:	4770      	bx	lr
 8009a7e:	4610      	mov	r0, r2
 8009a80:	e7e9      	b.n	8009a56 <__lo0bits+0x2a>
 8009a82:	2000      	movs	r0, #0
 8009a84:	4770      	bx	lr
 8009a86:	2020      	movs	r0, #32
 8009a88:	4770      	bx	lr

08009a8a <__i2b>:
 8009a8a:	b510      	push	{r4, lr}
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	2101      	movs	r1, #1
 8009a90:	f7ff fee9 	bl	8009866 <_Balloc>
 8009a94:	2201      	movs	r2, #1
 8009a96:	6144      	str	r4, [r0, #20]
 8009a98:	6102      	str	r2, [r0, #16]
 8009a9a:	bd10      	pop	{r4, pc}

08009a9c <__multiply>:
 8009a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa0:	4614      	mov	r4, r2
 8009aa2:	690a      	ldr	r2, [r1, #16]
 8009aa4:	6923      	ldr	r3, [r4, #16]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	bfb8      	it	lt
 8009aaa:	460b      	movlt	r3, r1
 8009aac:	4688      	mov	r8, r1
 8009aae:	bfbc      	itt	lt
 8009ab0:	46a0      	movlt	r8, r4
 8009ab2:	461c      	movlt	r4, r3
 8009ab4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009ab8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009abc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ac0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ac4:	eb07 0609 	add.w	r6, r7, r9
 8009ac8:	42b3      	cmp	r3, r6
 8009aca:	bfb8      	it	lt
 8009acc:	3101      	addlt	r1, #1
 8009ace:	f7ff feca 	bl	8009866 <_Balloc>
 8009ad2:	f100 0514 	add.w	r5, r0, #20
 8009ad6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009ada:	462b      	mov	r3, r5
 8009adc:	2200      	movs	r2, #0
 8009ade:	4573      	cmp	r3, lr
 8009ae0:	d316      	bcc.n	8009b10 <__multiply+0x74>
 8009ae2:	f104 0214 	add.w	r2, r4, #20
 8009ae6:	f108 0114 	add.w	r1, r8, #20
 8009aea:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009aee:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	9b00      	ldr	r3, [sp, #0]
 8009af6:	9201      	str	r2, [sp, #4]
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d80c      	bhi.n	8009b16 <__multiply+0x7a>
 8009afc:	2e00      	cmp	r6, #0
 8009afe:	dd03      	ble.n	8009b08 <__multiply+0x6c>
 8009b00:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d05d      	beq.n	8009bc4 <__multiply+0x128>
 8009b08:	6106      	str	r6, [r0, #16]
 8009b0a:	b003      	add	sp, #12
 8009b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b10:	f843 2b04 	str.w	r2, [r3], #4
 8009b14:	e7e3      	b.n	8009ade <__multiply+0x42>
 8009b16:	f8b2 b000 	ldrh.w	fp, [r2]
 8009b1a:	f1bb 0f00 	cmp.w	fp, #0
 8009b1e:	d023      	beq.n	8009b68 <__multiply+0xcc>
 8009b20:	4689      	mov	r9, r1
 8009b22:	46ac      	mov	ip, r5
 8009b24:	f04f 0800 	mov.w	r8, #0
 8009b28:	f859 4b04 	ldr.w	r4, [r9], #4
 8009b2c:	f8dc a000 	ldr.w	sl, [ip]
 8009b30:	b2a3      	uxth	r3, r4
 8009b32:	fa1f fa8a 	uxth.w	sl, sl
 8009b36:	fb0b a303 	mla	r3, fp, r3, sl
 8009b3a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b3e:	f8dc 4000 	ldr.w	r4, [ip]
 8009b42:	4443      	add	r3, r8
 8009b44:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009b48:	fb0b 840a 	mla	r4, fp, sl, r8
 8009b4c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009b50:	46e2      	mov	sl, ip
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009b58:	454f      	cmp	r7, r9
 8009b5a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009b5e:	f84a 3b04 	str.w	r3, [sl], #4
 8009b62:	d82b      	bhi.n	8009bbc <__multiply+0x120>
 8009b64:	f8cc 8004 	str.w	r8, [ip, #4]
 8009b68:	9b01      	ldr	r3, [sp, #4]
 8009b6a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009b6e:	3204      	adds	r2, #4
 8009b70:	f1ba 0f00 	cmp.w	sl, #0
 8009b74:	d020      	beq.n	8009bb8 <__multiply+0x11c>
 8009b76:	682b      	ldr	r3, [r5, #0]
 8009b78:	4689      	mov	r9, r1
 8009b7a:	46a8      	mov	r8, r5
 8009b7c:	f04f 0b00 	mov.w	fp, #0
 8009b80:	f8b9 c000 	ldrh.w	ip, [r9]
 8009b84:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009b88:	fb0a 440c 	mla	r4, sl, ip, r4
 8009b8c:	445c      	add	r4, fp
 8009b8e:	46c4      	mov	ip, r8
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009b96:	f84c 3b04 	str.w	r3, [ip], #4
 8009b9a:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b9e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009ba2:	0c1b      	lsrs	r3, r3, #16
 8009ba4:	fb0a b303 	mla	r3, sl, r3, fp
 8009ba8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009bac:	454f      	cmp	r7, r9
 8009bae:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009bb2:	d805      	bhi.n	8009bc0 <__multiply+0x124>
 8009bb4:	f8c8 3004 	str.w	r3, [r8, #4]
 8009bb8:	3504      	adds	r5, #4
 8009bba:	e79b      	b.n	8009af4 <__multiply+0x58>
 8009bbc:	46d4      	mov	ip, sl
 8009bbe:	e7b3      	b.n	8009b28 <__multiply+0x8c>
 8009bc0:	46e0      	mov	r8, ip
 8009bc2:	e7dd      	b.n	8009b80 <__multiply+0xe4>
 8009bc4:	3e01      	subs	r6, #1
 8009bc6:	e799      	b.n	8009afc <__multiply+0x60>

08009bc8 <__pow5mult>:
 8009bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bcc:	4615      	mov	r5, r2
 8009bce:	f012 0203 	ands.w	r2, r2, #3
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	460f      	mov	r7, r1
 8009bd6:	d007      	beq.n	8009be8 <__pow5mult+0x20>
 8009bd8:	3a01      	subs	r2, #1
 8009bda:	4c21      	ldr	r4, [pc, #132]	; (8009c60 <__pow5mult+0x98>)
 8009bdc:	2300      	movs	r3, #0
 8009bde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009be2:	f7ff fe8b 	bl	80098fc <__multadd>
 8009be6:	4607      	mov	r7, r0
 8009be8:	10ad      	asrs	r5, r5, #2
 8009bea:	d035      	beq.n	8009c58 <__pow5mult+0x90>
 8009bec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009bee:	b93c      	cbnz	r4, 8009c00 <__pow5mult+0x38>
 8009bf0:	2010      	movs	r0, #16
 8009bf2:	f7ff fe13 	bl	800981c <malloc>
 8009bf6:	6270      	str	r0, [r6, #36]	; 0x24
 8009bf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bfc:	6004      	str	r4, [r0, #0]
 8009bfe:	60c4      	str	r4, [r0, #12]
 8009c00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c08:	b94c      	cbnz	r4, 8009c1e <__pow5mult+0x56>
 8009c0a:	f240 2171 	movw	r1, #625	; 0x271
 8009c0e:	4630      	mov	r0, r6
 8009c10:	f7ff ff3b 	bl	8009a8a <__i2b>
 8009c14:	2300      	movs	r3, #0
 8009c16:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	6003      	str	r3, [r0, #0]
 8009c1e:	f04f 0800 	mov.w	r8, #0
 8009c22:	07eb      	lsls	r3, r5, #31
 8009c24:	d50a      	bpl.n	8009c3c <__pow5mult+0x74>
 8009c26:	4639      	mov	r1, r7
 8009c28:	4622      	mov	r2, r4
 8009c2a:	4630      	mov	r0, r6
 8009c2c:	f7ff ff36 	bl	8009a9c <__multiply>
 8009c30:	4639      	mov	r1, r7
 8009c32:	4681      	mov	r9, r0
 8009c34:	4630      	mov	r0, r6
 8009c36:	f7ff fe4a 	bl	80098ce <_Bfree>
 8009c3a:	464f      	mov	r7, r9
 8009c3c:	106d      	asrs	r5, r5, #1
 8009c3e:	d00b      	beq.n	8009c58 <__pow5mult+0x90>
 8009c40:	6820      	ldr	r0, [r4, #0]
 8009c42:	b938      	cbnz	r0, 8009c54 <__pow5mult+0x8c>
 8009c44:	4622      	mov	r2, r4
 8009c46:	4621      	mov	r1, r4
 8009c48:	4630      	mov	r0, r6
 8009c4a:	f7ff ff27 	bl	8009a9c <__multiply>
 8009c4e:	6020      	str	r0, [r4, #0]
 8009c50:	f8c0 8000 	str.w	r8, [r0]
 8009c54:	4604      	mov	r4, r0
 8009c56:	e7e4      	b.n	8009c22 <__pow5mult+0x5a>
 8009c58:	4638      	mov	r0, r7
 8009c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c5e:	bf00      	nop
 8009c60:	0800c210 	.word	0x0800c210

08009c64 <__lshift>:
 8009c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c68:	460c      	mov	r4, r1
 8009c6a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c6e:	6923      	ldr	r3, [r4, #16]
 8009c70:	6849      	ldr	r1, [r1, #4]
 8009c72:	eb0a 0903 	add.w	r9, sl, r3
 8009c76:	68a3      	ldr	r3, [r4, #8]
 8009c78:	4607      	mov	r7, r0
 8009c7a:	4616      	mov	r6, r2
 8009c7c:	f109 0501 	add.w	r5, r9, #1
 8009c80:	42ab      	cmp	r3, r5
 8009c82:	db32      	blt.n	8009cea <__lshift+0x86>
 8009c84:	4638      	mov	r0, r7
 8009c86:	f7ff fdee 	bl	8009866 <_Balloc>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	4680      	mov	r8, r0
 8009c8e:	f100 0114 	add.w	r1, r0, #20
 8009c92:	461a      	mov	r2, r3
 8009c94:	4553      	cmp	r3, sl
 8009c96:	db2b      	blt.n	8009cf0 <__lshift+0x8c>
 8009c98:	6920      	ldr	r0, [r4, #16]
 8009c9a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c9e:	f104 0314 	add.w	r3, r4, #20
 8009ca2:	f016 021f 	ands.w	r2, r6, #31
 8009ca6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009caa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009cae:	d025      	beq.n	8009cfc <__lshift+0x98>
 8009cb0:	f1c2 0e20 	rsb	lr, r2, #32
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	681e      	ldr	r6, [r3, #0]
 8009cb8:	468a      	mov	sl, r1
 8009cba:	4096      	lsls	r6, r2
 8009cbc:	4330      	orrs	r0, r6
 8009cbe:	f84a 0b04 	str.w	r0, [sl], #4
 8009cc2:	f853 0b04 	ldr.w	r0, [r3], #4
 8009cc6:	459c      	cmp	ip, r3
 8009cc8:	fa20 f00e 	lsr.w	r0, r0, lr
 8009ccc:	d814      	bhi.n	8009cf8 <__lshift+0x94>
 8009cce:	6048      	str	r0, [r1, #4]
 8009cd0:	b108      	cbz	r0, 8009cd6 <__lshift+0x72>
 8009cd2:	f109 0502 	add.w	r5, r9, #2
 8009cd6:	3d01      	subs	r5, #1
 8009cd8:	4638      	mov	r0, r7
 8009cda:	f8c8 5010 	str.w	r5, [r8, #16]
 8009cde:	4621      	mov	r1, r4
 8009ce0:	f7ff fdf5 	bl	80098ce <_Bfree>
 8009ce4:	4640      	mov	r0, r8
 8009ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cea:	3101      	adds	r1, #1
 8009cec:	005b      	lsls	r3, r3, #1
 8009cee:	e7c7      	b.n	8009c80 <__lshift+0x1c>
 8009cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	e7cd      	b.n	8009c94 <__lshift+0x30>
 8009cf8:	4651      	mov	r1, sl
 8009cfa:	e7dc      	b.n	8009cb6 <__lshift+0x52>
 8009cfc:	3904      	subs	r1, #4
 8009cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d02:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d06:	459c      	cmp	ip, r3
 8009d08:	d8f9      	bhi.n	8009cfe <__lshift+0x9a>
 8009d0a:	e7e4      	b.n	8009cd6 <__lshift+0x72>

08009d0c <__mcmp>:
 8009d0c:	6903      	ldr	r3, [r0, #16]
 8009d0e:	690a      	ldr	r2, [r1, #16]
 8009d10:	1a9b      	subs	r3, r3, r2
 8009d12:	b530      	push	{r4, r5, lr}
 8009d14:	d10c      	bne.n	8009d30 <__mcmp+0x24>
 8009d16:	0092      	lsls	r2, r2, #2
 8009d18:	3014      	adds	r0, #20
 8009d1a:	3114      	adds	r1, #20
 8009d1c:	1884      	adds	r4, r0, r2
 8009d1e:	4411      	add	r1, r2
 8009d20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d28:	4295      	cmp	r5, r2
 8009d2a:	d003      	beq.n	8009d34 <__mcmp+0x28>
 8009d2c:	d305      	bcc.n	8009d3a <__mcmp+0x2e>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	4618      	mov	r0, r3
 8009d32:	bd30      	pop	{r4, r5, pc}
 8009d34:	42a0      	cmp	r0, r4
 8009d36:	d3f3      	bcc.n	8009d20 <__mcmp+0x14>
 8009d38:	e7fa      	b.n	8009d30 <__mcmp+0x24>
 8009d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d3e:	e7f7      	b.n	8009d30 <__mcmp+0x24>

08009d40 <__mdiff>:
 8009d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d44:	460d      	mov	r5, r1
 8009d46:	4607      	mov	r7, r0
 8009d48:	4611      	mov	r1, r2
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	4614      	mov	r4, r2
 8009d4e:	f7ff ffdd 	bl	8009d0c <__mcmp>
 8009d52:	1e06      	subs	r6, r0, #0
 8009d54:	d108      	bne.n	8009d68 <__mdiff+0x28>
 8009d56:	4631      	mov	r1, r6
 8009d58:	4638      	mov	r0, r7
 8009d5a:	f7ff fd84 	bl	8009866 <_Balloc>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d68:	bfa4      	itt	ge
 8009d6a:	4623      	movge	r3, r4
 8009d6c:	462c      	movge	r4, r5
 8009d6e:	4638      	mov	r0, r7
 8009d70:	6861      	ldr	r1, [r4, #4]
 8009d72:	bfa6      	itte	ge
 8009d74:	461d      	movge	r5, r3
 8009d76:	2600      	movge	r6, #0
 8009d78:	2601      	movlt	r6, #1
 8009d7a:	f7ff fd74 	bl	8009866 <_Balloc>
 8009d7e:	692b      	ldr	r3, [r5, #16]
 8009d80:	60c6      	str	r6, [r0, #12]
 8009d82:	6926      	ldr	r6, [r4, #16]
 8009d84:	f105 0914 	add.w	r9, r5, #20
 8009d88:	f104 0214 	add.w	r2, r4, #20
 8009d8c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009d90:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009d94:	f100 0514 	add.w	r5, r0, #20
 8009d98:	f04f 0e00 	mov.w	lr, #0
 8009d9c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009da0:	f859 4b04 	ldr.w	r4, [r9], #4
 8009da4:	fa1e f18a 	uxtah	r1, lr, sl
 8009da8:	b2a3      	uxth	r3, r4
 8009daa:	1ac9      	subs	r1, r1, r3
 8009dac:	0c23      	lsrs	r3, r4, #16
 8009dae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009db2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009db6:	b289      	uxth	r1, r1
 8009db8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009dbc:	45c8      	cmp	r8, r9
 8009dbe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009dc2:	4694      	mov	ip, r2
 8009dc4:	f845 3b04 	str.w	r3, [r5], #4
 8009dc8:	d8e8      	bhi.n	8009d9c <__mdiff+0x5c>
 8009dca:	45bc      	cmp	ip, r7
 8009dcc:	d304      	bcc.n	8009dd8 <__mdiff+0x98>
 8009dce:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009dd2:	b183      	cbz	r3, 8009df6 <__mdiff+0xb6>
 8009dd4:	6106      	str	r6, [r0, #16]
 8009dd6:	e7c5      	b.n	8009d64 <__mdiff+0x24>
 8009dd8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009ddc:	fa1e f381 	uxtah	r3, lr, r1
 8009de0:	141a      	asrs	r2, r3, #16
 8009de2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009df0:	f845 3b04 	str.w	r3, [r5], #4
 8009df4:	e7e9      	b.n	8009dca <__mdiff+0x8a>
 8009df6:	3e01      	subs	r6, #1
 8009df8:	e7e9      	b.n	8009dce <__mdiff+0x8e>
	...

08009dfc <__ulp>:
 8009dfc:	4b12      	ldr	r3, [pc, #72]	; (8009e48 <__ulp+0x4c>)
 8009dfe:	ee10 2a90 	vmov	r2, s1
 8009e02:	401a      	ands	r2, r3
 8009e04:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	dd04      	ble.n	8009e16 <__ulp+0x1a>
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	4619      	mov	r1, r3
 8009e10:	ec41 0b10 	vmov	d0, r0, r1
 8009e14:	4770      	bx	lr
 8009e16:	425b      	negs	r3, r3
 8009e18:	151b      	asrs	r3, r3, #20
 8009e1a:	2b13      	cmp	r3, #19
 8009e1c:	f04f 0000 	mov.w	r0, #0
 8009e20:	f04f 0100 	mov.w	r1, #0
 8009e24:	dc04      	bgt.n	8009e30 <__ulp+0x34>
 8009e26:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009e2a:	fa42 f103 	asr.w	r1, r2, r3
 8009e2e:	e7ef      	b.n	8009e10 <__ulp+0x14>
 8009e30:	3b14      	subs	r3, #20
 8009e32:	2b1e      	cmp	r3, #30
 8009e34:	f04f 0201 	mov.w	r2, #1
 8009e38:	bfda      	itte	le
 8009e3a:	f1c3 031f 	rsble	r3, r3, #31
 8009e3e:	fa02 f303 	lslle.w	r3, r2, r3
 8009e42:	4613      	movgt	r3, r2
 8009e44:	4618      	mov	r0, r3
 8009e46:	e7e3      	b.n	8009e10 <__ulp+0x14>
 8009e48:	7ff00000 	.word	0x7ff00000

08009e4c <__b2d>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	6905      	ldr	r5, [r0, #16]
 8009e50:	f100 0714 	add.w	r7, r0, #20
 8009e54:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009e58:	1f2e      	subs	r6, r5, #4
 8009e5a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f7ff fdc5 	bl	80099ee <__hi0bits>
 8009e64:	f1c0 0320 	rsb	r3, r0, #32
 8009e68:	280a      	cmp	r0, #10
 8009e6a:	600b      	str	r3, [r1, #0]
 8009e6c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009ee4 <__b2d+0x98>
 8009e70:	dc14      	bgt.n	8009e9c <__b2d+0x50>
 8009e72:	f1c0 0e0b 	rsb	lr, r0, #11
 8009e76:	fa24 f10e 	lsr.w	r1, r4, lr
 8009e7a:	42b7      	cmp	r7, r6
 8009e7c:	ea41 030c 	orr.w	r3, r1, ip
 8009e80:	bf34      	ite	cc
 8009e82:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009e86:	2100      	movcs	r1, #0
 8009e88:	3015      	adds	r0, #21
 8009e8a:	fa04 f000 	lsl.w	r0, r4, r0
 8009e8e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009e92:	ea40 0201 	orr.w	r2, r0, r1
 8009e96:	ec43 2b10 	vmov	d0, r2, r3
 8009e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e9c:	42b7      	cmp	r7, r6
 8009e9e:	bf3a      	itte	cc
 8009ea0:	f1a5 0608 	subcc.w	r6, r5, #8
 8009ea4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009ea8:	2100      	movcs	r1, #0
 8009eaa:	380b      	subs	r0, #11
 8009eac:	d015      	beq.n	8009eda <__b2d+0x8e>
 8009eae:	4084      	lsls	r4, r0
 8009eb0:	f1c0 0520 	rsb	r5, r0, #32
 8009eb4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009eb8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009ebc:	42be      	cmp	r6, r7
 8009ebe:	fa21 fc05 	lsr.w	ip, r1, r5
 8009ec2:	ea44 030c 	orr.w	r3, r4, ip
 8009ec6:	bf8c      	ite	hi
 8009ec8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009ecc:	2400      	movls	r4, #0
 8009ece:	fa01 f000 	lsl.w	r0, r1, r0
 8009ed2:	40ec      	lsrs	r4, r5
 8009ed4:	ea40 0204 	orr.w	r2, r0, r4
 8009ed8:	e7dd      	b.n	8009e96 <__b2d+0x4a>
 8009eda:	ea44 030c 	orr.w	r3, r4, ip
 8009ede:	460a      	mov	r2, r1
 8009ee0:	e7d9      	b.n	8009e96 <__b2d+0x4a>
 8009ee2:	bf00      	nop
 8009ee4:	3ff00000 	.word	0x3ff00000

08009ee8 <__d2b>:
 8009ee8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009eec:	460e      	mov	r6, r1
 8009eee:	2101      	movs	r1, #1
 8009ef0:	ec59 8b10 	vmov	r8, r9, d0
 8009ef4:	4615      	mov	r5, r2
 8009ef6:	f7ff fcb6 	bl	8009866 <_Balloc>
 8009efa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009efe:	4607      	mov	r7, r0
 8009f00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f04:	bb34      	cbnz	r4, 8009f54 <__d2b+0x6c>
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	f1b8 0300 	subs.w	r3, r8, #0
 8009f0c:	d027      	beq.n	8009f5e <__d2b+0x76>
 8009f0e:	a802      	add	r0, sp, #8
 8009f10:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009f14:	f7ff fd8a 	bl	8009a2c <__lo0bits>
 8009f18:	9900      	ldr	r1, [sp, #0]
 8009f1a:	b1f0      	cbz	r0, 8009f5a <__d2b+0x72>
 8009f1c:	9a01      	ldr	r2, [sp, #4]
 8009f1e:	f1c0 0320 	rsb	r3, r0, #32
 8009f22:	fa02 f303 	lsl.w	r3, r2, r3
 8009f26:	430b      	orrs	r3, r1
 8009f28:	40c2      	lsrs	r2, r0
 8009f2a:	617b      	str	r3, [r7, #20]
 8009f2c:	9201      	str	r2, [sp, #4]
 8009f2e:	9b01      	ldr	r3, [sp, #4]
 8009f30:	61bb      	str	r3, [r7, #24]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	bf14      	ite	ne
 8009f36:	2102      	movne	r1, #2
 8009f38:	2101      	moveq	r1, #1
 8009f3a:	6139      	str	r1, [r7, #16]
 8009f3c:	b1c4      	cbz	r4, 8009f70 <__d2b+0x88>
 8009f3e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009f42:	4404      	add	r4, r0
 8009f44:	6034      	str	r4, [r6, #0]
 8009f46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f4a:	6028      	str	r0, [r5, #0]
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	b003      	add	sp, #12
 8009f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f58:	e7d5      	b.n	8009f06 <__d2b+0x1e>
 8009f5a:	6179      	str	r1, [r7, #20]
 8009f5c:	e7e7      	b.n	8009f2e <__d2b+0x46>
 8009f5e:	a801      	add	r0, sp, #4
 8009f60:	f7ff fd64 	bl	8009a2c <__lo0bits>
 8009f64:	9b01      	ldr	r3, [sp, #4]
 8009f66:	617b      	str	r3, [r7, #20]
 8009f68:	2101      	movs	r1, #1
 8009f6a:	6139      	str	r1, [r7, #16]
 8009f6c:	3020      	adds	r0, #32
 8009f6e:	e7e5      	b.n	8009f3c <__d2b+0x54>
 8009f70:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009f74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f78:	6030      	str	r0, [r6, #0]
 8009f7a:	6918      	ldr	r0, [r3, #16]
 8009f7c:	f7ff fd37 	bl	80099ee <__hi0bits>
 8009f80:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009f84:	e7e1      	b.n	8009f4a <__d2b+0x62>

08009f86 <__ratio>:
 8009f86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8a:	4688      	mov	r8, r1
 8009f8c:	4669      	mov	r1, sp
 8009f8e:	4681      	mov	r9, r0
 8009f90:	f7ff ff5c 	bl	8009e4c <__b2d>
 8009f94:	a901      	add	r1, sp, #4
 8009f96:	4640      	mov	r0, r8
 8009f98:	ec57 6b10 	vmov	r6, r7, d0
 8009f9c:	f7ff ff56 	bl	8009e4c <__b2d>
 8009fa0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fa4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009fa8:	eba3 0c02 	sub.w	ip, r3, r2
 8009fac:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009fb0:	1a9b      	subs	r3, r3, r2
 8009fb2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009fb6:	ec5b ab10 	vmov	sl, fp, d0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	bfce      	itee	gt
 8009fbe:	463a      	movgt	r2, r7
 8009fc0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009fc4:	465a      	movle	r2, fp
 8009fc6:	4659      	mov	r1, fp
 8009fc8:	463d      	mov	r5, r7
 8009fca:	bfd4      	ite	le
 8009fcc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009fd0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	ee10 2a10 	vmov	r2, s0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4629      	mov	r1, r5
 8009fde:	f7f6 fc45 	bl	800086c <__aeabi_ddiv>
 8009fe2:	ec41 0b10 	vmov	d0, r0, r1
 8009fe6:	b003      	add	sp, #12
 8009fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fec <__copybits>:
 8009fec:	3901      	subs	r1, #1
 8009fee:	b510      	push	{r4, lr}
 8009ff0:	1149      	asrs	r1, r1, #5
 8009ff2:	6914      	ldr	r4, [r2, #16]
 8009ff4:	3101      	adds	r1, #1
 8009ff6:	f102 0314 	add.w	r3, r2, #20
 8009ffa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ffe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a002:	42a3      	cmp	r3, r4
 800a004:	4602      	mov	r2, r0
 800a006:	d303      	bcc.n	800a010 <__copybits+0x24>
 800a008:	2300      	movs	r3, #0
 800a00a:	428a      	cmp	r2, r1
 800a00c:	d305      	bcc.n	800a01a <__copybits+0x2e>
 800a00e:	bd10      	pop	{r4, pc}
 800a010:	f853 2b04 	ldr.w	r2, [r3], #4
 800a014:	f840 2b04 	str.w	r2, [r0], #4
 800a018:	e7f3      	b.n	800a002 <__copybits+0x16>
 800a01a:	f842 3b04 	str.w	r3, [r2], #4
 800a01e:	e7f4      	b.n	800a00a <__copybits+0x1e>

0800a020 <__any_on>:
 800a020:	f100 0214 	add.w	r2, r0, #20
 800a024:	6900      	ldr	r0, [r0, #16]
 800a026:	114b      	asrs	r3, r1, #5
 800a028:	4298      	cmp	r0, r3
 800a02a:	b510      	push	{r4, lr}
 800a02c:	db11      	blt.n	800a052 <__any_on+0x32>
 800a02e:	dd0a      	ble.n	800a046 <__any_on+0x26>
 800a030:	f011 011f 	ands.w	r1, r1, #31
 800a034:	d007      	beq.n	800a046 <__any_on+0x26>
 800a036:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a03a:	fa24 f001 	lsr.w	r0, r4, r1
 800a03e:	fa00 f101 	lsl.w	r1, r0, r1
 800a042:	428c      	cmp	r4, r1
 800a044:	d10b      	bne.n	800a05e <__any_on+0x3e>
 800a046:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d803      	bhi.n	800a056 <__any_on+0x36>
 800a04e:	2000      	movs	r0, #0
 800a050:	bd10      	pop	{r4, pc}
 800a052:	4603      	mov	r3, r0
 800a054:	e7f7      	b.n	800a046 <__any_on+0x26>
 800a056:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a05a:	2900      	cmp	r1, #0
 800a05c:	d0f5      	beq.n	800a04a <__any_on+0x2a>
 800a05e:	2001      	movs	r0, #1
 800a060:	e7f6      	b.n	800a050 <__any_on+0x30>

0800a062 <_calloc_r>:
 800a062:	b538      	push	{r3, r4, r5, lr}
 800a064:	fb02 f401 	mul.w	r4, r2, r1
 800a068:	4621      	mov	r1, r4
 800a06a:	f000 f857 	bl	800a11c <_malloc_r>
 800a06e:	4605      	mov	r5, r0
 800a070:	b118      	cbz	r0, 800a07a <_calloc_r+0x18>
 800a072:	4622      	mov	r2, r4
 800a074:	2100      	movs	r1, #0
 800a076:	f7fc fd37 	bl	8006ae8 <memset>
 800a07a:	4628      	mov	r0, r5
 800a07c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a080 <_free_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	4605      	mov	r5, r0
 800a084:	2900      	cmp	r1, #0
 800a086:	d045      	beq.n	800a114 <_free_r+0x94>
 800a088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a08c:	1f0c      	subs	r4, r1, #4
 800a08e:	2b00      	cmp	r3, #0
 800a090:	bfb8      	it	lt
 800a092:	18e4      	addlt	r4, r4, r3
 800a094:	f000 fa36 	bl	800a504 <__malloc_lock>
 800a098:	4a1f      	ldr	r2, [pc, #124]	; (800a118 <_free_r+0x98>)
 800a09a:	6813      	ldr	r3, [r2, #0]
 800a09c:	4610      	mov	r0, r2
 800a09e:	b933      	cbnz	r3, 800a0ae <_free_r+0x2e>
 800a0a0:	6063      	str	r3, [r4, #4]
 800a0a2:	6014      	str	r4, [r2, #0]
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0aa:	f000 ba2c 	b.w	800a506 <__malloc_unlock>
 800a0ae:	42a3      	cmp	r3, r4
 800a0b0:	d90c      	bls.n	800a0cc <_free_r+0x4c>
 800a0b2:	6821      	ldr	r1, [r4, #0]
 800a0b4:	1862      	adds	r2, r4, r1
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	bf04      	itt	eq
 800a0ba:	681a      	ldreq	r2, [r3, #0]
 800a0bc:	685b      	ldreq	r3, [r3, #4]
 800a0be:	6063      	str	r3, [r4, #4]
 800a0c0:	bf04      	itt	eq
 800a0c2:	1852      	addeq	r2, r2, r1
 800a0c4:	6022      	streq	r2, [r4, #0]
 800a0c6:	6004      	str	r4, [r0, #0]
 800a0c8:	e7ec      	b.n	800a0a4 <_free_r+0x24>
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	685a      	ldr	r2, [r3, #4]
 800a0ce:	b10a      	cbz	r2, 800a0d4 <_free_r+0x54>
 800a0d0:	42a2      	cmp	r2, r4
 800a0d2:	d9fa      	bls.n	800a0ca <_free_r+0x4a>
 800a0d4:	6819      	ldr	r1, [r3, #0]
 800a0d6:	1858      	adds	r0, r3, r1
 800a0d8:	42a0      	cmp	r0, r4
 800a0da:	d10b      	bne.n	800a0f4 <_free_r+0x74>
 800a0dc:	6820      	ldr	r0, [r4, #0]
 800a0de:	4401      	add	r1, r0
 800a0e0:	1858      	adds	r0, r3, r1
 800a0e2:	4282      	cmp	r2, r0
 800a0e4:	6019      	str	r1, [r3, #0]
 800a0e6:	d1dd      	bne.n	800a0a4 <_free_r+0x24>
 800a0e8:	6810      	ldr	r0, [r2, #0]
 800a0ea:	6852      	ldr	r2, [r2, #4]
 800a0ec:	605a      	str	r2, [r3, #4]
 800a0ee:	4401      	add	r1, r0
 800a0f0:	6019      	str	r1, [r3, #0]
 800a0f2:	e7d7      	b.n	800a0a4 <_free_r+0x24>
 800a0f4:	d902      	bls.n	800a0fc <_free_r+0x7c>
 800a0f6:	230c      	movs	r3, #12
 800a0f8:	602b      	str	r3, [r5, #0]
 800a0fa:	e7d3      	b.n	800a0a4 <_free_r+0x24>
 800a0fc:	6820      	ldr	r0, [r4, #0]
 800a0fe:	1821      	adds	r1, r4, r0
 800a100:	428a      	cmp	r2, r1
 800a102:	bf04      	itt	eq
 800a104:	6811      	ldreq	r1, [r2, #0]
 800a106:	6852      	ldreq	r2, [r2, #4]
 800a108:	6062      	str	r2, [r4, #4]
 800a10a:	bf04      	itt	eq
 800a10c:	1809      	addeq	r1, r1, r0
 800a10e:	6021      	streq	r1, [r4, #0]
 800a110:	605c      	str	r4, [r3, #4]
 800a112:	e7c7      	b.n	800a0a4 <_free_r+0x24>
 800a114:	bd38      	pop	{r3, r4, r5, pc}
 800a116:	bf00      	nop
 800a118:	20000404 	.word	0x20000404

0800a11c <_malloc_r>:
 800a11c:	b570      	push	{r4, r5, r6, lr}
 800a11e:	1ccd      	adds	r5, r1, #3
 800a120:	f025 0503 	bic.w	r5, r5, #3
 800a124:	3508      	adds	r5, #8
 800a126:	2d0c      	cmp	r5, #12
 800a128:	bf38      	it	cc
 800a12a:	250c      	movcc	r5, #12
 800a12c:	2d00      	cmp	r5, #0
 800a12e:	4606      	mov	r6, r0
 800a130:	db01      	blt.n	800a136 <_malloc_r+0x1a>
 800a132:	42a9      	cmp	r1, r5
 800a134:	d903      	bls.n	800a13e <_malloc_r+0x22>
 800a136:	230c      	movs	r3, #12
 800a138:	6033      	str	r3, [r6, #0]
 800a13a:	2000      	movs	r0, #0
 800a13c:	bd70      	pop	{r4, r5, r6, pc}
 800a13e:	f000 f9e1 	bl	800a504 <__malloc_lock>
 800a142:	4a21      	ldr	r2, [pc, #132]	; (800a1c8 <_malloc_r+0xac>)
 800a144:	6814      	ldr	r4, [r2, #0]
 800a146:	4621      	mov	r1, r4
 800a148:	b991      	cbnz	r1, 800a170 <_malloc_r+0x54>
 800a14a:	4c20      	ldr	r4, [pc, #128]	; (800a1cc <_malloc_r+0xb0>)
 800a14c:	6823      	ldr	r3, [r4, #0]
 800a14e:	b91b      	cbnz	r3, 800a158 <_malloc_r+0x3c>
 800a150:	4630      	mov	r0, r6
 800a152:	f000 f98f 	bl	800a474 <_sbrk_r>
 800a156:	6020      	str	r0, [r4, #0]
 800a158:	4629      	mov	r1, r5
 800a15a:	4630      	mov	r0, r6
 800a15c:	f000 f98a 	bl	800a474 <_sbrk_r>
 800a160:	1c43      	adds	r3, r0, #1
 800a162:	d124      	bne.n	800a1ae <_malloc_r+0x92>
 800a164:	230c      	movs	r3, #12
 800a166:	6033      	str	r3, [r6, #0]
 800a168:	4630      	mov	r0, r6
 800a16a:	f000 f9cc 	bl	800a506 <__malloc_unlock>
 800a16e:	e7e4      	b.n	800a13a <_malloc_r+0x1e>
 800a170:	680b      	ldr	r3, [r1, #0]
 800a172:	1b5b      	subs	r3, r3, r5
 800a174:	d418      	bmi.n	800a1a8 <_malloc_r+0x8c>
 800a176:	2b0b      	cmp	r3, #11
 800a178:	d90f      	bls.n	800a19a <_malloc_r+0x7e>
 800a17a:	600b      	str	r3, [r1, #0]
 800a17c:	50cd      	str	r5, [r1, r3]
 800a17e:	18cc      	adds	r4, r1, r3
 800a180:	4630      	mov	r0, r6
 800a182:	f000 f9c0 	bl	800a506 <__malloc_unlock>
 800a186:	f104 000b 	add.w	r0, r4, #11
 800a18a:	1d23      	adds	r3, r4, #4
 800a18c:	f020 0007 	bic.w	r0, r0, #7
 800a190:	1ac3      	subs	r3, r0, r3
 800a192:	d0d3      	beq.n	800a13c <_malloc_r+0x20>
 800a194:	425a      	negs	r2, r3
 800a196:	50e2      	str	r2, [r4, r3]
 800a198:	e7d0      	b.n	800a13c <_malloc_r+0x20>
 800a19a:	428c      	cmp	r4, r1
 800a19c:	684b      	ldr	r3, [r1, #4]
 800a19e:	bf16      	itet	ne
 800a1a0:	6063      	strne	r3, [r4, #4]
 800a1a2:	6013      	streq	r3, [r2, #0]
 800a1a4:	460c      	movne	r4, r1
 800a1a6:	e7eb      	b.n	800a180 <_malloc_r+0x64>
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	6849      	ldr	r1, [r1, #4]
 800a1ac:	e7cc      	b.n	800a148 <_malloc_r+0x2c>
 800a1ae:	1cc4      	adds	r4, r0, #3
 800a1b0:	f024 0403 	bic.w	r4, r4, #3
 800a1b4:	42a0      	cmp	r0, r4
 800a1b6:	d005      	beq.n	800a1c4 <_malloc_r+0xa8>
 800a1b8:	1a21      	subs	r1, r4, r0
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	f000 f95a 	bl	800a474 <_sbrk_r>
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d0cf      	beq.n	800a164 <_malloc_r+0x48>
 800a1c4:	6025      	str	r5, [r4, #0]
 800a1c6:	e7db      	b.n	800a180 <_malloc_r+0x64>
 800a1c8:	20000404 	.word	0x20000404
 800a1cc:	20000408 	.word	0x20000408

0800a1d0 <__ssputs_r>:
 800a1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d4:	688e      	ldr	r6, [r1, #8]
 800a1d6:	429e      	cmp	r6, r3
 800a1d8:	4682      	mov	sl, r0
 800a1da:	460c      	mov	r4, r1
 800a1dc:	4690      	mov	r8, r2
 800a1de:	4699      	mov	r9, r3
 800a1e0:	d837      	bhi.n	800a252 <__ssputs_r+0x82>
 800a1e2:	898a      	ldrh	r2, [r1, #12]
 800a1e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1e8:	d031      	beq.n	800a24e <__ssputs_r+0x7e>
 800a1ea:	6825      	ldr	r5, [r4, #0]
 800a1ec:	6909      	ldr	r1, [r1, #16]
 800a1ee:	1a6f      	subs	r7, r5, r1
 800a1f0:	6965      	ldr	r5, [r4, #20]
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1f8:	fb95 f5f3 	sdiv	r5, r5, r3
 800a1fc:	f109 0301 	add.w	r3, r9, #1
 800a200:	443b      	add	r3, r7
 800a202:	429d      	cmp	r5, r3
 800a204:	bf38      	it	cc
 800a206:	461d      	movcc	r5, r3
 800a208:	0553      	lsls	r3, r2, #21
 800a20a:	d530      	bpl.n	800a26e <__ssputs_r+0x9e>
 800a20c:	4629      	mov	r1, r5
 800a20e:	f7ff ff85 	bl	800a11c <_malloc_r>
 800a212:	4606      	mov	r6, r0
 800a214:	b950      	cbnz	r0, 800a22c <__ssputs_r+0x5c>
 800a216:	230c      	movs	r3, #12
 800a218:	f8ca 3000 	str.w	r3, [sl]
 800a21c:	89a3      	ldrh	r3, [r4, #12]
 800a21e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a222:	81a3      	strh	r3, [r4, #12]
 800a224:	f04f 30ff 	mov.w	r0, #4294967295
 800a228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a22c:	463a      	mov	r2, r7
 800a22e:	6921      	ldr	r1, [r4, #16]
 800a230:	f7ff fb0e 	bl	8009850 <memcpy>
 800a234:	89a3      	ldrh	r3, [r4, #12]
 800a236:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a23a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a23e:	81a3      	strh	r3, [r4, #12]
 800a240:	6126      	str	r6, [r4, #16]
 800a242:	6165      	str	r5, [r4, #20]
 800a244:	443e      	add	r6, r7
 800a246:	1bed      	subs	r5, r5, r7
 800a248:	6026      	str	r6, [r4, #0]
 800a24a:	60a5      	str	r5, [r4, #8]
 800a24c:	464e      	mov	r6, r9
 800a24e:	454e      	cmp	r6, r9
 800a250:	d900      	bls.n	800a254 <__ssputs_r+0x84>
 800a252:	464e      	mov	r6, r9
 800a254:	4632      	mov	r2, r6
 800a256:	4641      	mov	r1, r8
 800a258:	6820      	ldr	r0, [r4, #0]
 800a25a:	f000 f93a 	bl	800a4d2 <memmove>
 800a25e:	68a3      	ldr	r3, [r4, #8]
 800a260:	1b9b      	subs	r3, r3, r6
 800a262:	60a3      	str	r3, [r4, #8]
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	441e      	add	r6, r3
 800a268:	6026      	str	r6, [r4, #0]
 800a26a:	2000      	movs	r0, #0
 800a26c:	e7dc      	b.n	800a228 <__ssputs_r+0x58>
 800a26e:	462a      	mov	r2, r5
 800a270:	f000 f94a 	bl	800a508 <_realloc_r>
 800a274:	4606      	mov	r6, r0
 800a276:	2800      	cmp	r0, #0
 800a278:	d1e2      	bne.n	800a240 <__ssputs_r+0x70>
 800a27a:	6921      	ldr	r1, [r4, #16]
 800a27c:	4650      	mov	r0, sl
 800a27e:	f7ff feff 	bl	800a080 <_free_r>
 800a282:	e7c8      	b.n	800a216 <__ssputs_r+0x46>

0800a284 <_svfiprintf_r>:
 800a284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a288:	461d      	mov	r5, r3
 800a28a:	898b      	ldrh	r3, [r1, #12]
 800a28c:	061f      	lsls	r7, r3, #24
 800a28e:	b09d      	sub	sp, #116	; 0x74
 800a290:	4680      	mov	r8, r0
 800a292:	460c      	mov	r4, r1
 800a294:	4616      	mov	r6, r2
 800a296:	d50f      	bpl.n	800a2b8 <_svfiprintf_r+0x34>
 800a298:	690b      	ldr	r3, [r1, #16]
 800a29a:	b96b      	cbnz	r3, 800a2b8 <_svfiprintf_r+0x34>
 800a29c:	2140      	movs	r1, #64	; 0x40
 800a29e:	f7ff ff3d 	bl	800a11c <_malloc_r>
 800a2a2:	6020      	str	r0, [r4, #0]
 800a2a4:	6120      	str	r0, [r4, #16]
 800a2a6:	b928      	cbnz	r0, 800a2b4 <_svfiprintf_r+0x30>
 800a2a8:	230c      	movs	r3, #12
 800a2aa:	f8c8 3000 	str.w	r3, [r8]
 800a2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b2:	e0c8      	b.n	800a446 <_svfiprintf_r+0x1c2>
 800a2b4:	2340      	movs	r3, #64	; 0x40
 800a2b6:	6163      	str	r3, [r4, #20]
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a2bc:	2320      	movs	r3, #32
 800a2be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2c2:	2330      	movs	r3, #48	; 0x30
 800a2c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2c8:	9503      	str	r5, [sp, #12]
 800a2ca:	f04f 0b01 	mov.w	fp, #1
 800a2ce:	4637      	mov	r7, r6
 800a2d0:	463d      	mov	r5, r7
 800a2d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a2d6:	b10b      	cbz	r3, 800a2dc <_svfiprintf_r+0x58>
 800a2d8:	2b25      	cmp	r3, #37	; 0x25
 800a2da:	d13e      	bne.n	800a35a <_svfiprintf_r+0xd6>
 800a2dc:	ebb7 0a06 	subs.w	sl, r7, r6
 800a2e0:	d00b      	beq.n	800a2fa <_svfiprintf_r+0x76>
 800a2e2:	4653      	mov	r3, sl
 800a2e4:	4632      	mov	r2, r6
 800a2e6:	4621      	mov	r1, r4
 800a2e8:	4640      	mov	r0, r8
 800a2ea:	f7ff ff71 	bl	800a1d0 <__ssputs_r>
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	f000 80a4 	beq.w	800a43c <_svfiprintf_r+0x1b8>
 800a2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f6:	4453      	add	r3, sl
 800a2f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a2fa:	783b      	ldrb	r3, [r7, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f000 809d 	beq.w	800a43c <_svfiprintf_r+0x1b8>
 800a302:	2300      	movs	r3, #0
 800a304:	f04f 32ff 	mov.w	r2, #4294967295
 800a308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a30c:	9304      	str	r3, [sp, #16]
 800a30e:	9307      	str	r3, [sp, #28]
 800a310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a314:	931a      	str	r3, [sp, #104]	; 0x68
 800a316:	462f      	mov	r7, r5
 800a318:	2205      	movs	r2, #5
 800a31a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a31e:	4850      	ldr	r0, [pc, #320]	; (800a460 <_svfiprintf_r+0x1dc>)
 800a320:	f7f5 ff6e 	bl	8000200 <memchr>
 800a324:	9b04      	ldr	r3, [sp, #16]
 800a326:	b9d0      	cbnz	r0, 800a35e <_svfiprintf_r+0xda>
 800a328:	06d9      	lsls	r1, r3, #27
 800a32a:	bf44      	itt	mi
 800a32c:	2220      	movmi	r2, #32
 800a32e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a332:	071a      	lsls	r2, r3, #28
 800a334:	bf44      	itt	mi
 800a336:	222b      	movmi	r2, #43	; 0x2b
 800a338:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a33c:	782a      	ldrb	r2, [r5, #0]
 800a33e:	2a2a      	cmp	r2, #42	; 0x2a
 800a340:	d015      	beq.n	800a36e <_svfiprintf_r+0xea>
 800a342:	9a07      	ldr	r2, [sp, #28]
 800a344:	462f      	mov	r7, r5
 800a346:	2000      	movs	r0, #0
 800a348:	250a      	movs	r5, #10
 800a34a:	4639      	mov	r1, r7
 800a34c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a350:	3b30      	subs	r3, #48	; 0x30
 800a352:	2b09      	cmp	r3, #9
 800a354:	d94d      	bls.n	800a3f2 <_svfiprintf_r+0x16e>
 800a356:	b1b8      	cbz	r0, 800a388 <_svfiprintf_r+0x104>
 800a358:	e00f      	b.n	800a37a <_svfiprintf_r+0xf6>
 800a35a:	462f      	mov	r7, r5
 800a35c:	e7b8      	b.n	800a2d0 <_svfiprintf_r+0x4c>
 800a35e:	4a40      	ldr	r2, [pc, #256]	; (800a460 <_svfiprintf_r+0x1dc>)
 800a360:	1a80      	subs	r0, r0, r2
 800a362:	fa0b f000 	lsl.w	r0, fp, r0
 800a366:	4318      	orrs	r0, r3
 800a368:	9004      	str	r0, [sp, #16]
 800a36a:	463d      	mov	r5, r7
 800a36c:	e7d3      	b.n	800a316 <_svfiprintf_r+0x92>
 800a36e:	9a03      	ldr	r2, [sp, #12]
 800a370:	1d11      	adds	r1, r2, #4
 800a372:	6812      	ldr	r2, [r2, #0]
 800a374:	9103      	str	r1, [sp, #12]
 800a376:	2a00      	cmp	r2, #0
 800a378:	db01      	blt.n	800a37e <_svfiprintf_r+0xfa>
 800a37a:	9207      	str	r2, [sp, #28]
 800a37c:	e004      	b.n	800a388 <_svfiprintf_r+0x104>
 800a37e:	4252      	negs	r2, r2
 800a380:	f043 0302 	orr.w	r3, r3, #2
 800a384:	9207      	str	r2, [sp, #28]
 800a386:	9304      	str	r3, [sp, #16]
 800a388:	783b      	ldrb	r3, [r7, #0]
 800a38a:	2b2e      	cmp	r3, #46	; 0x2e
 800a38c:	d10c      	bne.n	800a3a8 <_svfiprintf_r+0x124>
 800a38e:	787b      	ldrb	r3, [r7, #1]
 800a390:	2b2a      	cmp	r3, #42	; 0x2a
 800a392:	d133      	bne.n	800a3fc <_svfiprintf_r+0x178>
 800a394:	9b03      	ldr	r3, [sp, #12]
 800a396:	1d1a      	adds	r2, r3, #4
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	9203      	str	r2, [sp, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	bfb8      	it	lt
 800a3a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3a4:	3702      	adds	r7, #2
 800a3a6:	9305      	str	r3, [sp, #20]
 800a3a8:	4d2e      	ldr	r5, [pc, #184]	; (800a464 <_svfiprintf_r+0x1e0>)
 800a3aa:	7839      	ldrb	r1, [r7, #0]
 800a3ac:	2203      	movs	r2, #3
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	f7f5 ff26 	bl	8000200 <memchr>
 800a3b4:	b138      	cbz	r0, 800a3c6 <_svfiprintf_r+0x142>
 800a3b6:	2340      	movs	r3, #64	; 0x40
 800a3b8:	1b40      	subs	r0, r0, r5
 800a3ba:	fa03 f000 	lsl.w	r0, r3, r0
 800a3be:	9b04      	ldr	r3, [sp, #16]
 800a3c0:	4303      	orrs	r3, r0
 800a3c2:	3701      	adds	r7, #1
 800a3c4:	9304      	str	r3, [sp, #16]
 800a3c6:	7839      	ldrb	r1, [r7, #0]
 800a3c8:	4827      	ldr	r0, [pc, #156]	; (800a468 <_svfiprintf_r+0x1e4>)
 800a3ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ce:	2206      	movs	r2, #6
 800a3d0:	1c7e      	adds	r6, r7, #1
 800a3d2:	f7f5 ff15 	bl	8000200 <memchr>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d038      	beq.n	800a44c <_svfiprintf_r+0x1c8>
 800a3da:	4b24      	ldr	r3, [pc, #144]	; (800a46c <_svfiprintf_r+0x1e8>)
 800a3dc:	bb13      	cbnz	r3, 800a424 <_svfiprintf_r+0x1a0>
 800a3de:	9b03      	ldr	r3, [sp, #12]
 800a3e0:	3307      	adds	r3, #7
 800a3e2:	f023 0307 	bic.w	r3, r3, #7
 800a3e6:	3308      	adds	r3, #8
 800a3e8:	9303      	str	r3, [sp, #12]
 800a3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ec:	444b      	add	r3, r9
 800a3ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a3f0:	e76d      	b.n	800a2ce <_svfiprintf_r+0x4a>
 800a3f2:	fb05 3202 	mla	r2, r5, r2, r3
 800a3f6:	2001      	movs	r0, #1
 800a3f8:	460f      	mov	r7, r1
 800a3fa:	e7a6      	b.n	800a34a <_svfiprintf_r+0xc6>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	3701      	adds	r7, #1
 800a400:	9305      	str	r3, [sp, #20]
 800a402:	4619      	mov	r1, r3
 800a404:	250a      	movs	r5, #10
 800a406:	4638      	mov	r0, r7
 800a408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a40c:	3a30      	subs	r2, #48	; 0x30
 800a40e:	2a09      	cmp	r2, #9
 800a410:	d903      	bls.n	800a41a <_svfiprintf_r+0x196>
 800a412:	2b00      	cmp	r3, #0
 800a414:	d0c8      	beq.n	800a3a8 <_svfiprintf_r+0x124>
 800a416:	9105      	str	r1, [sp, #20]
 800a418:	e7c6      	b.n	800a3a8 <_svfiprintf_r+0x124>
 800a41a:	fb05 2101 	mla	r1, r5, r1, r2
 800a41e:	2301      	movs	r3, #1
 800a420:	4607      	mov	r7, r0
 800a422:	e7f0      	b.n	800a406 <_svfiprintf_r+0x182>
 800a424:	ab03      	add	r3, sp, #12
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	4622      	mov	r2, r4
 800a42a:	4b11      	ldr	r3, [pc, #68]	; (800a470 <_svfiprintf_r+0x1ec>)
 800a42c:	a904      	add	r1, sp, #16
 800a42e:	4640      	mov	r0, r8
 800a430:	f7fc fbf6 	bl	8006c20 <_printf_float>
 800a434:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a438:	4681      	mov	r9, r0
 800a43a:	d1d6      	bne.n	800a3ea <_svfiprintf_r+0x166>
 800a43c:	89a3      	ldrh	r3, [r4, #12]
 800a43e:	065b      	lsls	r3, r3, #25
 800a440:	f53f af35 	bmi.w	800a2ae <_svfiprintf_r+0x2a>
 800a444:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a446:	b01d      	add	sp, #116	; 0x74
 800a448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44c:	ab03      	add	r3, sp, #12
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	4622      	mov	r2, r4
 800a452:	4b07      	ldr	r3, [pc, #28]	; (800a470 <_svfiprintf_r+0x1ec>)
 800a454:	a904      	add	r1, sp, #16
 800a456:	4640      	mov	r0, r8
 800a458:	f7fc fe98 	bl	800718c <_printf_i>
 800a45c:	e7ea      	b.n	800a434 <_svfiprintf_r+0x1b0>
 800a45e:	bf00      	nop
 800a460:	0800c21c 	.word	0x0800c21c
 800a464:	0800c222 	.word	0x0800c222
 800a468:	0800c226 	.word	0x0800c226
 800a46c:	08006c21 	.word	0x08006c21
 800a470:	0800a1d1 	.word	0x0800a1d1

0800a474 <_sbrk_r>:
 800a474:	b538      	push	{r3, r4, r5, lr}
 800a476:	4c06      	ldr	r4, [pc, #24]	; (800a490 <_sbrk_r+0x1c>)
 800a478:	2300      	movs	r3, #0
 800a47a:	4605      	mov	r5, r0
 800a47c:	4608      	mov	r0, r1
 800a47e:	6023      	str	r3, [r4, #0]
 800a480:	f7fc fa7c 	bl	800697c <_sbrk>
 800a484:	1c43      	adds	r3, r0, #1
 800a486:	d102      	bne.n	800a48e <_sbrk_r+0x1a>
 800a488:	6823      	ldr	r3, [r4, #0]
 800a48a:	b103      	cbz	r3, 800a48e <_sbrk_r+0x1a>
 800a48c:	602b      	str	r3, [r5, #0]
 800a48e:	bd38      	pop	{r3, r4, r5, pc}
 800a490:	2000068c 	.word	0x2000068c

0800a494 <strncmp>:
 800a494:	b510      	push	{r4, lr}
 800a496:	b16a      	cbz	r2, 800a4b4 <strncmp+0x20>
 800a498:	3901      	subs	r1, #1
 800a49a:	1884      	adds	r4, r0, r2
 800a49c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a4a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d103      	bne.n	800a4b0 <strncmp+0x1c>
 800a4a8:	42a0      	cmp	r0, r4
 800a4aa:	d001      	beq.n	800a4b0 <strncmp+0x1c>
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1f5      	bne.n	800a49c <strncmp+0x8>
 800a4b0:	1a98      	subs	r0, r3, r2
 800a4b2:	bd10      	pop	{r4, pc}
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	e7fc      	b.n	800a4b2 <strncmp+0x1e>

0800a4b8 <__ascii_wctomb>:
 800a4b8:	b149      	cbz	r1, 800a4ce <__ascii_wctomb+0x16>
 800a4ba:	2aff      	cmp	r2, #255	; 0xff
 800a4bc:	bf85      	ittet	hi
 800a4be:	238a      	movhi	r3, #138	; 0x8a
 800a4c0:	6003      	strhi	r3, [r0, #0]
 800a4c2:	700a      	strbls	r2, [r1, #0]
 800a4c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a4c8:	bf98      	it	ls
 800a4ca:	2001      	movls	r0, #1
 800a4cc:	4770      	bx	lr
 800a4ce:	4608      	mov	r0, r1
 800a4d0:	4770      	bx	lr

0800a4d2 <memmove>:
 800a4d2:	4288      	cmp	r0, r1
 800a4d4:	b510      	push	{r4, lr}
 800a4d6:	eb01 0302 	add.w	r3, r1, r2
 800a4da:	d807      	bhi.n	800a4ec <memmove+0x1a>
 800a4dc:	1e42      	subs	r2, r0, #1
 800a4de:	4299      	cmp	r1, r3
 800a4e0:	d00a      	beq.n	800a4f8 <memmove+0x26>
 800a4e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4e6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a4ea:	e7f8      	b.n	800a4de <memmove+0xc>
 800a4ec:	4283      	cmp	r3, r0
 800a4ee:	d9f5      	bls.n	800a4dc <memmove+0xa>
 800a4f0:	1881      	adds	r1, r0, r2
 800a4f2:	1ad2      	subs	r2, r2, r3
 800a4f4:	42d3      	cmn	r3, r2
 800a4f6:	d100      	bne.n	800a4fa <memmove+0x28>
 800a4f8:	bd10      	pop	{r4, pc}
 800a4fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a502:	e7f7      	b.n	800a4f4 <memmove+0x22>

0800a504 <__malloc_lock>:
 800a504:	4770      	bx	lr

0800a506 <__malloc_unlock>:
 800a506:	4770      	bx	lr

0800a508 <_realloc_r>:
 800a508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50a:	4607      	mov	r7, r0
 800a50c:	4614      	mov	r4, r2
 800a50e:	460e      	mov	r6, r1
 800a510:	b921      	cbnz	r1, 800a51c <_realloc_r+0x14>
 800a512:	4611      	mov	r1, r2
 800a514:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a518:	f7ff be00 	b.w	800a11c <_malloc_r>
 800a51c:	b922      	cbnz	r2, 800a528 <_realloc_r+0x20>
 800a51e:	f7ff fdaf 	bl	800a080 <_free_r>
 800a522:	4625      	mov	r5, r4
 800a524:	4628      	mov	r0, r5
 800a526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a528:	f000 f814 	bl	800a554 <_malloc_usable_size_r>
 800a52c:	42a0      	cmp	r0, r4
 800a52e:	d20f      	bcs.n	800a550 <_realloc_r+0x48>
 800a530:	4621      	mov	r1, r4
 800a532:	4638      	mov	r0, r7
 800a534:	f7ff fdf2 	bl	800a11c <_malloc_r>
 800a538:	4605      	mov	r5, r0
 800a53a:	2800      	cmp	r0, #0
 800a53c:	d0f2      	beq.n	800a524 <_realloc_r+0x1c>
 800a53e:	4631      	mov	r1, r6
 800a540:	4622      	mov	r2, r4
 800a542:	f7ff f985 	bl	8009850 <memcpy>
 800a546:	4631      	mov	r1, r6
 800a548:	4638      	mov	r0, r7
 800a54a:	f7ff fd99 	bl	800a080 <_free_r>
 800a54e:	e7e9      	b.n	800a524 <_realloc_r+0x1c>
 800a550:	4635      	mov	r5, r6
 800a552:	e7e7      	b.n	800a524 <_realloc_r+0x1c>

0800a554 <_malloc_usable_size_r>:
 800a554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a558:	1f18      	subs	r0, r3, #4
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	bfbc      	itt	lt
 800a55e:	580b      	ldrlt	r3, [r1, r0]
 800a560:	18c0      	addlt	r0, r0, r3
 800a562:	4770      	bx	lr

0800a564 <_init>:
 800a564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a566:	bf00      	nop
 800a568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a56a:	bc08      	pop	{r3}
 800a56c:	469e      	mov	lr, r3
 800a56e:	4770      	bx	lr

0800a570 <_fini>:
 800a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a572:	bf00      	nop
 800a574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a576:	bc08      	pop	{r3}
 800a578:	469e      	mov	lr, r3
 800a57a:	4770      	bx	lr
